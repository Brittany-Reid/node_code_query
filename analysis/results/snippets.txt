[
 {
  "package": "7zip",
  "snippets": [
   {
    "description": "\n",
    "snippet": "// $ npm install 7zip   # local\n// even in node.js\nvar _7z = require('7zip')['7z']\nvar task = spawn(_7z, ['x', 'somefile.7z', '-y'])\n"
   }
  ]
 },
 {
  "package": "@4geit%2Frct-notification-menu-component",
  "snippets": [
   {
    "description": "\n2. Depending on where you want to use the component you will need to import the class `RctNotificationMenuComponent` to your project JS file as follows:\n\n",
    "snippet": "import RctNotificationMenuComponent from '@4geit/rct-notification-menu-component'\n"
   },
   {
    "description": "\nFor instance if you want to use this component in your `App.js` component, you can use the RctNotificationMenuComponent component in the JSX code as follows:\n\n",
    "snippet": "import React from 'react'\n// ...\nimport RctNotificationMenuComponent from '@4geit/rct-notification-menu-component'\n// ...\nconst App = () => (\n  <div className=\"App\">\n    <RctNotificationMenuComponent/>\n  </div>\n)\n"
   }
  ]
 },
 {
  "package": "@advclb%2Fdesign-system-react",
  "snippets": []
 },
 {
  "package": "@alex_doone%2Fdoone-ui",
  "snippets": [
   {
    "description": "## 安装使用\n\n",
    "snippet": "npm install @alex_doone/doone-ui -D or\nyarn add @alex_doone/doone-ui\n"
   },
   {
    "description": "### 第二步\n\n在main.js文件里注册组件(注册组件)\n",
    "snippet": "import Doone from '@alex_doone/doone-ui'\nimport '@alex_doone/doone-ui/dist/doone-ui.css'\nVue.use(Doone)\n"
   },
   {
    "description": "\n按需注册\n",
    "snippet": "import { DoAmount } from '@alex_doone/echarts'\nVue.use(DoAmount)\n"
   },
   {
    "description": "### 第三步\n\nfrom app.vue\n",
    "snippet": "<template>\n    <div id=\"app\">\n        <DoAmount :value=\"500\"/>\n    </div>\n</template>\n<script>\nexport default {\n    name: \"app\"\n};\n</script>\n"
   }
  ]
 },
 {
  "package": "@alifd%2Ftheme-7403",
  "snippets": []
 },
 {
  "package": "@appnest%2Fboomerang",
  "snippets": []
 },
 {
  "package": "@author%2Eio%2Felement-draggable",
  "snippets": []
 },
 {
  "package": "@beisen-platform%2Fux-standard-table",
  "snippets": []
 },
 {
  "package": "@bitcapital%2Fcore-sdk",
  "snippets": []
 },
 {
  "package": "@blueshit%2Foss-client",
  "snippets": []
 },
 {
  "package": "@blueshit%2Fsquel",
  "snippets": []
 },
 {
  "package": "@bolt%2Fsettings-spacing",
  "snippets": [
   {
    "description": "### Install via NPM\n\n",
    "snippet": "npm install @bolt/settings-spacing\n"
   },
   {
    "description": "## Getting Started\n\nThe best way to start using Bolt is via the *Bolt Starterkit* (coming soon), a pre-assembled front-end boilerplate designed to get you up and running as quickly as possible.\n\nYou can also use the full [Bolt Core](https://www.npmjs.com/package/@bolt/core) CSS framework on its own, or, install just the parts you need and fold the different ITCSS layers of Bolt into your existing codebase.\n\nInstalling Bolt’s spacing settings is as easy as running NPM install:\n\n",
    "snippet": "npm install @bolt/settings-spacing\n"
   },
   {
    "description": "### Usage\n\nOnce installed, you should  `@import`  the main Sass partial into your project’s main `.scss` file to make the included variables available to the rest of your code.\n\n",
    "snippet": "// Settings\n@import ‘@bolt/settings-spacing’\n...\n\n// Tools\n@import ‘@bolt/tools-...’\n"
   }
  ]
 },
 {
  "package": "@brysgo%2Fsemantic-release-bitbucket",
  "snippets": [
   {
    "description": "### Usage\n\nfull configuration:\n\n``` json\n{\n  \"verifyConfig\": [..., \"@iteratec/semantic-release-bitbucket\", ...],\n  \"publish\": [\n    ...,\n    {\n      \"path\": \"@iteratec/semantic-release-bitbucket\",\n      \"bitbucketUrl\": \"http://my.bitbucket.server\",\n      \"teamName\": \"A-Team\",\n      \"repositoryName\": \"bucket\"\n    },\n    ...\n  ]\n}\n",
    "snippet": "minimum configuration:\n``` json\n{\n  \"verifyConfig\": [..., \"@iteratec/semantic-release-bitbucket\", ...],\n  \"publish\": [\n    ...,\n    {\n      \"path\": \"@iteratec/semantic-release-bitbucket\",\n      \"repositoryName\": \"bucket\"\n    },\n    ...\n  ]\n}\n"
   }
  ]
 },
 {
  "package": "@cassette%2Fcomponents",
  "snippets": []
 },
 {
  "package": "@cedx%2Fgulp-david",
  "snippets": []
 },
 {
  "package": "@dadi%2Fweb-handlebars",
  "snippets": [
   {
    "description": "## Partials\n\nPartials must be registered with Handlebars before they can be used in a template. This library takes care of the registration for you, simply supply the path to your partials in the configuration option `additionalTemplates`.\n\n",
    "snippet": "pages/\n|_ partials/\n|_ |_ common/\n|_ |_ |_ header.hbs\n|_ contact-info.hbs\n|_ home.hbs\n"
   },
   {
    "description": "\nHelpers can be individual JavaScript files within the specifed directory, or all in a single file.\n\n*Example:*\n\n",
    "snippet": "const handlebars = require('handlebars')\n\n/*\n * Returns the full name and price of the supplied product\n * Usage: {{ renderProduct product }}\n */\nhandlebars.registerHelper('renderProduct', product => {\n  return `helper: ${product.name} - £${product.price}`\n})\n"
   }
  ]
 },
 {
  "package": "@datafire%2Fbackupify",
  "snippets": [
   {
    "description": "## Installing an Integration\nIntegrations are available in the `@datafire` scope in npm:\n",
    "snippet": "npm install --save @datafire/hacker_news\n"
   },
   {
    "description": "## Calling an Integration\nIntegrations use Promises, and can be used with `async/await` syntax.\n",
    "snippet": "let hn = require('@datafire/hacker_news').create();\n\n// With async/await\n(async function() {\n\n  let stories = await hn.getStories({storyType: 'top'});\n  console.log(stories);\n\n})();\n\n// With Promises\nhn.getStories({storyType: 'top'})\n  .then(stories => {\n    console.log(stories);\n  });\n\n"
   },
   {
    "description": "## Contributing\nNew integrations are welcome. They can be automatically added from an OpenAPI spec\nor an RSS feed:\n\n",
    "snippet": "node scripts/integrate.js --name acme --openapi https://api.acme.com/openapi.json\n# or\nnode scripts/integrate.js --name acme_rss --rss https://acme.com/rss.xml\n"
   }
  ]
 },
 {
  "package": "@drupsys%2Flogger",
  "snippets": []
 },
 {
  "package": "@eluck%2Fmaterial-ui-flat-pagination-2%2E1%2E4",
  "snippets": []
 },
 {
  "package": "@enso-ui%2Fhow-to",
  "snippets": []
 },
 {
  "package": "@event-checkin%2Fcontracts",
  "snippets": []
 },
 {
  "package": "@fawen%2Fgitmoji-commit-hook",
  "snippets": [
   {
    "description": "## Install\n\n- Install gitmoji-commit-hook package\n\n",
    "snippet": "$ npm install -g @fawen/gitmoji-commit-hook\n"
   },
   {
    "description": "\n- Install the hook\n\n",
    "snippet": "$ cd any-git-initialized-directory\n$ gitmoji-commit-hook --init\n"
   }
  ]
 },
 {
  "package": "@fewer%2Fpassword",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "const password = require('@fewer/password');\n\n// TODO: DEMONSTRATE API\n"
   }
  ]
 },
 {
  "package": "@flosportsinc%2Fng-video-events",
  "snippets": [
   {
    "description": "## App\nInside your `AppModule` install `SvgTransferStateModule` like so:\n\n",
    "snippet": "import { NgModule } from '@angular/core'\nimport { FloVideoEventsModule, VIDEO_PLAYER_EVENT_BINDINGS } from '@flosportsinc/ng-video-events'\n\n@NgModule({\n  imports: [\n    FloVideoEventsModule\n  ],\n  providers: [\n    // define your event bindings via Angular dependency injection\n    {\n      provide: VIDEO_PLAYER_EVENT_BINDINGS,\n      multi: true,\n      useValue: {\n        // every event has the following signature\n        pause: (videoEvent: Event, videoElement: HTMLVideoElement, \n          videoInstanceId: string,  videoGroupId: string, \n          metadata: TMeta, emitFunc: (msg: TMessage) => void, \n          onDestroy: Observable<any>) => {\n            // do stuff in here\n        }\n      }\n    },\n    {\n      provide: VIDEO_PLAYER_EVENT_BINDINGS,\n      multi: true,\n      useFactory: (someService) => { // for AOT, you will need to make this an exported factory function\n        return {\n          pause: (...args) => {\n            // do stuff here\n            someService.doTheThing(arg[1])\n          }\n        }\n      },\n      deps: [SomeService] // pass in your services to do more interesting things!\n    }\n  ]\n})\nexport class AppModule { }\n"
   },
   {
    "description": "\nEvent handler signature\n",
    "snippet": "type FloVideoEventHandler<TMeta = any, TMessage = any> = (\n  videoEvent: Event,\n  videoElement: HTMLVideoElement,\n  videoInstanceId: string,\n  videoGroupId: string,\n  metadata: TMeta,\n  emitFunc: (msg: TMessage) => void,\n  onDestroy: Observable<any>\n) => void\n"
   },
   {
    "description": "## With metadata\nYou can pass data from parent components through to your event binding functions if needed. \n\n",
    "snippet": "  // notice the \"metadata\" parameter\n  (videoEvent: Event, videoElement: HTMLVideoElement, \n    videoInstanceId: string,  videoGroupId: string, \n    metadata: TMeta, emitFunc: (msg: TMessage) => void, \n    onDestroy: Observable<any>) => {\n      // you can use it in your event binding\n    }\n"
   },
   {
    "description": "## Emit changes from event bindings\nYou can emit messages from your event bindings and pass them back up to parent components if needed. \n\n",
    "snippet": "  // notice the \"emitFunc\" parameter\n  (videoEvent: Event, videoElement: HTMLVideoElement, \n    videoInstanceId: string,  videoGroupId: string, \n    metadata: TMeta, emitFunc: (msg: TMessage) => void, \n    onDestroy: Observable<any>) => {\n      // calling this will emit an event from the directive \"floVideoEventMessage\"\n      emitFunc('whatever you want')\n    }\n"
   }
  ]
 },
 {
  "package": "@functions-io-labs-performance%2Ftest758",
  "snippets": []
 },
 {
  "package": "@gardenhq%2Fwillow",
  "snippets": [
   {
    "description": "## Installation\n\n",
    "snippet": "npm install --save[-dev] @gardenhq/willow\n\n"
   }
  ]
 },
 {
  "package": "@henris%2Fmenu",
  "snippets": [
   {
    "description": "## A Henri's component\n\n",
    "snippet": "npm install @henris/output\n"
   }
  ]
 },
 {
  "package": "@ibm-wch-sdk%2Fng-idc",
  "snippets": []
 },
 {
  "package": "@itentialopensource%2Fadapter-apic",
  "snippets": []
 },
 {
  "package": "@jdplus%2Ftea",
  "snippets": [
   {
    "description": "### 引用方式\n\n",
    "snippet": "\n/**  es6引用 **/\n\timport tea  from 'tea.js';\n\n\n"
   },
   {
    "description": "### 使用方法\n\n",
    "snippet": "\n/** get方式请求  **/\n\ttea.get(url,data,corss)\n\t\t.then(data => successCb(data));  //成功的回调函数\n\t\t.catch(err => errorCb(err));\t\t//错误的回调函数\n\t\n\t/** post方式请求  **/\n\ttea.post(url,data,corss)\n\t\t.then(data => successCb(data));  //成功的回调函数\n\t\t.catch(err => errorCb(err));\t\t//错误的回调函数\n\t\n\t/** jsonp方式请求  **/\n\ttea.jsonp(url,data,corss)\n\t\t.then(data => successCb(data));  //成功的回调函数\n\t\t.catch(err => errorCb(err));\t\t//错误的回调函数\n\t\t\n\t\t\n\t/** 跨域接口  get方式请求 最后一个参数传true即可支持 **/\n\ttea.get(url,data,true)\n\t\t.then(data => successCb(data));  //成功的回调函数\n\t\t.catch(err => errorCb(err));\t\t//错误的回调函数\t\n\t\t\n\n"
   }
  ]
 },
 {
  "package": "@liaison%2Flayer",
  "snippets": [
   {
    "description": "## Installation\n\n",
    "snippet": "npm install @liaison/layer\n"
   }
  ]
 },
 {
  "package": "@littleq%2Fdeep-extend",
  "snippets": []
 },
 {
  "package": "@looker%2Fembed-sdk",
  "snippets": []
 },
 {
  "package": "@magisterjs%2Fdynamic-authcode",
  "snippets": [
   {
    "description": "\nThis package automatically fetches the authentication code used by [`magister.js`](https://github.com/simplyGits/MagisterJS).\n\nUsing this package is recommended if you use `magister.js` in an app. Alternatively you can execute an HTTP GET-request yourself or rely on the authentication code that comes bundled in `magister.js`. See the [`magisterjs-authcode` repository](https://github.com/simplyGits/magisterjs-authcode) for more information.\n\n`npm install @magisterjs/dynamic-authcode`\n\n",
    "snippet": "const getAuthCode = require('@magisterjs/dynamic-authcode');\n\nconst authCode = await getAuthCode();\n"
   }
  ]
 },
 {
  "package": "@matchlighter%2Fcommon_library",
  "snippets": []
 },
 {
  "package": "@msv300%2Fsails-hook-actions2-swagger",
  "snippets": [
   {
    "description": "### Installation\n\n",
    "snippet": "$ npm i @logisticinfotech/sails-hook-actions2-swagger\n"
   }
  ]
 },
 {
  "package": "@n4jsd%2Fjsdom",
  "snippets": []
 },
 {
  "package": "@namgoe%2Fgcmstatic",
  "snippets": [
   {
    "description": "## Directory structure\n\nThe structure of `src` is mostly mirrored in `build`. Markdown files (`.md`)\nwill be processed to `.html`, dotfiles removed, and some other file types will\nbe processed and removed as well (see below for details).\n\nThe biggest difference is that all language-specific files will be moved to\nseparate directory hierarchies. Given these an `src` directory like\n\n",
    "snippet": "index.de.md\nindex.en.md\nfoobar.de.md\nsubpage/\n  index.de.md\n  index.en.md\nimg/\n  logo.png\n"
   },
   {
    "description": "\nthe `build` directory will contain\n\n",
    "snippet": "de/\n  index.html\n  foobar.html\n  subpage/\n    index.html\nen/\n  index.html\n  subpage/\n    index.html\nimg/\n  logo.png\nstatic/\nindex.html\n"
   },
   {
    "description": "### `defaults.yaml`\n\nIn addition to specifying metadata in the front matter, the source will be\nsearched for files named `defaults.yaml`. These should contain YAML maps, the\nkeys of which are taken as shell-style glob patterns, and the values are again\nmaps which are applied to all files matching the pattern relative to the\nsubdirectory the `defaults.yaml` is located in, e.g.\n\n",
    "snippet": "\"*.md\":\n  key1: val1\n\n\"**/*.txt\":\n  key2: val2\n"
   },
   {
    "description": "### Standard settings\n\nThe default properties, except for the ones auto-generated during processing,\nare set from `lib/defaults.yaml`. Here are its contents (at the time of writing\nthis README):\n\n",
    "snippet": "'**/*.de.{md,htm,html}':\n  lang: de\n\n'**/*.en.{md,htm,html}':\n  lang: en\n\n---\n\n'**':\n  livereload: true\n  sidebar: true\n\n'**/*.{md,htm,html}':\n  layout: default\n  template: true\n  lang: de\n"
   },
   {
    "description": "### `meta.yaml`\n\nFinally, some configuration options are site-wide rather than page-specific. The\ndefaults of these are set in `lib/meta.yaml`, which can be overridden in\n`src/meta.yaml`. Here they are:\n\n",
    "snippet": "langs:\n  de:\n    name: Deutsch\n    sitename: Institut für Numerische und Angewandte Mathematik\n  en:\n    name: English\n    sitename: Institute for Numerical and Applied Mathematics\n\nindexlang: de\n"
   },
   {
    "description": "## Bootstrap\n\nGCMS' responsive page layout is based on\nthe [Bootstrap framework](http://getbootstrap.com/), and `gcmstatic` inherits\nthis dependency. For documentation, refer to the linked page.\n\nPresence of the framework should be mostly transparent, as it is handled in the\n`default` layout, but you may use it for your own purposes, for example to\ncreate a responsive multi-column layout. The layout wraps the page content in a\n`.container-fluid`, so all you need to do is to add a row and two columns:\n\n",
    "snippet": "---\ntitle: Column example\n---\n\n<div class=\"row\">\n<div class=\"col-sm-6\">\n\n## First column\n\n</div>\n<div class=\"col-sm-6\">\n\n## Second column\n\n</div>\n</div>\n"
   },
   {
    "description": "## Templates\n\n`gcmstatic` uses the [Handlebars](http://handlebarsjs.com/) template engine on\nall files having a `template` property. The basics are rather simple. Variable\nexpansion happens between `{{` and `}}`, so `{{title}}` expands to the page\ntitle set in the front matter. Conditionals are written like\n\n",
    "snippet": "{{#if someproperty}}It's set.{{else}}It's unset.{{/if}}\n{{#unless someproperty}}It's set.{{else}}It's unset.{{/unless}}\n"
   },
   {
    "description": "\nwhere in both cases the `{{else}}` branch is optional. Iteration over lists and\nmaps can be done by\n\n",
    "snippet": "{{#each somelist}}{{somefield}}{{/each}}\n"
   },
   {
    "description": "\nwhich expands to the the `somefield` properties of all list elements in turn.\n\nFor debugging, there is a `log` helper:\n\n",
    "snippet": "{{log something}}\n"
   },
   {
    "description": "### Partials\n\nA *partial* is a \"non-evaluated\" template that can be included in other\ntemplates and is expanded in the context of the containing template (by\ndefault). Partials in `gcmstatic` are registered using the `partial` property\n(see above for details), and are included by\n\n",
    "snippet": "{{> somepartial}}\n"
   }
  ]
 },
 {
  "package": "@njlr%2Fseq",
  "snippets": []
 },
 {
  "package": "@nodert-win10-cu%2Fwindows%2Eapplicationmodel%2Ecore",
  "snippets": []
 },
 {
  "package": "@nodert-win10-rs3%2Fwindows%2Emedia%2Eplaylists",
  "snippets": []
 },
 {
  "package": "@og_soft%2Fdetes-table",
  "snippets": []
 },
 {
  "package": "@olistic%2Fstoryshots",
  "snippets": [
   {
    "description": "## Configure Storyshots\n\nCreate a new test file with the name `Storyshots.test.js`. (Or whatever the name you prefer).\nThen add following content to it:\n\n",
    "snippet": "import initStoryshots from 'storyshots';\ninitStoryshots();\n"
   },
   {
    "description": "### `configPath`\n\nBy default Storyshots assume the default config directory path for your project as below:\n\n* For React Storybook: `.storybook`\n* For React Native Storybook: `storybook`\n\nIf you are using a different config directory path, you could change it like this:\n\n",
    "snippet": "initStoryshots({\n  configPath: '.my-storybook-config-dir'\n});\n"
   },
   {
    "description": "### `suit`\n\nBy default, we group stories inside Jest test suit called \"Storyshots\". You could change it like this:\n\n",
    "snippet": "initStoryshots({\n  suit: 'MyStoryshots'\n});\n"
   },
   {
    "description": "### `storyKindRegex`\n\nIf you'd like to only run a subset of the stories for your snapshot tests based on the story kind:\n\n",
    "snippet": "initStoryshots({\n  storyKindRegex: /MyComponent/\n});\n"
   },
   {
    "description": "### `storyNameRegex`\n\nIf you'd like to only run a subset of the stories for your snapshot tests based on the story name:\n\n",
    "snippet": "initStoryshots({\n  storyNameRegex: /buttons/\n});\n"
   }
  ]
 },
 {
  "package": "@openfonts%2Fasap_all",
  "snippets": []
 },
 {
  "package": "@overlook%2Frouter-path",
  "snippets": []
 },
 {
  "package": "@particular%2E%2Fimport-moltin-to-algolia",
  "snippets": []
 },
 {
  "package": "@peledni%2Fevent-bus",
  "snippets": []
 },
 {
  "package": "@pencil%2Ejs%2Finput",
  "snippets": [
   {
    "description": "## Examples\n\n",
    "snippet": "import Input from \"@pencil.js/input\";\n\nclass MyInput extends Input {\n}\n"
   }
  ]
 },
 {
  "package": "@rars%2Fngx-webstorage",
  "snippets": []
 },
 {
  "package": "@react-mdc%2Felevation",
  "snippets": [
   {
    "description": "=============================\n\n[![License: MIT](https://img.shields.io/github/license/mashape/apistatus.svg)](https://opensource.org/licenses/MIT)\n[![npm version](https://badge.fury.io/js/react-material-components-web.svg)](https://www.npmjs.com/package/react-material-components-web)\n[![Build Status](https://img.shields.io/travis/react-mdc/react-material-components-web.svg)](https://travis-ci.org/react-mdc/react-material-components-web)\n\n\nReact wrapper of [Material Components Web](\nhttps://github.com/material-components/material-components-web)\n\nUnder Active Development\n------------------------\n\nThe project is under active development.\n\nEvery updates can contain breaking changes before 0.2.0.\n\nWe **do not** recommend you to use this library for product now.\n\nDocumentation\n-------------\n\nYou can find a document with live demo from https://react-mdc.github.io/\n\nFeatures\n--------\n\n*  Typed strictly with [TypeScript](http://typescriptlang.org)\n\n   You can get a typing support with TypeScript\n\n*  Stylesheet independent\n\n   Since *Material Components Web* can be customized with scss,\n   It does not depend on specific stylesheet.\n   You can load your own stylesheet or default one.\n\n*  Packaged each components individually\n\n   Like *Material Components Web*, You can get all components individually,\n   under [@react-mdc npm scope](https://www.npmjs.com/%7Ereact-mdc).\n\nGetting Start\n-------------\n\nInstall the library\n\n``` bash\n$ npm install --save @react-mdc/typography\n",
    "snippet": "\nImport stylesheet\n\n``` html\n<link type=\"text/css\" href=\"/static/material-components-web.min.css\" rel=\"stylesheet\" />\n\n"
   },
   {
    "description": "\nOr load using webpack and scss-loader\n\n`my-mdc.scss`\n``` scss\n\n// My main Sass file.\n$mdc-theme-primary: #9c27b0;\n$mdc-theme-accent: #76ff03;\n$mdc-theme-background: #fff;\n\n@import \"material-components-web/material-components-web\";\n\n",
    "snippet": "\n`app.js`\n``` javascript\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport \"./stylesheets/my-mdc.scss\";\nimport Main from './main.js';\n\nReactDOM.render(<Main />, document.getElementById('root'));\n\n"
   },
   {
    "description": "\nAnd import *@react-mdc* then try it.\n\n`main.js`\n``` typescript\n\nimport * as React from \"react\";\nimport Typography from \"@react-mdc/typography\";\n\nexport default class Main extends React.Component<{}, {}> {\n    render () {\n        return (\n            <Typography>\n                <Typography.Title>\n                    This is an example\n                </Typography.Title>\n                <Typography.Body2>\n                    Hello world!\n                </Typography.Body2>\n            </Typography>\n        );\n    }\n}\n\n",
    "snippet": "\nSetup for Development\n---------------------\n\nBootstrap\n\n``` shell\n\n$ lerna bootstrap\n\n"
   },
   {
    "description": "\nBuild\n\n``` shell\n\n$ npm run build\n\n",
    "snippet": "\n\nRun Docs\n--------\n\n``` shell\n\n$ cd docs\n$ npm start\n\n"
   },
   {
    "description": "\nWatch for Changes and Build\n---------------------------\n\n``` shell\n\n$ npm run watch\n\n",
    "snippet": "\n\nRun Test\n--------\n\n``` shell\n\n$ npm test\n\n"
   }
  ]
 },
 {
  "package": "@readme%2Fchangelog",
  "snippets": [
   {
    "description": "## Usage\nParses your recent git history for any commits that look like the following:\n\n",
    "snippet": "[feature][new] This is a brand new feature!\n\nThis is a longer description of the feature\n"
   }
  ]
 },
 {
  "package": "@ripter%2Faframe-alongpath-component",
  "snippets": [
   {
    "description": "\nThen register and use.\n\n",
    "snippet": "require('aframe');\nrequire('aframe-curve-component');\nrequire('aframe-alongpath-component');\n"
   }
  ]
 },
 {
  "package": "@ryancavanaugh%2Fkeyboardjs",
  "snippets": []
 },
 {
  "package": "@seekbiblestudy%2Fevents%2Efetch",
  "snippets": []
 },
 {
  "package": "@semibold%2Ffullscreen",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "// Global\n// <script src=\"./dist/release/fullscreen.js\"></script>\n\n// NodeJS Module\nconst { Fullscreen } = require(\"@semibold/fullscreen\");\n\n// ES-next Module\nimport { Fullscreen } from \"@semibold/fullscreen\";\n"
   },
   {
    "description": "## Instance & API\n\n",
    "snippet": "/**\n * @param {Element} target - target element\n */\nconst fs = new Fullscreen(target);\n\n/**\n * @typedef {Object} Metadata\n * @property {string} name\n * @property {string} version\n * @property {string} revision\n * @property {boolean} production\n * @property {string} lastCompiled\n * @return {Metadata}\n */\nFullscreen.metadata;\n\n/**\n * @return {Element} - get current target element\n */\nfs.currentElement;\n\n/**\n * @return {FullscreenAPIMapping | null}\n */\nfs.fullscreenMapping;\n\n/**\n * @desc The `fullscreenEnabled` attribute tells you whether or not the document is\n *       currently in a state that would allow fullscreen mode to be requested.\n *\n * @return {boolean}\n */\nfs.fullscreenEnabled;\n\n/**\n * @desc The `fullscreenElement` attribute tells you the element that's currently being\n *       displayed fullscreen. If this is non-null, the document is in fullscreen mode.\n *       If this is null, the document is not in fullscreen mode.\n *\n * @return {Element | null}\n */\nfs.fullscreenElement;\n\n/**\n * @desc Return BrowsingContextPromise\n *\n * @return {PromiseConstructor | null}\n */\nfs.getBrowsingContextPromise();\n\n/**\n * @desc The `fs.requestFullscreen()` method issues an asynchronous request to make\n *       the target be displayed full-screen.\n * @desc It will always return promise if BrowsingContextPromise is available.\n *\n * @param {Object} [options]\n * @param {\"auto\" | \"show\" | \"hide\"} [options.navigationUI]\n *\n * @return {Promise<void> | void}\n */\nfs.requestFullscreen(options);\n\n/**\n * @desc The `fs.exitFullscreen()` is a method that takes the target out of\n *       full-screen mode.\n * @desc It will always return promise if BrowsingContextPromise is available.\n *\n * @param {boolean} [isBrowsingContext]\n * @desc `fs.exitFullscreen()` does nothing if `document.fullscreenElement !== target`.\n * @desc `fs.exitFullscreen(true)` equal to `docuemnt.exitFullscreen()`.\n *\n * @return {Promise<void> | void}\n */\nfs.exitFullscreen(isBrowsingContext);\n\n/**\n * @desc Needn't to add prefix to the `type`\n * @desc The `fullscreenchange` event is fired when the document is switched to/out-of\n *       fullscreen mode.\n * @desc The fullscreenerror event is fired when the document cannot switch to fullscreen\n *       mode.\n *\n * @param {FullscreenEventType} type - \"fullscreenchange\" | \"fullscreenerror\"\n * @param {EventListenerOrEventListenerObject} listener\n * @param {boolean | AddEventListenerOptions} [options]\n *\n * @deprecated Use returned promise if BrowsingContextPromise is available.\n */\nfs.addListener(type, listener, options);\n\n/**\n * @desc Needn't to add prefix to the `type`\n * @desc Similar to `fs.addEventListener(type, listener, options)`\n *\n * @param {FullscreenEventType} type - \"fullscreenchange\" | \"fullscreenerror\"\n * @param {EventListenerOrEventListenerObject} listener\n * @param {boolean | EventListenerOptions} [options]\n *\n * @deprecated Use returned promise if BrowsingContextPromise is available.\n */\nfs.removeListener(type, listener, options);\n"
   },
   {
    "description": "## Example\n\n",
    "snippet": "const fs = new Fullscreen(document.body);\n\nfunction onFullscreenChange(e) {\n    console.log(\"fullscreenchange event triggered\");\n}\n\nif (fs.fullscreenEnabled) {\n    console.log(fs.currentElement === document.body); // log: true\n\n    fs.addListener(\"fullscreenchange\", onFullscreenChange);\n    fs.requestFullscreen(); // triggered by gesture\n\n    if (fs.getBrowsingContextPromise()) {\n        fs.exitFullscreen()\n            .then(() => {\n                console.log(\"Everything is ok.\");\n            })\n            .catch(err => {\n                if (err) {\n                    console.warn(err);\n                } else {\n                    alert(\"Cannot exit fullscreen mode.\");\n                }\n            });\n    }\n}\n"
   },
   {
    "description": "## Non-public API\n\n",
    "snippet": "/**\n * @desc Be Careful: these methods only support a handful of the latest browsers.\n *\n * @desc Equal to `Element.onfullscreenchange` and `Element.onfullscreenerror`\n * @desc Equal to `Element.addEventListener` and `Element.removeEventListener`\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenchange\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/onfullscreenerror\n */\nfs.onfullscreenchange;\nfs.onfullscreenerror;\nfs.addEventListener(type, listener, options);\nfs.removeEventListener(type, listener, options);\n"
   }
  ]
 },
 {
  "package": "@sirian%2Fdumper",
  "snippets": []
 },
 {
  "package": "@taehooks%2Fuse-title",
  "snippets": []
 },
 {
  "package": "@tomorrow%2Freact-hamburger",
  "snippets": []
 },
 {
  "package": "@ts-common%2Fcommonmark-to-markdown",
  "snippets": []
 },
 {
  "package": "@tunnckocore%2Fcircleci",
  "snippets": []
 },
 {
  "package": "@types%2Fkoa-compress",
  "snippets": []
 },
 {
  "package": "@types%2Fredux-optimistic-ui",
  "snippets": []
 },
 {
  "package": "aaa",
  "snippets": []
 },
 {
  "package": "ab-ast-loader",
  "snippets": []
 },
 {
  "package": "abhttpserver",
  "snippets": []
 },
 {
  "package": "activity-theme-tabbed",
  "snippets": []
 },
 {
  "package": "actuate",
  "snippets": []
 },
 {
  "package": "akh%2Edcont",
  "snippets": [
   {
    "description": "## Usage\nThe dcont monad/transformer implements the [Fantasy Land][fl] monad, function, and applicative functor interfaces.\n\n<a href=\"https://github.com/fantasyland/fantasy-land\">\n    <img src=\"https://raw.github.com/fantasyland/fantasy-land/master/logo.png\" align=\"right\" width=\"82px\" height=\"82px\" alt=\"Fantasy Land logo\" />\n</a>\n\n",
    "snippet": "// Delimited continuation monad\nrequire('akh.dcont').DCont\nrequire('akh').DCont\n\n// Delimited continuation monad transformer\nrequire('akh.dcont').DContT\nrequire('akh').DContT\n"
   },
   {
    "description": "#### `DCont.run(m, k)`, `m.run(k)`\nPerform a delimited continuation computation `m` and complete with outer continuation `k`.\n\n",
    "snippet": "const liftM2 = require('akh').base.liftM2\nconst dcont = require('akh').dcont\n\nvar list = liftM2.bind(null, (x, y) -> [x, y])\n\nconst c = dcont.reset((p) =>\n    liftM2((x, y) => x + y,\n        dcont.shift(p, k =>\n            list(k(of(1)), k(of(2))),\n        dcont.shift(p, k =>\n            list(k(of(10)), k(of(20))))\n\ndcont.run(c, console.log) // logs: [[11, 21], [12, 22]]\n"
   }
  ]
 },
 {
  "package": "akyuu-adapter-toshihiko",
  "snippets": [
   {
    "description": "### A Probably Demo Configuration File\n\n**Filename:** ./config/default/connections.js\n\n",
    "snippet": "module.exports = {\n    main: {\n        adapter: \"toshihiko\",\n        dialect: \"mysql\",\n        database: \"test\",\n        username: \"root\",\n        password: \"\",\n        host: \"127.0.0.1\",\n        port: 3306,\n        showSql: true,\n        charset: \"utf8mb4_bin\"\n    }\n};\n"
   }
  ]
 },
 {
  "package": "alexmipaquetenpm",
  "snippets": []
 },
 {
  "package": "alhadis%2Eutils",
  "snippets": []
 },
 {
  "package": "angular-http-case-converter",
  "snippets": []
 },
 {
  "package": "angular2-easy-forms-enterthusiast",
  "snippets": [
   {
    "description": "## Setup\nYou can install the library from npm with the following command: \n",
    "snippet": "npm install --save angular2-easy-forms-enterthusiast\n"
   },
   {
    "description": "### System.js\n\nIf you are using `system.js` you also need to declare the library in your system.js config before you can use it. \n\n",
    "snippet": "var map = { 'angular2-easy-forms': 'node_modules/angular2-easy-forms' },\nvar packages = { 'angular2-easy-forms': {main: 'components.js', defaultExtension: 'js'} }\n"
   },
   {
    "description": "### Example \n\n",
    "snippet": "{\n    type: 'radio',\n    key: 'gender',\n    label: 'Gender',\n    value: 'male',\n    classes: {\n        'wrapper': 'some-class-for-the-wrapper',\n        'label': 'label-class',\n        'question': ['q-class-one', 'q-class-two'],\n        'error': ['error-one', 'error-two']\n    }\n    options: [\n        {value: 'male', name: 'Male'},\n        {value: 'female', name: 'Female'}\n    ]\n}\n"
   },
   {
    "description": "## Validation\nYou can optionally set a validation property on any question. The submit button of the form will be disabled if any question is invalid.\n\nThe validation property is an object array with the following format: \n",
    "snippet": "{\n    type: 'required' | 'minLength' | 'maxLength' | 'pattern' | 'match',\n    value: string | int | function \n    message: string\n}\n"
   },
   {
    "description": "## Build\nIf you want to make a new build:\n* Make your changes to the 'src' folder files\n* Compile each project (source AND example) from Typescript to Javascript:\n",
    "snippet": "npm run tsc\n"
   },
   {
    "description": "* Move the files from the lib folder to the example node_module folder and launch the example:\n",
    "snippet": "gulp serve\n"
   }
  ]
 },
 {
  "package": "angularjs-viewhead",
  "snippets": [
   {
    "description": "==================\n\nAn AngularJS module to allow views to set the page title and insert extra elements into the head.\n\nMotivation\n----------\n\nIn normal use, AngularJS's router allows the selected view to affect a particular portion of the page,\nmarked by the ``ng-view`` directive. However, AngularJS provides no solution for having the view affect\ndata outside of the view element, with the most pertinent example being the global page title.\n\nMany applications resort to tricks like having the controller for each view write extra data into the\nroot scope, which does indeed make that data available on a per-view basis, but it also violates the\nseparation of concerns between the controller and the template: the page title (and other ``head``\nelements) are a presentational concern, so they rightfully belong in the template.\n\nThis module provides simple directives to allow this information to be provided via the view template\nbut to still appear in the ``head`` element in the final document.\n\nLoading the Module\n------------------\n\nThis module declares itself as ``viewhead``, so it can be declared as a dependency of your application as\nnormal:\n\n",
    "snippet": "    var app = angular.module('myApp', ['ng', 'viewhead']);\n"
   }
  ]
 },
 {
  "package": "anno",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "/**\n * This function does something.\n * @hello world\n * @valueless\n */\nfunction doSomething () {\n  console.log('Did something.');\n}\n"
   },
   {
    "description": "\n",
    "snippet": "var anno = require('anno');\nvar result = anno(fs.readFileSync('test.js', 'utf8'));\n  console.log(result);\n});\n"
   }
  ]
 },
 {
  "package": "antdevtool-notifier",
  "snippets": []
 },
 {
  "package": "any-foreach",
  "snippets": []
 },
 {
  "package": "api-quick",
  "snippets": [
   {
    "description": "\nDoing a GET request on the above url will then return the data:\n\n",
    "snippet": "{\"date\":\"Tue, 17 May 2016 17:11:07 GMT\"}\n"
   },
   {
    "description": "\nGET http://127.0.0.1:8080/date/utc\n\n",
    "snippet": "{\"date\":\"Sat, 11 Jun 2016 15:04:55 GMT\"}\n"
   },
   {
    "description": "\nGET http://127.0.0.1:8080/date/iso\n\n",
    "snippet": "{\"date\":\"2016-06-11T15:04:55.418Z\"}\n"
   },
   {
    "description": "\nGET http://127.0.0.1:8080/date?format=utc\n\n",
    "snippet": "{\"date\":\"Sat, 11 Jun 2016 15:04:55 GMT\"}\n"
   },
   {
    "description": "\nGET http://127.0.0.1:8080/date?format=iso\n\n",
    "snippet": "{\"date\":\"2016-06-11T15:04:55.418Z\"}\n"
   },
   {
    "description": "## URL Layout\n\nThe components of the url that are provided to your function is shown below\n\nExample url:\n",
    "snippet": "http://127.0.0.1:8080/<:function_route:>/<:args:>?<:params:>\n"
   },
   {
    "description": "\n+ **req.method**: 'GET' or 'POST'\n+ **req.args**: An array of strings for the elements of the url not used to find the handler function.\n+ **req.body**: is either the url encoded parameters for GET requests or the posted data for POST requests in a JSON format.\n\n\n\n\nSo for the basic example above the url:\n\n",
    "snippet": "http://127.0.0.1:8080/date/now/utc?format=json\n"
   },
   {
    "description": "## Basic auth\n\nApiQuick supports basic auth which is where a username and password is encoded with base64 and put into the '*Authorization*' header. An example of sending the username and password 'test' with curl is shown below:\n",
    "snippet": "curl -H \"Authorization: Basic dXNlcjpwYXNz\" 127.0.0.1:8080/date\n"
   }
  ]
 },
 {
  "package": "appendable-cli-menu",
  "snippets": [
   {
    "description": "## Installation\n\n",
    "snippet": "npm install appendable-cli-menu\n"
   },
   {
    "description": "## Usage\n\nIn this example we use the\n[bonjour/zeroconf](http://github.com/watson/bonjour) protocol to look\nfor http servers on the local network. We add them to the menu as they\nare discovered and let the user choose one:\n\n",
    "snippet": "var bonjour = require('bonjour')()\nvar menu = require('appendable-cli-menu')\n\nvar servers = menu('Select an HTTP server', function (server) {\n  // stop looking when the user have selected an option\n  browser.stop()\n  console.log('You selected %s (host: %s)', server.name, server.value)\n})\n\nvar browser = bonjour.find({ type: 'http' }, function (service) {\n  servers.add({ name: service.name, value: service.host })\n})\n"
   },
   {
    "description": "\nThe above call the `menu()` will show en empty menu to the user:\n\n",
    "snippet": "? Select an HTTP server (waiting...)\n\n"
   },
   {
    "description": "\nThe subsequent calls to the `servers.add()` will add new options to the\nmenu as they become available:\n\n",
    "snippet": "? Select an HTTP server (use arrow keys)\n> mafintosh\n  feross\n  watson\n\n"
   }
  ]
 },
 {
  "package": "arango-model",
  "snippets": []
 },
 {
  "package": "aws-extra-one",
  "snippets": []
 },
 {
  "package": "babel-plugin-emojification",
  "snippets": []
 },
 {
  "package": "babel-plugin-type-assertion",
  "snippets": [
   {
    "description": "## Installation\n\n",
    "snippet": "npm install -S rtts_assert babel-core babel-plugin-type-assertion\n"
   },
   {
    "description": "## Usage\n\nYou need to transpile also rtts_assert's ES6 code.\n\nRequire hook:\n\n",
    "snippet": "require('babel-core/register')({\n  ignore: /node_modules\\/(?!rtts_assert)/,\n  plugins: ['type-assertion']\n});\n\nrequire('your-module');\n"
   }
  ]
 },
 {
  "package": "bce-sdk",
  "snippets": []
 },
 {
  "package": "beepscript",
  "snippets": [
   {
    "description": "# Supported notes\n",
    "snippet": "C0 C#0 Db0 D0 D#0 Eb0 E0 F0 F#0 Gb0 G0 G#0 Ab0 A0 A#0 Bb0 B0\nC1 C#1 Db1 D1 D#1 Eb1 E1 F1 F#1 Gb1 G1 G#1 Ab1 A1 A#1 Bb1 B1\nC2 C#2 Db2 D2 D#2 Eb2 E2 F2 F#2 Gb2 G2 G#2 Ab2 A2 A#2 Bb2 B2\nC3 C#3 Db3 D3 D#3 Eb3 E3 F3 F#3 Gb3 G3 G#3 Ab3 A3 A#3 Bb3 B3\nC4 C#4 Db4 D4 D#4 Eb4 E4 F4 F#4 Gb4 G4 G#4 Ab4 A4 A#4 Bb4 B4\nC5 C#5 Db5 D5 D#5 Eb5 E5 F5 F#5 Gb5 G5 G#5 Ab5 A5 A#5 Bb5 B5\nC6 C#6 Db6 D6 D#6 Eb6 E6 F6 F#6 Gb6 G6 G#6 Ab6 A6 A#6 Bb6 B6\nC7 C#7 Db7 D7 D#7 Eb7 E7 F7 F#7 Gb7 G7 G#7 Ab7 A7 A#7 Bb7 B7\nC8 C#8 Db8 D8 D#8 Eb8 E8 F8 F#8 Gb8 G8 G#8 Ab8 A8 A#8 Bb8 B8\n"
   }
  ]
 },
 {
  "package": "bgkalendar",
  "snippets": []
 },
 {
  "package": "blackstar-ui",
  "snippets": []
 },
 {
  "package": "board-access",
  "snippets": []
 },
 {
  "package": "box-content-ui-kits",
  "snippets": [
   {
    "description": "### Content Explorer\n[Documentation](https://developer.box.com/docs/box-content-explorer)\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { ContentExplorer } from 'box-content-ui-kits';\nimport messages from 'box-content-ui-kits/lib/i18n/en-US';\nimport 'box-content-ui-kits/dist/explorer.css';\n\nconst getLocalizedMessage = (id, replacements) =>\n    messages[id].replace(/{\\s*(\\w+)\\s*}/g, (match, key) => replacements[key]);\n\nrender(\n    <ContentExplorer\n        token={token}\n        getLocalizedMessage={getLocalizedMessage}\n    />,\n    document.querySelector('.container')\n);\n"
   },
   {
    "description": "#### File Picker\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { FilePicker } from 'box-content-ui-kits';\nimport messages from 'box-content-ui-kits/lib/i18n/en-US';\nimport 'box-content-ui-kits/dist/picker.css';\n\nconst getLocalizedMessage = (id, replacements) =>\n    messages[id].replace(/{\\s*(\\w+)\\s*}/g, (match, key) => replacements[key]);\n\nrender(\n    <FilePicker\n        token={token}\n        getLocalizedMessage={getLocalizedMessage}\n    />,\n    document.querySelector('.container')\n);\n"
   },
   {
    "description": "#### Folder Picker\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { FolderPicker } from 'box-content-ui-kits';\nimport messages from 'box-content-ui-kits/lib/i18n/en-US';\nimport 'box-content-ui-kits/dist/picker.css';\n\nconst getLocalizedMessage = (id, replacements) =>\n    messages[id].replace(/{\\s*(\\w+)\\s*}/g, (match, key) => replacements[key]);\n\nrender(\n    <FolderPicker\n        token={token}\n        getLocalizedMessage={getLocalizedMessage}\n    />,\n    document.querySelector('.container')\n);\n"
   },
   {
    "description": "### Content Uploader\n[Documentation](https://developer.box.com/docs/box-content-uploader)\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { ContentUploader } from 'box-content-ui-kits';\nimport messages from 'box-content-ui-kits/lib/i18n/en-US';\nimport 'box-content-ui-kits/dist/uploader.css';\n\nconst getLocalizedMessage = (id, replacements) =>\n    messages[id].replace(/{\\s*(\\w+)\\s*}/g, (match, key) => replacements[key]);\n\nrender(\n    <ContentUploader\n        token={token}\n        getLocalizedMessage={getLocalizedMessage}\n    />,\n    document.querySelector('.container')\n);\n"
   },
   {
    "description": "### Content Tree\n[Documentation](https://developer.box.com/docs/box-content-tree)\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { ContentTree } from 'box-content-ui-kits';\nimport messages from 'box-content-ui-kits/lib/i18n/en-US';\nimport 'box-content-ui-kits/dist/tree.css';\n\nconst getLocalizedMessage = (id, replacements) =>\n    messages[id].replace(/{\\s*(\\w+)\\s*}/g, (match, key) => replacements[key]);\n\nrender(\n    <ContentTree\n        token={token}\n        getLocalizedMessage={getLocalizedMessage}\n    />,\n    document.querySelector('.container')\n);\n"
   },
   {
    "description": "### Content Preview\n[Documentation](https://developer.box.com/docs/box-content-preview)\n\n***Note: The Box Content Preview has a slightly different interface than the other UI kits. Instead of importing localizations like the examples above, it requires a locale (defaults to en-US) to be passed in. This will automatically pull in the appropiate preview bundle and dynamically load it. It will also dynamically load the required CSS file.***\n\n",
    "snippet": "import React from 'react';\nimport { render } from 'react-dom';\nimport { ContentPreview } from 'box-content-ui-kits';\n\nrender(\n    <ContentPreview\n        id={id}\n        locale='en-US'\n        token={token}\n    />,\n    document.querySelector('.container')\n);\n"
   }
  ]
 },
 {
  "package": "brusher",
  "snippets": [
   {
    "description": "Or you may use unpkg\n",
    "snippet": "http://unpkg.com/brusher/dist/brusher.min.js\n"
   }
  ]
 },
 {
  "package": "builder-shared-dependencies",
  "snippets": []
 },
 {
  "package": "cameraaccess",
  "snippets": []
 },
 {
  "package": "cessie",
  "snippets": [
   {
    "description": "## Case\n\nExample usage of this CLI would be cases where you don't have the power, or will to edit/write postcss/webpack config for your application. One of those examples are Create React App.\n\nCreate React App:\n",
    "snippet": "$ npm run build\n$ cat build/static/css/*.chunk.css >> bundle.css\n$ cessie bundle.css -o ie11.css\n"
   },
   {
    "description": "## Install\n\n",
    "snippet": "$ npm i -g cessie\n// Or use npx\n$ npx cessie\n"
   },
   {
    "description": "## Usage\n\n",
    "snippet": "$ cessie inputFile.css -o ie11.css\n"
   },
   {
    "description": "\n",
    "snippet": "    Usage\n      $ cessie <input> -o filename.css\n\n    Options\n      --out-file,    -o Name of the out file\n      --minify,      -m Minify css. Defaults to true.\n      --watch,       -w Watch for file changes. Defaults to false.\n      --source-map,  -s Generate source map. Defaults to true.\n      --import-from, -i Import CSS variables from file (https://github.com/postcss/postcss-custom-properties#importfrom)\n      --export-to,   -e Export CSS variables to file (https://github.com/postcss/postcss-custom-properties#exportto)\n\n    Examples\n      $ cessie bundle.css -o ie11.css\n"
   },
   {
    "description": "## Examples\n",
    "snippet": "// css/sass/less file\n:root {\n  --color: white;\n  --padding: 10px;\n}\n\ndiv {\n  color: var(--color);\n  padding: calc(var(--padding) * 2);\n}\n\n// Run cessie with no minify\n$ cessie my.css -o output.css -m false\n\n// output.css\ndiv {\n  color: white;\n  padding: 20px;\n}\n"
   }
  ]
 },
 {
  "package": "check-urls",
  "snippets": []
 },
 {
  "package": "clappr-video-player",
  "snippets": []
 },
 {
  "package": "cli2compose",
  "snippets": []
 },
 {
  "package": "clmdraw",
  "snippets": []
 },
 {
  "package": "cloudsml-client",
  "snippets": []
 },
 {
  "package": "cloudstate",
  "snippets": []
 },
 {
  "package": "cmpbitvec",
  "snippets": []
 },
 {
  "package": "convert-to-array",
  "snippets": [
   {
    "description": "## Installation\n\nTo include toArray in your project, first install with npm.\n\n",
    "snippet": "$ npm install convert-to-array\n"
   },
   {
    "description": "### Usage\n",
    "snippet": "import toArray from 'convert-to-array';\n\ntoArray([1,2,3]) // => [1,2,3]\ntoArray(\"item1\") // => [\"item1\"]\ntoArray(undefined || false || null) // => []\n\n"
   }
  ]
 },
 {
  "package": "cordlr-config-common",
  "snippets": [
   {
    "description": "\nThen add it to your config.\n\n",
    "snippet": "{\n  \"plugins\": [\n    \"cordlr-config-common\"\n  ]\n}\n"
   }
  ]
 },
 {
  "package": "cordova-plugin-bst-push",
  "snippets": []
 },
 {
  "package": "couchjsonconf",
  "snippets": []
 },
 {
  "package": "create-bga-mesh",
  "snippets": [
   {
    "description": "# example\n\nturn a simplicial complex json file (like [bunny][] or [teapot][])\ninto a BGA file:\n\n``` js\nvar createBGA = require('create-bga-mesh')\nvar mesh = require('teapot')\n\nprocess.stdout.write(Buffer.from(createBGA({\n  endian: 'little',\n  buffers: [\n    { type: 'vec3', name: 'vertex.position', data: mesh.positions },\n    { type: 'uint32[3]', name: 'triangle.cell', data: mesh.cells }\n  ]\n})))\n",
    "snippet": "\n[bunny]: https://npmjs.com/package/bunny\n[teapot]: https://npmjs.com/package/teapot\n\n# api\n\n``` js\nvar createBGA = require('create-bga-mesh')\n"
   },
   {
    "description": "# install\n\n",
    "snippet": "npm install create-bga-mesh\n"
   }
  ]
 },
 {
  "package": "css-deps",
  "snippets": []
 },
 {
  "package": "css-webpack-test",
  "snippets": [
   {
    "description": "\n",
    "snippet": "npm i css-webpack-test\nimport 'css-webpack-test/lib/libs.css'\nimport css-webpack from 'css-webpack-test'\n"
   }
  ]
 },
 {
  "package": "cssprefix",
  "snippets": [
   {
    "description": "### `CSSPrefix.getName`\n\n",
    "snippet": "prefixedName = CSSPrefix.getName(name)\n"
   },
   {
    "description": "\nReturn a vendor-prefixed name of CSS property, or an original name that doesn't require vendor-prefix. If nothing was found, return an `undefined`.\n\nFor example:\n\n",
    "snippet": "prefixedName = CSSPrefix.getName('text-emphasis'); // 'textEmphasis' also is accepted\nconsole.log(prefixedName);\n// -> \"webkitTextEmphasis\" on Chrome\n// -> \"textEmphasis\" on Firefox\n\nprefixedName = CSSPrefix.getName('column-count'); // 'columnCount' also is accepted\nconsole.log(prefixedName);\n// -> \"columnCount\" on Chrome\n// -> \"MozColumnCount\" on Firefox\n"
   },
   {
    "description": "### `CSSPrefix.getValue`\n\n",
    "snippet": "prefixedValue = CSSPrefix.getValue(name, value)\n"
   },
   {
    "description": "\nReturn a vendor-prefixed value of CSS property, or an original value that doesn't require vendor-prefix. If `value` is an Array that includes multiple values, try it with each value until any one of them is found. If nothing was found, return an `undefined`.  \n`name` can be an original name even if it requires vendor-prefix.\n\nFor example:\n\n",
    "snippet": "prefixedValue = CSSPrefix.getValue('cursor', 'grab');\nconsole.log(prefixedValue);\n// -> \"-webkit-grab\" on Chrome\n// -> \"grab\" on Firefox\n\nprefixedValue = CSSPrefix.getValue('display', ['inline-grid', 'block']);\nconsole.log(prefixedValue);\n// -> \"block\" on Chrome\n// -> \"-moz-inline-grid\" on Firefox\n"
   },
   {
    "description": "## Differences from jQuery\n\njQuery also can find the vendor-prefixed name. But it can't find the vendor-prefixed **value**. And your code can't get the vendor-prefixed name that jQuery found.  \nAnd jQuery doesn't have cache. That affects performance.\n\n![sample](benchmark.png)\n\n*This is older version.*\n\nReported by [Benchmark.js](http://benchmarkjs.com/).  \nTest Code:\n\n",
    "snippet": "var elmJq = $('#elm4jquery'),\n  elmCp = document.getElementById('elm4cssprefix');\n\n// jQuery name\nfunction jqName() {\n  elmJq.css('column-width', '5px');\n  elmJq.css('column-width', '10px');\n}\n\n// CSSPrefix name\nfunction cpName() {\n  elmCp.style[CSSPrefix.getName('column-width')] = '5px';\n  elmCp.style[CSSPrefix.getName('column-width')] = '10px';\n}\n\n// jQuery value\nfunction jqValue() {\n  // jQuery can't find vendor-prefixed value.\n  elmJq.css('cursor', 'grab,-webkit-grab');\n  elmJq.css('cursor', 'grabbing,-webkit-grabbing');\n}\n\n// CSSPrefix value\nfunction cpValue() {\n  elmCp.style[CSSPrefix.getName('cursor')] = CSSPrefix.getValue('cursor', 'grab');\n  elmCp.style[CSSPrefix.getName('cursor')] = CSSPrefix.getValue('cursor', 'grabbing');\n}\n"
   }
  ]
 },
 {
  "package": "cycle-native-android-local-notification",
  "snippets": [
   {
    "description": "\n**A Cycle.js Driver for creating Android notifications in React Native using [react-native-android-local-notification](https://github.com/staltz/react-native-android-local-notification)**\n\n",
    "snippet": "npm install cycle-native-android-local-notification\n"
   },
   {
    "description": "#### Create command\n\n",
    "snippet": "{\n  type?: 'create',\n\n  // Basics\n  id?: number,\n  subject?: string,\n  message: string,\n  action?: string,\n  payload?: any,\n\n  // Scheduling\n  delay?: number,\n  sendAt?: Date,\n  repeatEvery?: string | number,\n  repeatCount?: number,\n  endAt?: Date,\n\n  // Customization\n  priority?: -2 | -1 | 0 | 1 | 2,\n  smallIcon?: string,\n  sound?: string,\n  vibrate?: string | null,\n  lights?: string | null,\n  autoClear?: boolean,\n  onlyAlertOnce?: boolean,\n  tickerText?: string,\n  when?: Date,\n  bigText?: string,\n  bigStyleImageBase64?: string,\n  bigStyleUrlImgage?: string,\n  subText?: string,\n  progress?: number,\n  color?: string,\n  number?: number,\n  category?:\n    | 'alarm'\n    | 'call'\n    | 'email'\n    | 'event'\n    | 'progress'\n    | 'reminder'\n    | 'social',\n  localOnly?: boolean,\n}\n"
   },
   {
    "description": "#### Clear command\n\n",
    "snippet": "{\n  type: 'clear',\n  id: number,\n}\n"
   },
   {
    "description": "#### ClearAll command\n\n",
    "snippet": "{\n  type: 'clearAll',\n}\n"
   },
   {
    "description": "#### Delete command\n\n",
    "snippet": "{\n  type: 'delete',\n  id: number,\n}\n"
   },
   {
    "description": "#### DeleteAll command\n\n",
    "snippet": "{\n  type: 'deleteAll',\n}\n"
   }
  ]
 },
 {
  "package": "ddm-tabs",
  "snippets": [
   {
    "description": "## Simple Example\n\n",
    "snippet": "ReactDom.render(\n  <Tabs>\n    <Tab title=\"Frogs\">\n      <p>Frogs live in ponds.</p>\n    </Tab>\n    <Tab title=\"Sea Turtles\">\n      <p>Sea turtles live in seas.</p>\n    </Tab>\n  </Tabs>,\n  document.getElementById('idOfTargetElement')\n);\n"
   },
   {
    "description": "## Programmaticlly Change The Active Tab Based On State/Props\n\nProgrammaticlly changing the active tab currently only works for the `<Tabs>` component and **NOT** the `<TabsResponsive>` component.\n\n",
    "snippet": "var ProgrammaticallyChangedActiveTab = React.createClass({\n\n  getInitialState: function() {\n    return {\n      activeId: 'frogs'\n    }\n  },\n\n  _handleButton: function(type, e) {\n    e.preventDefault();\n    this.setState({ activeId: type });\n  },\n\n  render: function() {\n    return (\n      <div>\n        <button onClick={this._handleButton.bind(this, 'frogs')}>Frogs</button>\n        <button onClick={this._handleButton.bind(this, 'turtles')}>Turtles</button>\n        \n        <Tabs activeId={this.state.activeId}>\n          <Tab title=\"Frogs\" id=\"frogs\">\n            <p>Frogs live in ponds.</p>\n          </Tab>\n          <Tab title=\"Turtles\" id=\"turtles\">\n            <p>Sea turtles live in seas.</p>\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n\n});\n\nReactDOM.render(\n  <ProgrammaticallyChangedActiveTab />,\n  document.getElementById('idOfTargetElement')\n);\n"
   }
  ]
 },
 {
  "package": "decojs",
  "snippets": []
 },
 {
  "package": "dependencies-online",
  "snippets": []
 },
 {
  "package": "deploy-class",
  "snippets": [
   {
    "description": "## Introducion\n\n",
    "snippet": "deploy-class is helps to use the Object-Oriented structure in node js.\nsupported structure is based package system like a Java.\nAlso, without using the import or export and module.exports.\nSimply helps implement a modular structure based on the class.\n"
   }
  ]
 },
 {
  "package": "deployd-token",
  "snippets": []
 },
 {
  "package": "detect-resize",
  "snippets": []
 },
 {
  "package": "digger-blueprints",
  "snippets": []
 },
 {
  "package": "discore-interface",
  "snippets": []
 },
 {
  "package": "doc-block-parser",
  "snippets": []
 },
 {
  "package": "document-ready",
  "snippets": [
   {
    "description": "## Install\n\n",
    "snippet": "$ npm install --save document-ready\n"
   },
   {
    "description": "## Usage\n\n",
    "snippet": "var ready = require('document-ready')\n\nready(function () {\n  //=> DOM is ready\n})\n"
   }
  ]
 },
 {
  "package": "dojo-app",
  "snippets": []
 },
 {
  "package": "dttx-wcs-test",
  "snippets": []
 },
 {
  "package": "e1js",
  "snippets": []
 },
 {
  "package": "easy-handlebars",
  "snippets": []
 },
 {
  "package": "egg-http-sig",
  "snippets": []
 },
 {
  "package": "email-extractor",
  "snippets": []
 },
 {
  "package": "ember-autosave",
  "snippets": [
   {
    "description": "## Installation\n\n",
    "snippet": "ember install ember-autosave\n"
   }
  ]
 },
 {
  "package": "ember-helpers-render-component",
  "snippets": []
 },
 {
  "package": "emoji-black-joker",
  "snippets": []
 },
 {
  "package": "emp-chromecast-receiver-2-dev",
  "snippets": []
 },
 {
  "package": "emservice",
  "snippets": [
   {
    "description": "## 安装\n\n",
    "snippet": "$ yarn add emservice\n"
   }
  ]
 },
 {
  "package": "entepe",
  "snippets": []
 },
 {
  "package": "errrr",
  "snippets": [
   {
    "description": "### Example\n",
    "snippet": "const Errrr = require('errrr');\nconst err = new Errrr('Boooooooom!');\nthrow err;\n"
   }
  ]
 },
 {
  "package": "es6-prototype-proj",
  "snippets": []
 },
 {
  "package": "eslint-config-ais",
  "snippets": [
   {
    "description": "\n- `eslint src/` 对src目录下的文件执行eslint，可以使用`--quiet`参数只输出error不输出warn\n- `eslint --fix src/` 对src目录下的文件可修复的lint错误进行修复，可修复的属性见 [这里](http://eslint.org/docs/rules/)，后面有小扳手的都是修复的属性。注意：修复缩进时可能会有问题（如空格、tab混用时），所以建议每次使用`--fix`命令后`diff`一下文件确认是否有问题。\n- `eslint -f html src/ > eslint-result.html` 对src目录下的文件执行eslint，并将结果格式化为html输出到当前目录的`eslint-result.html`，此命令可以查看项目整体的eslint报错情况，线上也将使用此命令进行扫描\n- 注意：eslint命令默认只处理后缀为`.js`的文件，其他后缀的文件需要用命令行的[--ext](http://eslint.org/docs/user-guide/command-line-interface#ext)参数指定，目前不支持在配置文件中设置扩展名，只能在命令行中使用`--ext`参数指定，比如对于使用`.jsx`做后缀的项目上面三条命令要变为：\n",
    "snippet": "eslint --ext .jsx,.js src/\neslint --fix --ext .jsx,.js src/\neslint -f html --ext .jsx,.js src/ > eslint-result.html\n"
   }
  ]
 },
 {
  "package": "etherspy-lib",
  "snippets": [
   {
    "description": "\nThis library is module for https://etherspy.io website.\n\nSee example below or demo project: https://gitlab.com/etherspy-public/etherspy-react-example\n\n",
    "snippet": "import EtherSpy from 'etherspy-lib';\n\nconst initES = async () => {\n  const es = new EtherSpy();\n  es.valueTransferUpdate(data => console.log('1) valueTransferUpdate', data));\n  es.tokenTransferUpdate(data => console.log('2) tokenTransferUpdate', data));\n  const socketId = await es.connect();\n  console.log('Connected to ES node!', socketId);\n\n  // Bitance wallet\n  es.subscribeValueTransfer('0xD551234Ae421e3BCBA99A0Da6d736074f22192FF', 'FromTo');\n\n  // TRX Token\n  es.subscribeTokenTransfer('0xf230b790E05390FC8295F4d3F60332c93BEd42e2', {from: '*', to: '*'});\n\n  setTimeout(() => {\n    // Bitance wallet\n    es.unSubscribeValueTransfer('0xD551234Ae421e3BCBA99A0Da6d736074f22192FF');\n\n    // TRX Token\n    es.unSubscribeTokenTransfer('0xf230b790E05390FC8295F4d3F60332c93BEd42e2');\n  }, 10 * 1000);\n}\n\n// and\n\ninitES();\n\n"
   }
  ]
 },
 {
  "package": "exiftool%2Eexe",
  "snippets": [
   {
    "description": "## Usage\nThe module exports a path to the exiftool Windows executable.\n\n",
    "snippet": "const exec = require('child_process').execFile;\nconst exiftool = require('exiftool.exe');\n\nexecFile(exiftool, ['-j', 'image.jpg'], (error, stdout, stderr) => {\n\tif (error) {\n\t\tconsole.error(`exec error: ${error}`);\n\t\treturn;\n\t}\n\tconsole.log(`stdout: ${stdout}`);\n\tconsole.log(`stderr: ${stderr}`);\n});\n"
   }
  ]
 },
 {
  "package": "expo-postpublish-notify",
  "snippets": []
 },
 {
  "package": "express-middelware",
  "snippets": [
   {
    "description": "## Diet.JS Compatible\n\n\n\n\nUsage Example with Diet.JS\n",
    "snippet": "var server = require('diet')\nvar app = server()\napp.listen('http://localhost:8086/')     // Listen on Localhost\n\n// express.js\n/* Example express app demonstrating internatl express routing inside the app \nvar app = express();\napp.use(function (req,res,next) {\n    console.log('Nice', typeof req, typeof res, typeof next)\n    res.values = 'Express'\n    next()\n})\n\napp.use(function (req,res,next) {\n    console.log('Nice2', typeof req, typeof res, typeof next)\n    // res.end(res.values)\n    next()\n    \n})\n*/\n\n// Require the DIREKTSPEED Servers express-middelware module \n// as dssrv is based on Diet.JS and configure it\nvar myExpressApp = require('express-middelware')(require('./express.js'))\n\n// You can Modify your express app and access it \nmyExpressApp.eapp.use(function(req,res,next) {\n\tres.end('Something')\n})\n\n// useExpressApp adds the $.eapp to your signal then you can use it\n// useExpressApp uses directly the express app or middelware and then returns processing to Diet.JS or DIREKTSPEED Server\n\napp.get('/', myExpressApp.attach, function($){\n    $.eapp()\n}, myExpressApp.use\n, function($){\n    $.end('Diet.JS + ' + $.response.values) // -> Diet.JS + Express\n})\n\n"
   }
  ]
 },
 {
  "package": "express-request-mapping",
  "snippets": [
   {
    "description": "#### Installation\n",
    "snippet": "$ npm install express-simple-cdn\n"
   },
   {
    "description": "#### Use\n",
    "snippet": "var express = require('express');\nvar app = express();\n\nrequire('requestmapping')(app);\n\n\n// controllers\nexports.dashboard = function(req, res) {\n    /**\n     * @get:/dashboard/home\n     */\n    \n    res.json({message:'Hello World...'});\n}\n\n"
   },
   {
    "description": "### Try it\n",
    "snippet": "$ node test\n"
   }
  ]
 },
 {
  "package": "fastify-docs-db",
  "snippets": [
   {
    "description": "## Install\n\n",
    "snippet": "$ npm install fastify-docs-db\n"
   },
   {
    "description": "## Usage\n\n",
    "snippet": "const srv = require(\"fastify-docs-db\")\n"
   }
  ]
 },
 {
  "package": "fes-scripts",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "const fesScripts = require('fes-scripts');\n\n// TODO: DEMONSTRATE API..\n"
   }
  ]
 },
 {
  "package": "ffocus",
  "snippets": []
 },
 {
  "package": "fit-parser",
  "snippets": [
   {
    "description": "## Usage Example\n\nGiven a set of workouts either in UWH Swim format:\n\n",
    "snippet": "4x100 HUHO @ 1:30\n1000 Kick @ 12:00\n2:00 Rest\n20:00 Swim\n"
   },
   {
    "description": "\nor [FitNotes](https://play.google.com/store/apps/details?id=com.github.jamesgay.fitnotes&hl=en) format:\n\n",
    "snippet": "** Flat Barbell Bench Press **\n- 95.0 lbs x 10 reps\n- 135.0 lbs x 10 reps\n- 135.0 lbs x 10 reps\n- 145.0 lbs x 10 reps\n- 155.0 lbs x 6 reps\n- 155.0 lbs x 5 reps\n\n** Decline cable flies **\n- 30.0 lbs x 10 reps\n- 35.0 lbs x 10 reps\n- 40.0 lbs x 10 reps\n\n** Rope Beaters **\n- 00:30\n- 00:30\n"
   }
  ]
 },
 {
  "package": "fizzbuzz-training",
  "snippets": []
 },
 {
  "package": "framework-helper",
  "snippets": []
 },
 {
  "package": "freevernote",
  "snippets": []
 },
 {
  "package": "frontman",
  "snippets": []
 },
 {
  "package": "fullpage-vue",
  "snippets": [
   {
    "description": "## Installation\n",
    "snippet": "npm install fullpage-vue --save\n"
   },
   {
    "description": "If you want use animate instruction, please install animate.css\n",
    "snippet": "npm install animate.css --save\n"
   },
   {
    "description": "",
    "snippet": "    showPage:function(){\n      this.pageNum ++;\n      this.$refs.fullpage.$fullpage.$update();\n    }\n"
   },
   {
    "description": "#### main.js\nImport the plugin of css and js file in main.js\n\n",
    "snippet": "import 'animate.css'\nimport 'fullpage-vue/src/fullpage.css'\nimport VueFullpage from 'fullpage-vue'\nVue.use(VueFullpage)\n"
   },
   {
    "description": "\n**script**\n\n``fullpage-vue`` value please refer to [api document](https://github.com/river-lee/vue-fullpage#options)\n",
    "snippet": "export default {\n  data() {\n    return {\n      opts: {\n        start: 0,\n        dir: 'v',\n        duration: 500,\n        beforeChange: function (currentSlideEl,currenIndex,nextIndex) {\n        },\n        afterChange: function (currentSlideEl,currenIndex) {\n        }\n      }\n    }\n  },\n  methods:{\n    moveNext(){\n      this.$refs.example.$fullpage.moveNext(); //Move to the next page\n    }\n  }\n}\n"
   },
   {
    "description": "\n**style**\n\nSet the ``page-container`` container's width and height what do you want, and the ``v-fullpage`` command will adapt the width and height of the parent element.\nThe following settings allow the scrolling page to fill the full screen.\n",
    "snippet": "<style>\n.fullpage-container {\n  position: absolute;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>\n"
   }
  ]
 },
 {
  "package": "gatsby-remark-embed-github-wiki",
  "snippets": []
 },
 {
  "package": "generator-component",
  "snippets": []
 },
 {
  "package": "generator-metal-ssg",
  "snippets": [
   {
    "description": "## Dependencies\n\nInstall [Node](https://nodejs.org/en/) if you haven't yet, then run this command\nto install global `npm` dependencies.\n\n",
    "snippet": "npm i -g gulp yo\n"
   },
   {
    "description": "## Install\n\n",
    "snippet": "npm i -g generator-metal-ssg\n"
   },
   {
    "description": "## Run\n\n",
    "snippet": "yo metal-ssg\n"
   }
  ]
 },
 {
  "package": "generator-ssfe",
  "snippets": []
 },
 {
  "package": "generator-zumata-npm",
  "snippets": []
 },
 {
  "package": "gh-sauce",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "  Usage: gh-sauce [options] <file ...>\n\n  Options:\n\n    -h, --help             output usage information\n    -V, --version          output the version number\n    -s, --safe             Safe mode, doesn't overwrite existing urls\n    -r, --repo <repo URL>  Provide default repo URL for issues\n"
   },
   {
    "description": "## API\n\n",
    "snippet": "var sauce = require('gh-sauce')\n\nvar filename = 'CHANGELOG.md'\n\nvar sauceConfig = {\n  // defaults to false\n  safe: true\n  // defaults to local package.json's homepage field\n  repo: 'https://github.com/dasilvacontin/gh-sauce'\n}\n\nfs.readFile(filename, function (err, data) {\n  var dressed = sauce.dress(data.toString(), sauceConfig)\n  fs.writeFile(filename, dressed)\n})\n"
   }
  ]
 },
 {
  "package": "gl-webgl-context",
  "snippets": []
 },
 {
  "package": "gm-buffer",
  "snippets": []
 },
 {
  "package": "good-boye",
  "snippets": []
 },
 {
  "package": "google-fonts-complete",
  "snippets": [
   {
    "description": "## Usage\n\n``` js\nvar fonts = require('google-fonts-complete');\n\nconsole.dir(fonts);\n",
    "snippet": "\nyields\n\n``` json\n{\n    \"ABeeZee\": {\n        \"category\": \"sans-serif\",\n        \"lastModified\": \"2015-04-06\",\n        \"version\": \"v4\",\n        \"variants\": {\n            ...\n        }\n    },\n    ...\n}\n"
   }
  ]
 },
 {
  "package": "gpm-playlister",
  "snippets": [
   {
    "description": "A command line Node.js tool that generates a [Google Play Music](https://play.google.com/music) playlist from a [BBC Playlister](http://www.bbc.co.uk/music/playlists) url.\n",
    "snippet": "gpm-playlister generate http://www.bbc.co.uk/playlist/zzzzwj\ngpm-playlister generate -s radioscotland\n"
   },
   {
    "description": "## Installation\n",
    "snippet": "npm install -g gpm-playlister\n"
   },
   {
    "description": "## Usage\n",
    "snippet": "gpm-playlister --help\n\n  Usage: gpm-playlister command [options] <argument...>\n\n  Commands:\n    generate [options] <url|station_name>  Generate a playlist\n    login <google_username> <password>     login to google music\n\n  Command help:\n    gpm-playlister login -h\n    gpm-playlister generate -h\n"
   },
   {
    "description": "## Login\nFirst you must authorise *GPM-Playlister* to access your Google Play Music account.\n",
    "snippet": "gpm-playlister login --help\n\n  Usage: login <google_username> <password>\n\n  Example:\n    gpm-playlister login example@gmail.com password123\n"
   },
   {
    "description": "## Generate\n*Requires authorisation. See: [Login](#login)*\n",
    "snippet": "gpm-playlister generate --help\n\n  Usage: generate [options] (<url> | <station_name>)\n\n  Options:\n    -s, --station  Station mode: Required when using station name instead of url\n    -g, --guided   Guided mode: ask for help when finding matching search results\n    -r, --replace  Replace mode: Replace existing GPM playlist\n\n  Examples:\n    gpm-playlister generate -s radio1\n    gpm-playlister generate -s -r -g radio1\n    gpm-playlister generate http://www.bbc.co.uk/playlist/zzzzwj\n    gpm-playlister generate -r -g http://www.bbc.co.uk/playlist/zzzzwj\n"
   },
   {
    "description": "### -g --guided Guided mode\nThis will ask for user help to match songs from results if no exact matches are found.\n",
    "snippet": "gpm-playlister generate -g http://www.bbc.co.uk/music/playlists/zzzzwj\n"
   },
   {
    "description": "### -s --station Station mode\n*GPM-Playlister* can also generate playlists from the preset stations available in the [config/stations.json](config/stations.json). These are BBC radio playlists that are updated weekly. The following would generate a playlist from the [BBC Radio 1 playlist](http://www.bbc.co.uk/radio1/playlist).\n",
    "snippet": "gpm-playlister generate -s radio1\n"
   },
   {
    "description": "### -r --replace Replace mode\nWill replace an existing GPM playlist if one is found with the same name. If there isn't a match, a new playlist will be generated.\n",
    "snippet": "gpm-playlister generate -r http://www.bbc.co.uk/music/playlists/zzzzwj\ngpm-playlister generate -r -s radio1\n"
   },
   {
    "description": "### Multiple options\nShort flags may be passed as a single arg, for example `-srg` is equivalent to `-s -r -g`.\n",
    "snippet": "gpm-playlister generate -srg radio1\n"
   }
  ]
 },
 {
  "package": "grand-central-express",
  "snippets": []
 },
 {
  "package": "graphql-perf",
  "snippets": []
 },
 {
  "package": "grunt-suitcss",
  "snippets": [
   {
    "description": "\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n",
    "snippet": "grunt.loadNpmTasks('grunt-suitcss');\n"
   },
   {
    "description": "### Overview\nIn your project's Gruntfile, add a section named `suitcss` to the data object passed into `grunt.initConfig()`.\n\n",
    "snippet": "grunt.initConfig({\n  suitcss: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n"
   },
   {
    "description": "#### Building components with import\n\nThe SUIT preprocesser makes use of [rework-npm](https://github.com/reworkcss/rework-npm) to allow importing of dependencies from npm or local folders. Pass the task a file with imports and they will be resolved.  This method is the favoured approach to building components.\n\n",
    "snippet": "grunt.initConfig({\n  suitcss: {\n    your_target: {\n      files: {\n        'dest/built.css': ['suit_components/main.css'],\n      }\n    }\n  }\n});\n"
   },
   {
    "description": "#### Building SUIT CSS components with component(1)\nIn this example, the default options are used to build a SUIT CSS component. The source file **must** be a `component.json` file for the task to know it has to fetch dependencies and build them. Each component is passed through the conformance checker and the resulting file is then passed through the SUIT CSS preprocessor.\n\n",
    "snippet": "grunt.initConfig({\n  suitcss: {\n    your_target: {\n      files: {\n        'dest/built.css': 'path/to/component.json',\n      }\n    }\n  },\n});\n"
   },
   {
    "description": "#### Preprocessing normal CSS files\n\nIt's possible to use SUIT CSS components even if component(1) or rework-npm are not used, for example installing them from a different package manager like Bower. In this case passing the task one or more CSS files will mean they are checked for conformance individually and then preprocessed as a complete package. They are built in the order they are passed in.\n\n",
    "snippet": "grunt.initConfig({\n  suitcss: {\n    your_target: {\n      files: {\n        'dest/built.css': ['components/tweet.css', 'components/button.css'],\n      }\n    }\n  }\n});\n"
   }
  ]
 },
 {
  "package": "guard-js",
  "snippets": []
 },
 {
  "package": "guld-pass",
  "snippets": []
 },
 {
  "package": "gulp-email-builder-min",
  "snippets": []
 },
 {
  "package": "gulp-image2base64",
  "snippets": []
 },
 {
  "package": "gulp-minify-fork",
  "snippets": []
 },
 {
  "package": "h54s",
  "snippets": [
   {
    "description": "## Great. How do I get started?\n\nClone this repository to somewhere local:\n\n",
    "snippet": "git clone https://github.com/Boemska/h54s\n"
   },
   {
    "description": "## JavaScript API Reference\n\nCreating an instance of the adapter:\n\n",
    "snippet": "var adapter = new h54s(config);\n"
   },
   {
    "description": "\nConfig parameter is the configuration object. If you omit the config parameter, an adapter instance will be created with default configuration.\n\nThe default configuration looks like this:\n\n",
    "snippet": "{\n  url: '/SASStoredProcess/do',\n  debug: false,\n  loginUrl: '/SASLogon/Logon.do',\n  maxXhrRetries: 5,\n  retryAfterLogin: true\n  sasApp: 'Stored Process Web App 9.3',\n  ajaxTimeout: 30000,\n  isRemoteConfig: false,\n  metadataRoot: undefined\n}\n"
   },
   {
    "description": "`url` is the URI of the SAS Stored Process Web Application (SPWA), as configured on your SAS server.\n\n`debug` sets or unsets the H54S debug mode by default.\n\n`loginUrl` is the URI of the SAS Logon Application, as configured on your SAS server.\n\n`maxXhrRetries` is the number of times the adapter will retry a request if it fails with a SAS program error or returns no data.\n\nPaused calls will be executed automatically after login if `retryAfterLogin` is set to true. If one request fails with `err.type = 'notLoggedinError'`, other calls will be paused, and subsequently executed (or not) based on the `retryAfterLogin` property.\n\n`sasApp` is the version of SAS - maps to _sasapp parameter returned on on SASLogon redirect\n\n`ajaxTimeout` is the duration, in seconds, that an adapter instance will wait for a call before considering it a failure.\n\n`isRemoteConfig` should be set to true if you want the adapter to use a config object specified in a file called `h54sConfig.json` at the root of your web application. Config properties in the constructor will override the remote properties. You can register functions which are automatically executed when a remote config is loaded using `adapter.onRemoteConfigUpdate(callbackFn)`\n\n`metadataRoot` is the root metadata directory where your SAS programs for this application reside. With this set, the _program parameter passed to SAS will be `metadataRoot + sasProgram` for all calls made by that adapter instance.\n\nIf your SAS instance is on another domain to the one you are developing on, you can provide the SAS `hostUrl`:\n",
    "snippet": "var adapter = new h54s({\n  hostUrl: 'http://www.example.com/'\n});\n"
   },
   {
    "description": "*Note that this is not allowed by the Same-Origin Policy of most browsers. This policy needs to be manually disabled in most modern browsers for testing and development purposes. Apart from IE which generally doesn't seem to care.*\n\nConfiguration objects can contain only the relevant config parameters and don't need to be complete:\n",
    "snippet": "var adapter = new h54s({\n  debug: true,\n  maxXhrRetries: 0, //don't retry if we get error or no data\n  ajaxTimeout: 0 //no ajax timeout\n});\n"
   },
   {
    "description": "### call(sasProgram, tablesObj, callback)\n\nCalls SAS program and returns data in a callback function. Example:\n",
    "snippet": "adapter.call('/BIP_Tree/test', tablesObj, function(err, res){\n  if(err) {\n    //Houston we have a problem\n  } else {\n    //res is an object returned from the server\n    console.log(res);\n  }\n});\n"
   },
   {
    "description": "### login(user, pass, callback)\nLog a user in to the SASLogon application. Example:\n\n",
    "snippet": "adapter.login('username', 'password', function(status) {\n  if(status === -1) {\n    //Wrong username or password\n  } else if(status === 200) {\n    //Success - user is logged in\n  } else {\n    //ajax call failed\n    //status is value of http request status code\n  }\n});\n"
   },
   {
    "description": "### logout(callback)\nExample:\n",
    "snippet": "adapter.logout(function(err) {\n  if(err !== undefined) {\n    //http request failed\n    //err is status code number\n  }\n})\n"
   },
   {
    "description": "### h54s.Tables(tableArray, macroName, parameterThreshold)\nCreates an object which stores Tables, which are then sent back to SAS via the `call` method.\n\n",
    "snippet": "var tables = new h54s.Tables([\n  {\n    someNumber: 42.0,\n    someString: 'Stuff'\n  }\n], 'data', 10000);\n"
   },
   {
    "description": "### h54s.Tables.prototype.add(tableArray, macroName)\nAdds additional tables to a Tables object:\n\n",
    "snippet": "var tables = new h54s.Tables([\n  { name: 'Allan', sex: 'M', weight: 101.1 },\n  { name: 'Abdul', sex: 'M', weight: 133.7 }\n], 'datain');\n\ntables.add([\n  {\n    someNumber: 42.0,\n    someString: 'Stuff'\n  }\n], 'moredata');\n"
   },
   {
    "description": "### getSasErrors()\nReturns an array of SAS program errors. Last 100 SAS errors are retained by the adapter.\n\nIt returns array of objects:\n",
    "snippet": "var errors = adapter.getSasErrors();\n"
   },
   {
    "description": "### getApplicationLogs()\n\nArray of log strings that kept by the Adapter. A 'log string' is added to this array by the adapter whenever the SAS macro variable of &logmessage. has been set, and therefore passed to the front end application log.\n",
    "snippet": "var appLogs = adapter.getApplicationLogs();\n"
   },
   {
    "description": "### getDebugData()\nWhen in debugging mode (`debug: true`), the adapter will save every response from the server.\n",
    "snippet": "var debugData = adapter.getDebugData();\n"
   },
   {
    "description": "### getFailedRequests()\nNote that failed requests array is populated only if debug mode is turned off (debug: false)\n\n",
    "snippet": "var failedRequests = adapter.getFailedRequests();\n"
   },
   {
    "description": "### setDebugMode()\nSet debugging mode - `debug:true`:\n",
    "snippet": "adapter.setDebugMode();\n"
   },
   {
    "description": "### unsetDebugMode()\nUnset  debugging mode - `debug:false`:\n",
    "snippet": "adapter.unsetDebugMode();\n"
   },
   {
    "description": "### clearApplicationLogs()\nClears the application logs array\n",
    "snippet": "adapter.clearApplicationLogs();\n"
   },
   {
    "description": "### clearDebugData()\nClears the debug data array\n",
    "snippet": "adapter.clearDebugData()\n"
   },
   {
    "description": "### clearSasErrors()\nClears the SAS errors array\n",
    "snippet": "adapter.clearSasErrors()\n"
   },
   {
    "description": "### clearFailedRequests()\nClears the failed requests array\n",
    "snippet": "adapter.clearFailedRequests()\n"
   },
   {
    "description": "### clearAllLogs()\nClears all log arrays\n",
    "snippet": "adapter.clearAllLogs()\n"
   },
   {
    "description": "\nThis is the same as:\n",
    "snippet": "adapter.clearApplicationLogs();\nadapter.clearDebugData();\nadapter.clearSasErrors();\nadapter.clearFailedRequests();\n"
   }
  ]
 },
 {
  "package": "hekla-plugin-csv-reporter",
  "snippets": [
   {
    "description": "\nThen add it to your `hekla.config.js` file, with configuration:\n\n",
    "snippet": "const CSVReporterPlugin = require('hekla-plugin-csv-reporter');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new CSVReporterPlugin({\n      destination: '/path/to/output.csv',\n      headers: [\n        'file',\n        'myProperty',\n        'myOtherProperty'\n      ],\n      moduleToRows: (module) => ([\n        [\n          module.name,\n          module.myProperty,\n          module.myOtherProperty\n        ]\n      ])\n    })\n  ]\n};\n"
   },
   {
    "description": "\nYou could create a row for each item in the module, with a `hekla.config.js` configuration like this:\n\n",
    "snippet": "const CSVReporterPlugin = require('hekla-plugin-csv-reporter');\n\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new CSVReporterPlugin({\n      destination: '/path/to/output.csv',\n      headers: [\n        'file',\n        'nativeElement'\n      ],\n      moduleToRows: (module) =>\n        module.nativeElements\n          .map(nativeElement => ([module.name, nativeElement]))\n    })\n  ]\n};\n"
   }
  ]
 },
 {
  "package": "hello-npm-jacobhsu",
  "snippets": []
 },
 {
  "package": "homebridge-mqttthing",
  "snippets": []
 },
 {
  "package": "hrm-web",
  "snippets": []
 },
 {
  "package": "html-dist",
  "snippets": [
   {
    "description": "# html-dist\n\nEasily manipulate HTML files by removing and inserting elements.\n\n__VERY WIP! Until V1.0.0 you should expect breaking changes in minor versions. EG: 0.2 -> 0.3 may include breaking changes__\n\n",
    "snippet": "npm install --save-dev html-dist@0.3.1\n"
   },
   {
    "description": "\nNote that the configuration file __is not parsed with Babel__. You may use whatever set of ES features your Node version supports.\n\n3. Run `html-dist`:\n\n",
    "snippet": "html-dist --config html-dist.config-js --input index.html\n"
   },
   {
    "description": "### Appends and Prepends\n\nThe recommended way to use html-dist that should satisfy most use cases is through the keys `appends`, `prepends` and `remove`:\n\n- `remove: 'cssSelector'` removes any elements that match the given selector.\n- `prepends: [...]` prepend the given elements.\n- `appends: [...]` append the given elements.\n\nFor example, given:\n\n",
    "snippet": "head: {\n  remove: 'script'\n  prepends: [\n    script({ src: 'bundle.js' })\n  ],\n  appends: [\n    script({ src: 'other-bundle.js' })\n  ]\n}\n"
   },
   {
    "description": "### Full control with `tree`\n\nIf you'd like full control over the manipulations, you should define the `tree` function:\n\n",
    "snippet": "head: {\n  tree: function(head) {\n    // manipulate head here\n  }\n}\n"
   },
   {
    "description": "## Manipulating Trees\n\nWhen you define a `tree` function in a manipulation object that function will be given an instance of `TreeManipulator`, which allows you to manipulate the tree as you like:\n\n",
    "snippet": "head: {\n  tree: function(head) {\n    // head is an instance of `TreeManipulator`\n  }\n}\n"
   },
   {
    "description": "\nThe following methods are available:\n\n- `remove(cssSelector)` removes all elements that match the given CSS selector. For example: `head.remove('script')`.\n- `append(node)` appends the new node as a child element. For example: `head.append(script({ src: 'test.js' }))`.\n- `prepend(node)` same as append, but prepends rather than appends.\n- `replaceWith(childrenArray)` replace the entire contents of the node with the new ones. For example:\n\n",
    "snippet": "head: {\n  tree: function(head) {\n    return head.replaceWith([\n      script({ src: 'test.js' }),\n      googleAnalytics('UA-1234-1')\n    ]);\n  }\n}\n"
   },
   {
    "description": "\nThat would replace the contents of your `<head>` with a script tag and the Google Analytics snippet.\n\nAdditionally, `remove`, `append` and `prepend` are chainable:\n\n",
    "snippet": "head.remove('script').append(...).prepend(...);\n"
   },
   {
    "description": "### `fromHtml`\n\nYou can use the `fromHtml` helper from `html-dist/lib/html`:\n\n",
    "snippet": "var fromHtml = require('html-dist/html');\n\nfromHtml('<div>HELLO</div>');\n"
   },
   {
    "description": "## Passing extra information to html-dist\n\nSometimes you'll need to pass `html-dist` some extra information, such as the location of your JavaScript file, so `html-dist` can insert a `script` tag with the right `src` attribute.\n\nThe CLI lets you pass in any arbitrary arguments:\n\n",
    "snippet": "./html-dist --config my.config.js --input index.html --output dist/index.html --jsFile \"bundle-1234.js\"\n"
   },
   {
    "description": "\nIn `my.config.js`, I can import `args` and have access to them:\n\n",
    "snippet": "var { script, args } = require('html-dist');\n\nmodule.exports = {\n  outputFile: 'dist/index.html',\n  minify: true,\n  head: {\n    remove: 'script'\n  },\n  body: {\n    appends: [\n      script({\n        src: args.jsFile\n      })\n    ]\n  }\n}\n"
   }
  ]
 },
 {
  "package": "hubot-dropcam",
  "snippets": []
 },
 {
  "package": "hypertrack-sdk-react-native",
  "snippets": []
 },
 {
  "package": "i18n_app",
  "snippets": []
 },
 {
  "package": "iclean-web-components",
  "snippets": []
 },
 {
  "package": "imageresizer%2Eio",
  "snippets": [
   {
    "description": "## Install\n\n",
    "snippet": "$ npm install --save imageresizer.io\n"
   },
   {
    "description": "## Initializing\n\n",
    "snippet": "var imageresizerModule = require('imageresizer.io')\n\nimageresizerModule.init({\n    key : 'YOU_API_KEY'\n});\n"
   },
   {
    "description": "#### upload\n",
    "snippet": "//Puting one image to server, when getting the keyID, we are able to do processing\n\nvar url = 'http://www.w3schools.com/css/trolltunga.jpg'\n\nimageresizerModule.upload(url).then(function(result){\n    console.log(result);\n},function(err){\n    done(err);\n})\n\n"
   },
   {
    "description": "#### resizeById\n",
    "snippet": "//Puting one image to server, when getting the keyID, we are able to do processing\n\n// _id is responsed by request\n// w,h,q\n// or {f: 'png'}\nvar resizedUrl = imageresizerModule.resizeById(_id,{h:100});\n\n"
   },
   {
    "description": "#### resizeById\n",
    "snippet": "var url = 'http://www.w3schools.com/css/trolltunga.jpg'\n\nimageresizerModule.uploadAndResize(url,{w:1000}).then(function(result){\n    console.log(result);\n},function(err){\n    done(err);\n})\n\n"
   }
  ]
 },
 {
  "package": "immerutable",
  "snippets": []
 },
 {
  "package": "infy-pagination",
  "snippets": []
 },
 {
  "package": "intake-adc",
  "snippets": [
   {
    "description": "### Installation\nInstall (NodeJS) [https://nodejs.org].\n\nFor mac users using homebrew\n",
    "snippet": "$ brew install node\n"
   },
   {
    "description": "\nVerify installation\n",
    "snippet": "$ node -v\n$ npm -v\n"
   },
   {
    "description": "\nInstall this package\n",
    "snippet": "$ npm install -g intake-adc\n"
   },
   {
    "description": "### Running\nTo run the tool after global installation you just need to run the utility from the command line and following the prompots. By default it expects to see the input file in a `data/session.log` file from the directory in which you are running the command. However you can input a path to any file.\n",
    "snippet": "$ intake-adc\n"
   }
  ]
 },
 {
  "package": "integrator",
  "snippets": []
 },
 {
  "package": "isnumber",
  "snippets": [
   {
    "description": "========\n\n[![NPM](https://nodei.co/npm/isnumber.png)](https://nodei.co/npm/isnumber/)\n\n`isNumber` is a super tiny module that provides a test to see if a value is a finite number.\n\nBy super tiny, I mean like a single line -- however, I tend to use this somewhat frequently, so module it is!\n\n",
    "snippet": "var isNumber = require(\"isnumber\")\n\nisNumber(13) // true\nisNumber(\"1241.12\") // true\nisNumber(0xff) // true\n\nisNumber(Infinity) // false\nisNumber(\"cat\") // false\nisNumber({foo: \"bar\"}) // false\n"
   }
  ]
 },
 {
  "package": "ivandack-coap-cli",
  "snippets": [
   {
    "description": "## Usando Node.js\nPara instalar Node.js se recomienda usar [Node Version Manager](https://github.com/nvm-sh/nvm)\n\nTeniendo Node.js (8+) instalado en el sistema: \n\n",
    "snippet": "git clone git@github.com:ivandack/unlp-iot-p4.git coap-cli\ncd coap-cli\nnpm install --production\n"
   },
   {
    "description": "\nLas formas para ejecutar el cliente son:\n\n",
    "snippet": "node src/data-loader --help\nnode src/data-loader -t <host de InfluxDB> -d <database> -m <ip de la mota>\nnode src/data-loader -t localhost -d grupo_ivandack -m fd00::c30c:0:0:2\n"
   },
   {
    "description": "## Usando Docker\nTeniendo instalado Docker solo hay que ejecutar (No pude hacer funcionar esto en InstantContiki):\n\n",
    "snippet": "docker run --rm ivandack/coap-cli data-loader --help\ndocker run --rm ivandack/coap-cli data-loader -t <host de InfluxDB> -d <database> -m <ip de la mota>\n"
   },
   {
    "description": "\nPor ejemplo:\n\n",
    "snippet": "docker run --rm ivandack/coap-cli data-loader -t localhost -d grupo_ivandack -m fd00::c30c:0:0:2\n"
   }
  ]
 },
 {
  "package": "jargvy",
  "snippets": []
 },
 {
  "package": "jdreact-to-import",
  "snippets": []
 },
 {
  "package": "jenkins-info",
  "snippets": [
   {
    "description": "===========\nThis script helps to Diff Build History of Jenkins jobs. It is especially helpful during Release when different versions of apps are getting constantly installed. You can take the first and last build job number: The script will merge all changes made over that build range and dispay the latest versions installed.\n\n\nInstall Instructions\n====================\n\n* Download and install Node.JS: http://www.nodejs.org/download/\n* Open up a terminal/command line window\n* Run the following command:\n",
    "snippet": "sudo npm install -g jenkins-info\n"
   },
   {
    "description": "\n* Once that's done, you will now be able to open up a terminal and from any location run:\n\n",
    "snippet": "jenkinsinfo\n"
   }
  ]
 },
 {
  "package": "jhashcode",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "const hasher = require(\"java-hashcode\");\nconst hashCode = hasher.hasCode(\"inputString\");\n"
   }
  ]
 },
 {
  "package": "jrapper",
  "snippets": [
   {
    "description": "\n`jrapper` can detect `Japanese rhyme` in text. `jrapper` analyzes morphemes then detect phrases and detect rhyming words.\n\nexample:\n\n",
    "snippet": "'今日はとても良い天気ですね。こんな日は自然に元気になります。'\n\n'今日はとても良い天気' 'こんな日は自然に元気'\n"
   },
   {
    "description": "\n",
    "snippet": "const jrapper = require('jrapper')\n\njrapper.build().then((tokenizer) => {\n  const rhymes = jrapper.measure(\n    jrapper.parse(tokenizer, '後始末するアノニマス')\n  );\n  console.log(rhymes)\n  // [ { w1:\n  //     { pos: '名詞',\n  //       surface_form: '後始末',\n  //       pronunciation: 'アトシマツ',\n  //       romaji: 'atosimatu',\n  //       rhymorpheme: 'a*o*i*a*u',\n  //       vowel: 'aoiau',\n  //       reversedRhymorpheme: 'u*a*i*o*a' },\n  //       w2:\n  //     { pos: '名詞',\n  //       surface_form: 'アノニマス',\n  //       pronunciation: undefined,\n  //       romaji: 'anonimasu',\n  //       rhymorpheme: 'a*o*i*a*u',\n  //       vowel: 'aoiau',\n  //       reversedRhymorpheme: 'u*a*i*o*a' },\n  //    vibes: 11 } ]\n})\n"
   },
   {
    "description": "# install\n\n",
    "snippet": "npm install jrapper\n"
   }
  ]
 },
 {
  "package": "jscolor",
  "snippets": [
   {
    "description": "\nSuper simple color manipulation using getters and setters\n\nInstall:\n",
    "snippet": "npm install --save jscolor\n"
   },
   {
    "description": "\nUsage:\n",
    "snippet": "import Color from 'jscolor'\n\nlet c = new Color('#483d8b')\n"
   },
   {
    "description": "\nRead color values without any extra work:\n",
    "snippet": "c.r           // => 72\nc.g           // => 61\nc.b           // => 139\nc.a           // => 1\nc.red         // => 72\nc.green       // => 61\nc.blue        // => 139\nc.alpha       // => 1\nc.rgb         // => 'rgb(72,61,139)'\nc.rgba        // => 'rgba(72,61,139,1)'\nc.h           // => 248\nc.s           // => 39\nc.l           // => 39\nc.hue         // => 248\nc.saturation  // => 39\nc.lightness   // => 39\nc.hsl         // => hsl(248,39%,39%)\nc.hsla        // => hsla(248,39%,39%,1)\nc.hex         // => '#483d8b'\nc.yiq         // => 73.181\nc.name        // => 'darkslateblue'\n"
   },
   {
    "description": "\nManipulate colors using normal operators:\n",
    "snippet": "c.r = 100\nc.rgb         // => 'rgb(100,61,139)'\nc.hex         // => '#643d8b'\n\nc.hue += 180\nc.rgb         // => 'rgb(129,139,61)'\nc.hex         // => '#648b3d'\n\nc.rgb = 'rgb(150,170,180)'\nc.hsl         // => 'hsl(200,17%,65%)'\nc.hex         // => '#96aab4'\n"
   }
  ]
 },
 {
  "package": "jsfile-odf",
  "snippets": []
 },
 {
  "package": "jssml",
  "snippets": []
 },
 {
  "package": "jthoober",
  "snippets": []
 },
 {
  "package": "just-mvc",
  "snippets": [
   {
    "description": "===============\nthis is a simple node.js mvc structure\n\n* Database\n* App structure\n* Router\n* Separate modules\n* ...\n\nSo hope this library help someone like me.\n\nAny ideas are appreciated.\n\n##Features\n\n* MVC\n* This library just help you to structure your code\n* No Express or ORM hack\n* Config Express and ORM by yourself (Fully control)\n\n##Dependencies\n\nBy default:\n\n* [Express](https://github.com/visionmedia/express) ^4.0.0\n* [ORM](https://github.com/dresende/node-orm2) ^2.1.5\n\nYou can specify those dependencies version by option, please refer to [this](#options)\n\n##Installation\n\n\tnpm install just-mvc --save\n\nDatabase package\n\n\tnpm install <your database package>\n\n    //example\n    npm install mysql\n\nRefer to ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\n\n##App structure\n\n\t/\n\t\tmodels/\t\t\t\t\t\t-- all of your models here\n\t\tcontrollers/\t\t\t\t-- all of your controllers here\n\t\tviews/\n\t\tconfig/\n\t\t\texpress.js\t\t\t\t-- your express config\n\t\t\torm.js\t\t\t\t\t-- your orm config\n\t\t\troutes.js\t\t\t\t-- router\n\t\t\tsettings.js\t\t\t\t-- app settings (ip, port, database, ...)\n\t\tapp.js\t\t\t\t\t\t-- root\n\nPlease check example\n\n##How to use\n\nPlease check example or follow these document\n\n###Init\n\n",
    "snippet": "require(just-mvc)(function(err){\n\tif(err) {\n\t\tconsole.log(err);\n\t\treturn;\n\t}\n\tconsole.log('done');\n});\n"
   },
   {
    "description": "\n###Models\n\nA model file should be like this\n\n",
    "snippet": "module.exports = function (orm, db) {\n    //define your orm model here\n};\n"
   },
   {
    "description": "\nExample:\n\n\tmodels/post.js\n\n",
    "snippet": "module.exports = function (orm, db) {\n\tvar Post = db.define('post', {\n\t\ttitle:      { type: 'text' },\n\t\tcontent:    { type: 'text' }\n    });\n};\n"
   },
   {
    "description": "\nCheck ORM document [Defining Models](https://github.com/dresende/node-orm2/wiki/Defining-Models)\n\n\n###Controllers\n\nA controller file should be like this\n\n",
    "snippet": "module.exports = {\n    //define your controller here\n};\n"
   },
   {
    "description": "\nExample:\n\n\tcontrollers/post.js\n\n",
    "snippet": "module.exports = {\n\thome: function(req, res, next){\n\t\tres.send('home page');\n\t},\n    get: function(req, res, next) {\n        req.models.post.find(function(err, data) {\n            res.send(data);\n        });\n    },\n    create: function(req, res, next) {\n        req.models.post.create({\n            title: 'title',\n            content: 'content'\n        }, function(err, result) {\n            res.send(result);\n        });\n    }\n};\n"
   },
   {
    "description": "**Note:** you can list all of your models in req.models, check more [here](#notes)\n\n###Settings\n\n\tconfig/settings.js\n\nA settings file should be like this\n\n",
    "snippet": "module.exports = {\n    mode1: { //development\n        ip: <ip>,\n        port: <port>,\n        db: // orm database setting object\n    },\n    mode2: { //production\n        ip: <ip>,\n        port: <port>,\n        db: // orm database setting object\n    }\n};\n"
   },
   {
    "description": "\nExample:\n\n",
    "snippet": "module.exports = {\n    development: {\n        ip: '127.0.0.1',\n        port: 8080,\n        db: {\n            host: '127.0.0.1',\n            port: 3306,\n            protocol: 'mysql',\n            user: 'root',\n            password: '123456789',\n            database: 'just-mvc-test',\n            connectionLimit: 100\n        }\n    },\n    production: {\n        ip: '127.0.0.1',\n        port: 8080,\n        db: {\n            host: '127.0.0.1',\n            port: 3306,\n            protocol: 'mysql',\n            user: 'root',\n            password: '123456789',\n            database: 'just-mvcc-test',\n            connectionLimit: 100\n        }\n    }\n};\n"
   },
   {
    "description": "\n**Note**: You should set your NODE_ENV variable (development or production), or you can by pass by send directly the mode option when init, check [here](#options)\n\nCheck ORM document [Connecting to Database](https://github.com/dresende/node-orm2/wiki/Connecting-to-Database)\n\n###Express config\n\n\tconfig/express.js\n\nA express config file should be like this\n\n",
    "snippet": "module.exports = function(app, express) {\n    //any express config here\n};\n"
   },
   {
    "description": "\nExample:\n\n",
    "snippet": "module.exports = function(app, express) {\n    app.set('title', 'testing');\n    app.set('views', '../views');\n\tapp.set('view engine', 'ejs');\n    app.use(express.favicon());\n};\n"
   },
   {
    "description": "\nCheck Express document [api](http://expressjs.com/api.html)\n\n**Note**:\n\n* As you see there is no ```views``` folder in app structure, so create and manage by yourself\n* Library will start a server automatically, so no need this kind of this stuff\n\n",
    "snippet": "http.createServer(app).listen(function(){});\n"
   },
   {
    "description": "\n###ORM config\n\n\tconfig/orm.js\n\nA orm config file should be like this\n\n",
    "snippet": "module.exports = function(orm, db) {\n    //any orm config here\n};\n"
   },
   {
    "description": "\nExample:\n\n",
    "snippet": "module.exports = function(orm, db) {\n    db.settings.set('test', 'testing data');\n};\n"
   },
   {
    "description": "\nCheck ORM document [Settings](https://github.com/dresende/node-orm2/wiki/Settings)\n\n**Note**: Library will [sync database](https://github.com/dresende/node-orm2/wiki/Synching-and-Dropping-Models#wiki-synching) automatically.\n\n###Routes config\n\n\tconfig/routes.js\n\nA routes config file should be like this\n\n",
    "snippet": "module.exports = function(app, controllers) {\n\t//routes here\n};\n"
   },
   {
    "description": "\nExample:\n\n",
    "snippet": "module.exports = function(app, controllers) {\n    app.get(    '/'       , controllers.post.home);\n    app.get(    '/post'   , controllers.post.get);\n    app.post(   '/post'   , controllers.post.create);\n};\n"
   },
   {
    "description": "\n##Options\n\n",
    "snippet": "require(just-mvc)({\n\tmode: 'development',           //default: production\n\tpath: __dirname,               //default: auto detect\n    express: require('express'),   //specify your express version\n    orm: require('orm')            //specify your orm version\n}, callback);\n"
   },
   {
    "description": "\nExample:\n\n",
    "snippet": "var express = require('express')    // Express 4\nvar orm = require('orm')            // ORM 2.1.0\n\nrequire(just-mvc)({\n    mode: 'development',\n    path: '/Code/Project',\n    express: express,\n    orm: orm\n}, callback);\n"
   },
   {
    "description": "\n##Return object\n\n``express``\n\n``orm``\n\n``server`` web server instance\n\n``database`` orm database instance\n\n``app`` express app instance\n\n``settings`` the current settings\n\n``mode`` the current mode\n\n",
    "snippet": "require(just-mvc)(functiom(err, mvc) {\n    mvc.express;\n    mvc.orm;\n    mvc.server;\n    mvc.database;\n    mvc.app;\n    mvc.settings;\n    mvc.mode;\n});\n"
   },
   {
    "description": "\n##Notes\n\nFor your convenience, you can get\n\n* ``models``: all the orm models\n* ``settings``: the running setings\n* ``mode``: the running mode\n\n###from express req\n\n",
    "snippet": "function (req, res, next) {\n    req.models;\n    req.settings;\n    req.mode;\n}\n"
   },
   {
    "description": "\n###from express config file\n\n",
    "snippet": "//config/express.js\nmodule.exports = function(app, express, mvc) {\n    mvc.mode\n    mvc.settings\n};\n"
   },
   {
    "description": "\n###from orm config file\n",
    "snippet": "//config/orm.js\nmodule.exports = function(orm, db, mvc) {\n    mvc.mode\n    mvc.settings\n};\n"
   }
  ]
 },
 {
  "package": "karma-html-reporter",
  "snippets": [
   {
    "description": "## Configuration\n",
    "snippet": "// karma.conf.js\nmodule.exports = function(config) {\n  config.set({\n    reporters: ['progress', 'html'],\n\n    // the default configuration\n    htmlReporter: {\n      outputDir: 'karma_html', // where to put the reports \n      templatePath: null, // set if you moved jasmine_template.html\n      focusOnFailures: true, // reports show failures on start\n      namedFiles: false, // name files instead of creating sub-directories\n      pageTitle: null, // page title for reports; browser info by default\n      urlFriendlyName: false, // simply replaces spaces with _ for files/dirs\n      reportName: 'report-summary-filename', // report summary filename; browser info by default\n      \n      \n      // experimental\n      preserveDescribeNesting: false, // folded suites stay folded \n      foldAll: false, // reports start folded (only with preserveDescribeNesting)\n    },\n  });\n};\n"
   }
  ]
 },
 {
  "package": "kow",
  "snippets": []
 },
 {
  "package": "l4n-provider-l4d2",
  "snippets": []
 },
 {
  "package": "leaflet%2Elayergroup%2Ecollision-tooltip",
  "snippets": [
   {
    "description": "================================\n\nDisclaimer\n--------\n\nTHIS IS A FORK OF THE MAIN REPO TO ALLOW THE PLUGIN TO WORK WITH TOOLTIPS INSTEAD OF DIVICONS.  \nThe dependencies have been updated, and rbush is imported directly in the module.  Other than that\nthe code is largely unchanged.  However, use with care.\n\n\n--------\nProvides basic collision detection in order to declutter large or overlapping sets of Leaflet markers.\n\nDon't like READMEs? Then see http://mazemap.github.io/Leaflet.LayerGroup.Collision/demo/demo.html\n\n\nWhat?\n--------\n\nInspired by the ClusterMarker plugin, this plugin works by hiding any markers that overlap each other - only the marker which was first added to the LayerGroup will be shown.\n\n\n\nHow?\n--------\n\nCollision detection is done by using the dimensions of the DOM elements inside the `L.Marker`'s icon; this has been tested only using `display:block` elements. `L.Layer`s which are not markers will be always shown.\n\nThis plugin uses Vladimir Agafonkin's `rbush` library for the grunt work of detecting bounding box collisions.\n\nCaveats: this plugin expects markers to not change dynamically, to not be draggable, and marker deletion is not supported (yet). Currently everything is recalculated on zoom change. Only partial data caching is done - marker bounding boxes are cached; collisions per zoom level are recalculated.\n\n\nUsage\n-------------\n\nWorks as a normal Leaflet LayerGroup, just add your markers to it.\n\nWhen instantiating, can take the 'margin' option. This defines the margin between markers, in pixels, and defaults to zero.\n\n",
    "snippet": "var collisionLayer = L.layerGroup.collision({margin:5});\ncollisionLayer.addTo(map);\n\ncollisionLayer.add( L.marker( markeroptions ) );\n"
   }
  ]
 },
 {
  "package": "legao-screen-normal",
  "snippets": []
 },
 {
  "package": "leona%2Elworker",
  "snippets": []
 },
 {
  "package": "livefyre-stream-client",
  "snippets": []
 },
 {
  "package": "localcert",
  "snippets": []
 },
 {
  "package": "m-debug%2Ejs",
  "snippets": [
   {
    "description": "### 安装\n* npm（推荐）\n",
    "snippet": "npm install m-debug.js\n"
   },
   {
    "description": "* bower\n",
    "snippet": "bower install binnng/debug.js\n"
   },
   {
    "description": "\n* component\n",
    "snippet": "component install binnng/debug.js\n"
   }
  ]
 },
 {
  "package": "mailbots",
  "snippets": [
   {
    "description": "## onCommand\n\n",
    "snippet": "mailbot.onCommand(command, handlerFn)\n"
   },
   {
    "description": "## onTrigger\n\n",
    "snippet": "mailbot.onTrigger(command, handlerFn)\n"
   },
   {
    "description": "## onAction\n\n",
    "snippet": "mailbot.onAction(action, handlerFn)\n"
   },
   {
    "description": "## onTaskViewed\n\n",
    "snippet": "mailbot.onTaskViewed(command, handlerFn)\n"
   },
   {
    "description": "## onEvent\n\n",
    "snippet": "mailbot.onEvent(event, handlerFn)\n"
   },
   {
    "description": "## onSettingsViewed\n\n",
    "snippet": "mailbot.onSettingsViewed(handlerFn)\n"
   },
   {
    "description": "## onSettingsSubmit\n\n",
    "snippet": "mailbot.onSettingsSubmit(handlerFn)\n"
   },
   {
    "description": "## on\n\n",
    "snippet": "mailbot.on(webhookEvent, handlerFn)\n"
   }
  ]
 },
 {
  "package": "mapbox-gl-toggle-control",
  "snippets": [
   {
    "description": "## Example\n\n",
    "snippet": "var mapbox = require('mapbox-gl')\nvar ToggleControl = require('mapbox-gl-toggle-control')\n\nvar map = new mapboxgl.Map({\n  container: 'map', // container id\n  zoom: 5.5, // starting zoom\n  maxBounds: [-87, -9, -70, 6]\n})\n\nvar toggle = new ToggleControl(document.querySelector('#my-legend'))\nmap.addControl(toggle, 'top-left')\n"
   }
  ]
 },
 {
  "package": "markdown-it-color",
  "snippets": []
 },
 {
  "package": "math_sample_allan",
  "snippets": []
 },
 {
  "package": "md-links-marinaestefania",
  "snippets": []
 },
 {
  "package": "mdast-util-to-vdom",
  "snippets": []
 },
 {
  "package": "mesh-memory-ds7",
  "snippets": []
 },
 {
  "package": "metalsmith-pug",
  "snippets": [
   {
    "description": "## Usage\n\nI reccomend using an optimized build matching your Node.js environment version, otherwise, the standard `require` would work just fine.\n\n",
    "snippet": "/*\n * Node 6\n * Built using `babel-preset-es2015-node6`\n */\nconst pug = require('metalsmith-pug/lib/node6')\n\n/*\n * Node 5\n * Built using `babel-preset-es2015-node5`\n */\nconst pug = require('metalsmith-pug/lib/node5')\n\n/*\n * Node 4\n * Built using `babel-preset-es2015-node4`\n */\nconst pug = require('metalsmith-pug/lib/node4')\n\n/*\n * Node >=0.10 <=0.12\n * Built using `babel-preset-es2015`\n */\nvar pug = require('metalsmith-pug')\n"
   },
   {
    "description": "## API\n\nPass `options` to the pug plugin and pass it to Metalsmith with the `use` method:\n\n",
    "snippet": "import Metalsmith from 'metalsmith'\nimport pug from 'metalsmith-pug'\n\nconst options = {\n  pretty: false,\n  \n  locals: {\n    postName: 'good post name'\n  },\n\n  filters: {\n    foo: block => block.replace('foo', 'bar')\n  }\n}\n\nnew Metalsmith(__dirname)\n  .use(pug(options))\n"
   }
  ]
 },
 {
  "package": "micro-node-launcher",
  "snippets": [
   {
    "description": "### nodejs\n\n",
    "snippet": "// my_module.js\n\nmodule.exports = {\n    \n    foo: function(cb){...}\n           \n    value: 'value',\n    \n    deep: {\n    \n        bar: function(cb){...}\n    \n    }\n}\n\n"
   },
   {
    "description": "\n",
    "snippet": "// app.js\n\nvar launch = require('micro-node-launcher');\n\nlaunch('./my_module.js', 'rpc_queue', '127.0.0.1'); // listening on 127.0.0.1 for rpc calls\n\n"
   },
   {
    "description": "\nThis will launch an AMPQ server listening on `127.0.0.1` for `JSON-RPC 2.0` messages coming to the `rpc_queue` queue. \nFrom the shape of the module, the server can also proxy methods deeply in the object.\nThat means that a deep methods like `deep.bar` is accesible with an RPC request like this one:\n",
    "snippet": "{\n   \n  jsonrpc: '2.0',\n  method: 'deep.bar',\n  id: SOMEUNIQUEID\n}\n"
   },
   {
    "description": "## cli\n\nYou could also use our CLI to start the server after installing the `micro-node-launcher` locally or globally like this:\n\n",
    "snippet": "micro my_module.js rpc_queue 127.0.0.1\n\n"
   }
  ]
 },
 {
  "package": "mimelib",
  "snippets": []
 },
 {
  "package": "mimosa-coffeescript-preprocess",
  "snippets": []
 },
 {
  "package": "miniapp-create",
  "snippets": []
 },
 {
  "package": "mocha-zapi-reporter",
  "snippets": []
 },
 {
  "package": "module-graph-webpack-plugin",
  "snippets": [
   {
    "description": "# Installation #\n\n\n",
    "snippet": "#!bash\n\nnpm install --save-dev module-graph-webpack-plugin\n"
   },
   {
    "description": "# Usage #\n\nIn your webpack config file:\n\n",
    "snippet": "#!javascript\n\nconst ModuleGraphPlugin = require('module-graph-webpack-plugin');\n\nmodule.exports = {\n    plugins: [\n        new ModuleGraphPlugin({\n            filename: 'module-graph.graphml',\n            use_groups: true\n        })\n    ]\n};\n"
   }
  ]
 },
 {
  "package": "moira",
  "snippets": []
 },
 {
  "package": "mongogo",
  "snippets": [
   {
    "description": "### Example\n\n**Regular Mongoose:**\n",
    "snippet": "let mongoose = require('mongoose');\n\nlet schema = mongoose.Schema({\n  username:       { type: String, unique: true },\n  email:          { type: String, unique: true },\n  first_name:     { type: String, trim: true },\n  last_name:      { type: String, trim: true },\n  age:            { type: number, min: 18, max: 100 },\n  dob:            { type: Date, default: new Date(123467) },\n  created:        { type: Date, default: Date.now },\n  alive:          { type: Boolean, default: true },\n  best_friend:    { type: mongoose.Schema.Types.ObjectId, ref: 'person' },\n  favorite_thing: { type: mongoose.Schema.Type.ObjectId },\n  parents: {\n    father:       { type: mongoose.Schema.Types.ObjectId, ref: 'person' },\n    mother:       { type: mongoose.Schema.Types.ObjectId, ref: 'person' },\n  },\n  some_string:    String,\n  job_title:      { type: String, index: true, sparse: true }\n}, {\n  timestamps: true,\n  autoIndex: false,\n  strict:   'throw'\n});\n\nschema.index({ username: 1, email: 1, dob: -1 }, { unique: true });\nschema.index({ best_friend: 1, job_title: -1 }, { sparse: true });\n\nschema.pre('find', ...);\n\nmodule.exports = mongoose.model('person', schema);\n\n"
   },
   {
    "description": "\n**Mongogo:**\n\n",
    "snippet": "import { mongogo, field, index } from 'mongogo';\n\nlet schema = mongogo.Schema({\n  username:         'string,unique',\n  email:            'string,unique',\n  first_name:       'string,trim',\n  last_name:        'string,trim',\n  age:              'number,min:18,max:100',\n  dob:              'date,default:1234567',\n  created:          'now', // or the long way, 'date,default:now'\n  alive:            'boolean,default:true',\n  best_friend:      'ref:person,sparse',\n\n  favorite_thing:    'id',\n  parents: {\n    father:     field('ref:person,index'),\n    mother:     field('ref:person,index')\n  },\n\n  // Any non-string field value is passed to Mongoose as-is.\n  some_string:  String,\n  job_title:    { type: String, index: true, sparse: true }\n},\n  'timestamps,ai:false,throw'      // Options\n);\n\n// Index shorthand\nschema.index([\n  'username,+email,-dob,$unique',\n  'best_friend,-job_title,$sparse'\n]);\n\nschema.pre('find', ...);\n\nexport default mongogo.mongoose.model('person', schema);\n\n"
   },
   {
    "description": "\n**Mongogo Shorthand Model Syntax:**\n\n",
    "snippet": "\nimport { mongogo, field } from 'mongogo';\n\nmongogo.Model('MyModel', {\n  fields: {\n    username:           'string,unique',\n    email:              'string,unique',\n    first_name:         'string,trim',\n    last_name:          'string,trim',\n    age:                'number,min:18,max:100',\n    dob:                'date,default:1234567',\n    created:            'now',\n    alive:              'boolean,default:yes',\n    best_friend:        'ref:person,sparse',\n\n    favorite_thing:     'id',  \n    parents: {\n      father:           field('ref:person,index'),\n      mother:           field('ref:person,index')\n    },\n\n    some_string:        String,\n    job_title:          { type: String, index: true, sparse: true }\n  },\n\n  options: 'timestamps,ai:false,throw',\n\n  index: [\n    'username,+email,-dob,$unique', // shorthand\n    { fields: { best_friend: 1, job_title: -1 }, options: { sparse: true }} // JSON declaration, if needed  \n  ],\n\n  statics: {\n    findByUsername: function(username){\n      return this.findOne({ username: username }).exec();\n    }\n  },\n\n  methods: {\n    isAlive: function(){\n      return this.alive === true;\n    },\n    cakeDay: function(){\n      this.age++;\n    }\n  },\n\n  schema: function(schema){\n    schema.pre('find', ...)\n  }\n\n  connection: myMongoConnection // Optional - for use when you want to use your own connection, or `false` to return the generated schema without compiling model.\n});\n\n"
   },
   {
    "description": "#### Strings\nThe shorthand parser is very simple - if you need to specify string values, they too should be simple. You can use the `extras` parameter to specify more complex values.\n\n**Examples:**\n",
    "snippet": "field('default:monday');\noption('read:document');\nfield(`string,default:I am a string!,trim`);\nfield('string,trim', { default: \"I, am, Silliam, Whattner!\"});\n"
   },
   {
    "description": "## Exports\nThe `mongogo` object exports the following:\n\n",
    "snippet": "\nimport {\n  default,      // Self-reference, for `import mongogo from 'mongogo';`\n  mongogo,      // Self-reference, for import statements\n  mongoose,     // Reference to require('mongoose')\n\n  // Methods\n  Schema,       // Schema method\n  Model,        // Model method\n  field,        // field method\n  option,       // option method\n\n  // Keywords\n  fields,       // field keywords used by `field`\n  keywords,     // semver compatibility - references `fields`\n  options,      // options keywords used by `options`\n\n  // Convenience\n  ObjectId,     // Reference to mongoose ObjectId\n  Mixed,        // Reference to mongoose Mixed\n\n\n} from 'mongogo';\n\n"
   }
  ]
 },
 {
  "package": "mongoose-explain-checker",
  "snippets": []
 },
 {
  "package": "mongoose-utils",
  "snippets": []
 },
 {
  "package": "moysklad",
  "snippets": [
   {
    "description": "## Установка\n\n> Поддерживаются версии node.js >=8.10\n\n",
    "snippet": "$ npm install moysklad\n"
   },
   {
    "description": "\nдля работы библиотеки в node.js, дополнительно нужно установить полифил для\n[Fetch API](https://developer.mozilla.org/en/docs/Web/API/Fetch_API) или явно указать модуль с соответствующим интерфейсом при создании экземпляра библиотеки\n\n**Полифил:**\n\n",
    "snippet": "$ npm install isomorphic-fetch\n"
   },
   {
    "description": "\n",
    "snippet": "require('isomorphic-fetch') // polyfill\nconst Moysklad = require('moysklad')\n\nconst moysklad = Moysklad()\n"
   },
   {
    "description": "\n**Модуль:**\n\n",
    "snippet": "$ npm install node-fetch\n"
   },
   {
    "description": "\n",
    "snippet": "const nodeFetch = require('node-fetch')\nconst Moysklad = require('moysklad')\n\nconst moysklad = Moysklad({ fetch: nodeFetch })\n"
   },
   {
    "description": "## Использование\n\n",
    "snippet": "const Moysklad = require('moysklad')\n\n// Для инициализации экземпляра библиотеки указывать ключевое слово new не нужно\nconst ms = Moysklad({ login, password })\n\nms.GET('entity/customerorder', {\n  filter: {\n    applicable: true,\n    sum: { $gt: 1000000, $lt: 2000000 }\n  },\n  limit: 10,\n  order: 'moment,desc',\n  expand: 'agent'\n}).then(({ meta, rows }) => {\n  console.log(\n    `Последние ${meta.limit} из ${meta.size} проведенных заказов ` +\n      `на сумму от 10000 до 20000 руб`\n  )\n  rows.forEach(row => {\n    console.log(`${row.name} ${row.agent.name} ${row.sum / 100}`)\n  })\n})\n"
   },
   {
    "description": "## Параметры инициализации\n\nВсе параметры опциональные (имеют значения по умолчанию)\n\n| Параметр     | Значение по умолчанию              | Описание                                                                                                                                                                                    |\n| ------------ | ---------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| `fetch`      | глобальный fetch                   | Функция с интерфейсом [Fetch API](https://developer.mozilla.org/ru/docs/Web/API/Fetch_API). Если глобальный fetch не найден, то будет выброшена ошибка при попытке осуществить http запрос. |\n| `endpoint`   | `\"https://online.moysklad.ru/api\"` | Точка досупа к API                                                                                                                                                                          |\n| `api`        | `\"remap\"`                          | Раздел API                                                                                                                                                                                  |\n| `apiVersion` | `\"1.1\"`                            | Версия API                                                                                                                                                                                  |\n| `token`      | `undefined`                        | Токен доступа к API (см. [Аутентификация](#аутентификация))                                                                                                                                 |\n| `login`      | `undefined`                        | Логин для доступа к API (см. [Аутентификация](#аутентификация))                                                                                                                             |\n| `password`   | `undefined`                        | Пароль для доступа к API (см. [Аутентификация](#аутентификация))                                                                                                                            |\n| `emitter`    | `undefined`                        | экземляр [EventEmitter](https://nodejs.org/api/events.html#events_class_eventemitter) для передачи [событий библиотеки](#события)                                                           |\n\nНекоторые [внешние расширения](#расширения) могут добавлять свои дополнительные параметры.\n\nПример использования:\n\n",
    "snippet": "const Moysklad = require('moysklad')\n\n// Явное указание используемой версии API\nconst moysklad = Moysklad({ apiVersion: '1.2' })\n"
   },
   {
    "description": "## Фильтрация\n\nДля построения фильтра можно использовать селекторы в стиле Mongo\n\n| Селектор                             | Фильтр МойСклад               | Описание                   |\n| ------------------------------------ | ----------------------------- | -------------------------- |\n| `key: { $eq: value }`                | `key=value`                   | равно                      |\n| `key: { $ne: value }`                | `key!=value`                  | не равно                   |\n| `key: { $gt: value }`                | `key>value`                   | больше                     |\n| `key: { $gte: value }`               | `key>=value`                  | больше или равно           |\n| `key: { $lt: value }`                | `key<value`                   | меньше                     |\n| `key: { $lte: value }`               | `key<=value`                  | меньше или равно           |\n| `key: { $st: value }`                | `key~=value`                  | начинается со строки       |\n| `key: { $et: value }`                | `key=~value`                  | заканчивается строкой      |\n| `key: { $contains: value }`          | `key~value`                   | содержит строку            |\n| `key: { $in: [..] }` или `key: [..]` | `key=value1;key=value2;...`   | входит в                   |\n| `key: { $nin: [..] }`                | `key!=value1;key!=value2;...` | не входит в                |\n| `key: { $exists: true }`             | `key!=`                       | наличие значения (не null) |\n| `key: { $exists: false }`            | `key=`                        | пустое значение (null)     |\n| `key: { $and: [{..}, ..] }`          |                               | объединение условий        |\n| `key: { $not: {..} }`                |                               | отрицание условия          |\n\nНа один ключ можно использовать несколько селекторов\n\n",
    "snippet": "const filter = {\n  key: {\n    $eq: 'value',\n    $exists: true\n  }\n}\n"
   },
   {
    "description": "## Расширения\n\nБиблиотеку можно расширять дополнительными возможностями, подключая [внешние модули расширений](https://github.com/wmakeev/moysklad-tools).\n\nПример подключения [расширения для очереди запросов](https://github.com/wmakeev/moysklad-tools/tree/master/packages/moysklad-extension-queue):\n\n",
    "snippet": "const MoyskladCore = require('moysklad')\nconst MoyskladQueueExtension = require('moysklad-extension-queue')\n\nconst Moysklad = MoyskladCore.compose(MoyskladQueueExtension)\n\nconst moysklad = Moysklad({\n  queue: true // включение очереди запросов\n})\n"
   },
   {
    "description": "#### getTimeString\n\n> Преобразует дату в строку в формате API МойСклад в часовом поясе Москвы (статический метод)\n\n`Moysklad.getTimeString(date: Date, includeMs?: boolean) : string`\n\n**Параметры:**\n\n`date` - дата\n\n`includeMs` - если `true`, то в результирующую дату будут включены миллисекунды\n\n**Пример использования:**\n\n",
    "snippet": "const date = new Date('2017-02-01T07:10:11.123Z')\nconst timeString = Moysklad.getTimeString(date, true)\n\nassert.equal(timeString, '2017-02-01 10:10:11.123')\n"
   },
   {
    "description": "#### parseTimeString\n\n> Преобразует строку с датой в формате API МойСклад в объект даты (с учетом часового пояса исходной даты)\n\n`Moysklad.parseTimeString(date: string) : Date`\n\n**Параметры:**\n\n`date` - дата в формате МойСклад (напр. `2017-04-08 13:33:00.123`)\n\n**Пример использования:**\n\n",
    "snippet": "const parsedDate = Moysklad.parseTimeString('2017-04-08 13:33:00.123')\n\nassert.equal(parsedDate.toISOString(), '2017-04-08T10:33:00.123Z')\n"
   },
   {
    "description": "#### GET\n\n> GET запрос\n\n- `ms.GET(path: string | string[], query?: object, options?: object) : Promise`\n\n- `ms.GET(args: object) : Promise`\n\n**Параметры:**\n\n`path` - [url ресурса](#path)\n\n`query` - [параметры запроса](#query)\n\n`options` - [опции запроса](#options-параметры-запроса)\n\n**Пример использования:**\n\n",
    "snippet": "const productsCollection = await ms.GET('entity/product', { limit: 50 })\n\nconst order = await ms.GET(['entity', 'customerorder', orderId], {\n  expand: 'positions'\n})\n"
   },
   {
    "description": "#### POST\n\n> POST запрос\n\n- `ms.POST(path: string | string[], payload?: object|Array<object>, query?: object, options?: object) : Promise`\n\n- `ms.POST(args: object) : Promise`\n\n**Параметры:**\n\n`path` - [url ресурса](#path)\n\n`payload` - объект или коллекция объектов (будет преобразовано в строку методом `JSON.stringify`)\n\n`query` - [параметры запроса](#query)\n\n`options` - [опции запроса](#options-параметры-запроса)\n\n**Пример использования:**\n\n",
    "snippet": "const newProduct = await ms.POST('entity/product', { name: 'Новый товар' })\n"
   },
   {
    "description": "#### PUT\n\n> PUT запрос\n\n- `ms.PUT(path: string | string[], payload?: object, query?: object, options?: object) : Promise`\n\n- `ms.PUT(args: object) : Promise`\n\n**Параметры:**\n\n`path` - [url ресурса](#path)\n\n`payload` - обнвляемый объект (будет преобразован в строку методом `JSON.stringify`)\n\n`query` - [параметры запроса](#query)\n\n`options` - [опции запроса](#options-параметры-запроса)\n\n**Пример использования:**\n\n",
    "snippet": "const updatedProduct = await ms.PUT(['entity/product', id], product)\n"
   },
   {
    "description": "#### DELETE\n\n> DELETE запрос\n\n- `ms.DELETE(path: string | string[], options?: object) : Promise`\n\n- `ms.DELETE(args: object) : Promise`\n\n**Параметры:**\n\n`path` - [url ресурса](#path)\n\n`options` - [опции запроса](#options-параметры-запроса)\n\nМетод `DELETE` возвращает `undefined` при успешном запросе.\n\n**Пример использования:**\n\n",
    "snippet": "await ms.DELETE(['entity/product', product.id])\n"
   },
   {
    "description": "#### getOptions\n\n> Возвращает опции переданные в момент инициализации экземпляра библиотеки\n\n**Пример использования:**\n\n",
    "snippet": "const options = {\n  login: 'login',\n  password: 'password'\n}\n\nconst ms = Moysklad(options)\n\nconst msOptions = ms.getOptions()\n\nassert.ok(msOptions !== options)\nassert.equal(msOptions.login, 'login')\nassert.equal(msOptions.password, 'password')\n"
   },
   {
    "description": "#### buildUrl\n\n> Формирует url запроса\n\n- `ms.buildUrl(url: string, query?: object) : string`\n\n- `ms.buildUrl(path: string | string[], query?: object) : string`\n\n- `ms.buildUrl(args: object) : string`\n\n**Параметры:**\n\n`url` - полный url (должен соответствовать настройкам)\n\n`path` - [url ресурса](#path)\n\n`query` - [параметры запроса](#query)\n\n**Пример использования:**\n\n",
    "snippet": "const url = ms.buildUrl(\n  'https://online.moysklad.ru/api/remap/1.1/entity/customerorder?expand=positions',\n  { limit: 100 }\n)\n\nassert.equal(\n  url,\n  'https://online.moysklad.ru/api/remap/1.1/entity/customerorder?expand=positions&limit=100'\n)\n"
   },
   {
    "description": "\n",
    "snippet": "const url = ms.buildUrl('entity/customerorder', { expand: 'positions' })\n\nassert.equal(\n  url,\n  'https://online.moysklad.ru/api/remap/1.1/entity/customerorder?expand=positions'\n)\n"
   },
   {
    "description": "\n",
    "snippet": "const url = ms.buildUrl(['entity', 'customerorder'], { expand: 'positions' })\n\nassert.equal(\n  url,\n  'https://online.moysklad.ru/api/remap/1.1/entity/customerorder?expand=positions'\n)\n"
   },
   {
    "description": "#### parseUrl\n\n> Разбор url на составные компоненты\n\n- `ms.parseUrl(url: string) : object`\n\n**Параметры:**\n\n`url` - url ресурса\n\n**Пример использования:**\n\n",
    "snippet": "const parsedUri = ms.parseUrl('https://online.moysklad.ru/api/remap/1.1/entity/customerorder?expand=positions')\n\nassert.deepEqual(parsedUri, {\n  endpoint: 'https://online.moysklad.ru/api',\n  api: 'remap'\n  apiVersion: '1.1',\n  path: ['entity', 'customerorder'],\n  query: {\n    expand: 'positions'\n  }\n})\n"
   },
   {
    "description": "#### fetchUrl\n\n> Выполнить запрос по указанному url\n\n- `ms.fetchUrl(url: string, options?: object) : Promise`\n\n**Параметры:**\n\n`url` - url ресурса\n\n`options` - [опции запроса](#options-параметры-запроса)\n\n**Пример использования:**\n\n",
    "snippet": "const url = `https://online.moysklad.ru/api/remap/1.1/entity/customerorder/eb7bcc22-ae8d-11e3-9e32-002590a28eca`\n\nconst patch = { applicable: false }\n\nconst updatedOrder = await ms.fetchUrl(url, {\n  method: 'PUT',\n  body: JSON.stringify(patch)\n})\n"
   },
   {
    "description": "##### `path`\n\nСтрока или массив строк.\n\n**Примеры:**\n\n",
    "snippet": "// Три запроса ниже аналогичны\n\nms.GET(\n  `https://online.moysklad.ru/api/remap/1.1/entity/customerorder/${ORDER_ID}/positions/${POSITION_ID}?expand=assortment`\n)\n\nms.GET(`entity/customerorder/${ORDER_ID}/positions/${POSITION_ID}`, {\n  expand: 'assortment'\n})\n\nms.GET(['entity/customerorder', ORDER_ID, 'positions', POSITION_ID], {\n  expand: 'assortment'\n})\n"
   },
   {
    "description": "###### querystring\n\nВсе поля объекта запроса преобразуются в соответствующую строку запроса url. Некоторые поля (поле `filter`) подвергаются преобразованию.\n\nПоле объекта запроса должно иметь тип: `string`, `number`, `boolean`, `null` или `undefined`, любое другое значение вызовет ошибку.\n\n",
    "snippet": "const query = {\n  str: 'some string',\n  num: 1,\n  bool: true,\n  nil: null, // будет добавлено в строку запроса с пустым значением\n  nothing: undefined, // поле будет пропущено\n  arr: ['str', 1, true, null, undefined]\n}\n\n// https://online.moysklad.ru/api/remap/1.1/entity/demand?str=some%20string&num=1&bool=true&nil=&arr=str&arr=1&arr=true&arr=\nms.GET('entity/demand', query)\n"
   },
   {
    "description": "###### filter\n\nЕсли поле `filter` объект, то вложенные поля `filter` преобразуется в параметры фильтра в соответствии со следующими правилами:\n\n- `string`, `number`, `boolean` не проходят дополнительных преобразований (`key=value`)\n- `null` преобразуется в пустую строку (`key=`)\n- `Date` преобразуется в строку методом [`getTimeString`](#gettimestring) (`key=YYYY-MM-DD HH:mm:ss`)\n- `object` интерпретируется как набор селекторов (см. в разделе [Фильтрация](#фильтрация)) и как набор вложенных полей (см. пример ниже)\n\n",
    "snippet": "// Соответствует следующему значению фильтра: id=5;name.sub=bar;name=foo;name>15\nconst query = {\n  filter: {\n    id: 5,\n    name: {\n      $gt: 15,\n      $eq: 'foo',\n      sub: 'bar'\n    }\n  }\n}\n"
   },
   {
    "description": "### События\n\n| Событие         | Передаваемый объект                | Момент наступления            |\n| --------------- | ---------------------------------- | ----------------------------- |\n| `request`       | `{ url, options }`                 | Отправлен http запрос         |\n| `response`      | `{ url, options, response }`       | Получен ответ на запрос       |\n| `response:body` | `{ url, options, response, body }` | Загружено тело ответа         |\n| `error`         | `Error`                            | Ошибка при выполнении запроса |\n\nПример использования:\n\n",
    "snippet": "const fetch = require('node-fetch')\nconst Moysklad = require('moysklad')\nconst { EventEmitter } = require('events')\n\nconst emitter = new EventEmitter()\nconst ms = Moysklad({ fetch, emitter })\n\nemitter.on('request', ({ url, options }) => {\n  console.log(`${options.method} ${url}`)\n})\n\nms.GET('entity/customerorder', { limit: 1 }).then(res => {\n  console.log('Order name: ' + res.rows[0].name)\n})\n"
   }
  ]
 },
 {
  "package": "ngx-scrollspy",
  "snippets": [
   {
    "description": "\nIf you use SystemJS to load your files, you might have to update your config with this if you don't use `defaultJSExtensions: true`:\n",
    "snippet": "System.config({\n\tpackages: {\n\t\t\"ngx-scrollspy\": {\"defaultExtension\": \"js\"}\n\t}\n});\n"
   },
   {
    "description": "\nFinally, you can use ngx-scrollspy in your Angular 2 project.\nIt is recommended to instantiate `ScrollSpyService` in the bootstrap of your application and to never add it to the \"providers\" property of your components, this way you will keep it as a singleton.\nIf you add it to the \"providers\" property of a component it will instantiate a new instance of the service that won't be initialized.\n\n",
    "snippet": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { ScrollSpyModule } from 'ngx-scrollspy';\n\n@NgModule({\n  imports: [\n  \tBrowserModule,\n  \tScrollSpyModule.forRoot()\n  ],\n  declarations: [ AppComponent ], \n  bootstrap: [ AppComponent ]\n})\n"
   },
   {
    "description": "#### Spy window scroll\n\nUse ```ScrollSpyDirective``` to spy on window.\n\n",
    "snippet": "import { NgModule, Component, Injectable, AfterViewInit } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { ScrollSpyModule, ScrollSpyService } from 'ngx-scrollspy';\n\n@Injectable()\n@Component({\n\tselector: 'app',\n\ttemplate: `<div scrollSpy></div>`\n})\nexport class AppComponent implements AfterViewInit {\n\tconstructor(private scrollSpyService: ScrollSpyService) {}\n\n\tngAfterViewInit() {\n\t\tthis.scrollSpyService.getObservable('window').subscribe((e: any) => {\n\t\t\tconsole.log('ScrollSpy::window: ', e);\n\t\t});\n\t}\n}\n\n@NgModule({\n  imports: [\n  \tBrowserModule,\n  \tScrollSpyModule.forRoot()\n  ],\n  declarations: [\n  \tAppComponent\n  ], \n  bootstrap: [ AppComponent ]\n})\n"
   },
   {
    "description": "#### Spy any element scroll\n\nUse ```ScrollSpyElementDirective``` to spy on any element. You must give an unique id to each instance.\n\n",
    "snippet": "import { NgModule, Component, Injectable, AfterViewInit } from '@angular/core';\nimport { ScrollSpyModule, ScrollSpyService } from 'ngx-scrollspy';\n\n@Injectable()\n@Component({\n\tselector: 'yourComponent',\n\ttemplate: `\n\t<div scrollSpyElement=\"test\" style=\"max-height: 100px; overflow: auto;\">\n\t\t<div style=\"height: 500px;\"></div>\n\t</div>`\n})\nexport class YourComponent implements AfterViewInit {\n\n\tconstructor(private scrollSpyService: ScrollSpyService) {}\n\n\tngAfterViewInit() {\n\t\tthis.scrollSpyService.getObservable('test').subscribe((e: any) => {\n\t\t\tconsole.log('ScrollSpy::test: ', e);\n\t\t});\n\t}\n}\n\n@NgModule({\n  imports: [\n\t\tScrollSpyModule\n  ],\n  declarations: [\n  \tAppComponent\n  ], \n  providers: [ ] \n})\nexport class YourModule { }\n"
   }
  ]
 },
 {
  "package": "node-opcua-service-discovery",
  "snippets": []
 },
 {
  "package": "node-red-contrib-lifx-api",
  "snippets": []
 },
 {
  "package": "node-red-contrib-mailin-smtp",
  "snippets": []
 },
 {
  "package": "nodebb-plugin-watson",
  "snippets": []
 },
 {
  "package": "nodejs-spider2",
  "snippets": []
 },
 {
  "package": "noix",
  "snippets": []
 },
 {
  "package": "npm-install-tag",
  "snippets": [
   {
    "description": "#### Uesage\n\nyour package.json\n",
    "snippet": "{\n  \"devDependencies\": {\n    \"deps\": \"next\"\n  },\n  \"dependencies\": {\n    \"something\": \"latest\"\n  }\n}\n"
   },
   {
    "description": "\nadd npm-install-tag to package.json\n",
    "snippet": "{\n    \"postinstall\": \"npm-install-tag\",\n    \"devDependencies\": {\n        \"npm-install-tag\": \"latest\",\n    }\n}\n"
   },
   {
    "description": "#### cli\n\n",
    "snippet": "  Usage: npm-install-tag [options]\n  Options:\n    -h, --help                 output usage information\n    -V, --version              output the version number\n    -p, --path [path]          package.json path default pwd\n    -o, --override [override]  override package.json with resolved version\n    -s, --strict [strict]      override package.json with resolved strict version\n"
   }
  ]
 },
 {
  "package": "oactl",
  "snippets": []
 },
 {
  "package": "oforest",
  "snippets": []
 },
 {
  "package": "once-preprocessor",
  "snippets": []
 },
 {
  "package": "pagerun-jsunit",
  "snippets": []
 },
 {
  "package": "parsexml-function",
  "snippets": []
 },
 {
  "package": "particles-prereq",
  "snippets": []
 },
 {
  "package": "pavlog",
  "snippets": []
 },
 {
  "package": "paxcel-cms-core",
  "snippets": []
 },
 {
  "package": "perf%2Ees-output",
  "snippets": []
 },
 {
  "package": "piperjs",
  "snippets": []
 },
 {
  "package": "piwik-socket",
  "snippets": []
 },
 {
  "package": "pixelcms-shop-client",
  "snippets": []
 },
 {
  "package": "pizza-guy",
  "snippets": []
 },
 {
  "package": "play",
  "snippets": []
 },
 {
  "package": "pm2-elasticsearch-logger",
  "snippets": []
 },
 {
  "package": "pokemon-rng",
  "snippets": []
 },
 {
  "package": "polythene-core-spinner",
  "snippets": []
 },
 {
  "package": "postcss-1px2rem",
  "snippets": [
   {
    "description": "### Node\n\n",
    "snippet": "var postcss = require('postcss');\nvar px2rem = require('postcss-px2rem-1px');\nvar originCssText = '...';\nvar newCssText = postcss().use(px2rem({remUnit: 64})).process(originCssText).css;\n"
   },
   {
    "description": "### Gulp\n\n",
    "snippet": "npm install gulp-postcss\n"
   },
   {
    "description": "\n",
    "snippet": "var gulp = require('gulp');\nvar postcss = require('gulp-postcss');\nvar px2rem = require('postcss-px2rem-1px');\n\ngulp.task('default', function() {\n  var processors = [px2rem({remUnit: 75})];\n  return gulp.src('./src/*.css')\n    .pipe(postcss(processors))\n    .pipe(gulp.dest('./dest'));\n});\n"
   },
   {
    "description": "### Webpack\n\n",
    "snippet": "npm install postcss-loader\n"
   },
   {
    "description": "\n",
    "snippet": "var px2rem = require('postcss-px2rem-1px');\n\nmodule.exports = {\n  module: {\n    loaders: [\n      {\n        test: /\\.css$/,\n        loader: \"style-loader!css-loader!postcss-loader\"\n      }\n    ]\n  },\n  postcss: function() {\n    return [px2rem({remUnit: 75})];\n  }\n}\n"
   },
   {
    "description": "### Grunt\n\n",
    "snippet": "npm install grunt-postcss\n"
   },
   {
    "description": "\n",
    "snippet": "module.exports = function(grunt) {\n  grunt.initConfig({\n    postcss: {\n      options: {\n        processors: [\n          px2rem({remUnit: 75})\n        ]\n      },\n      dist: {\n        src: 'src/*.css',\n        dest: 'build'\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-postcss');\n  grunt.registerTask('default', ['postcss']);\n}\n"
   }
  ]
 },
 {
  "package": "postcss-load-config",
  "snippets": [
   {
    "description": "### `package.json`\n\nCreate a **`postcss`** section in your projects **`package.json`**\n\n",
    "snippet": "Project (Root)\n  |– client\n  |– public\n  |\n  |- package.json\n"
   },
   {
    "description": "### `.postcssrc`\n\nCreate a **`.postcssrc`** file in JSON or YAML format\n\n> ℹ️ It's recommended to use an extension (e.g **`.postcssrc.json`** or **`.postcssrc.yml`**) instead of `.postcssrc`\n\n",
    "snippet": "Project (Root)\n  |– client\n  |– public\n  |\n  |- (.postcssrc|.postcssrc.json|.postcssrc.yml)\n  |- package.json\n"
   },
   {
    "description": "### `.postcssrc.js` or `postcss.config.js`\n\nYou may need some logic within your config. In this case create JS file named **`.postcssrc.js`** or **`postcss.config.js`**\n\n",
    "snippet": "Project (Root)\n  |– client\n  |– public\n  |\n  |- (.postcssrc.js|postcss.config.js)\n  |- package.json\n"
   },
   {
    "description": "\nYou can export the config as an `{Object}`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  parser: 'sugarss',\n  map: false,\n  plugins: {\n    'postcss-plugin': {}\n  }\n}\n"
   },
   {
    "description": "\nOr export a `{Function}` that returns the config (more about the `ctx` param below)\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = (ctx) => ({\n  parser: ctx.parser ? 'sugarss' : false,\n  map: ctx.env === 'development' ? ctx.map : false,\n  plugins: {\n    'postcss-plugin': ctx.options.plugin\n  }\n})\n"
   },
   {
    "description": "#### `{Object}`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = ({ env }) => ({\n  ...options\n  plugins: {\n    'postcss-plugin': env === 'production' ? {} : false\n  }\n})\n"
   },
   {
    "description": "#### `{Array}`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = ({ env }) => ({\n  ...options\n  plugins: [\n    env === 'production' ? require('postcss-plugin')() : false\n  ]\n})\n"
   },
   {
    "description": "### `parser`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  parser: 'sugarss'\n}\n"
   },
   {
    "description": "### `syntax`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  syntax: 'postcss-scss'\n}\n"
   },
   {
    "description": "### `stringifier`\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  stringifier: 'midas'\n}\n"
   },
   {
    "description": "### [**`map`**](https://github.com/postcss/postcss/blob/master/docs/source-maps.md)\n\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  map: 'inline'\n}\n"
   },
   {
    "description": "### `to`\n\n",
    "snippet": "module.exports = {\n  to: 'path/to/dest.css'\n}\n"
   },
   {
    "description": "### `from`\n\n",
    "snippet": "module.exports = {\n  from: 'path/to/src.css'\n}\n"
   },
   {
    "description": "### `{} || null`\n\nThe plugin will be loaded with defaults\n\n",
    "snippet": "'postcss-plugin': {} || null\n"
   },
   {
    "description": "\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  plugins: {\n    'postcss-plugin': {} || null\n  }\n}\n"
   },
   {
    "description": "### `{Object}`\n\nThe plugin will be loaded with given options\n\n",
    "snippet": "'postcss-plugin': { option: '', option: '' }\n"
   },
   {
    "description": "\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  plugins: {\n    'postcss-plugin': { option: '', option: '' }\n  }\n}\n"
   },
   {
    "description": "### `false`\n\nThe plugin will not be loaded\n\n",
    "snippet": "'postcss-plugin': false\n"
   },
   {
    "description": "\n**.postcssrc.js**\n",
    "snippet": "module.exports = {\n  plugins: {\n    'postcss-plugin': false\n  }\n}\n"
   },
   {
    "description": "### `Ordering`\n\nPlugin **execution order** is determined by declaration in the plugins section (**top-down**)\n\n",
    "snippet": "{\n  plugins: {\n    'postcss-plugin': {}, // [0]\n    'postcss-plugin': {}, // [1]\n    'postcss-plugin': {}  // [2]\n  }\n}\n"
   },
   {
    "description": "\n<h2 align=\"center\">Context</h2>\n\nWhen using a `{Function}` (`postcss.config.js` or `.postcssrc.js`), it's possible to pass context to `postcss-load-config`, which will be evaluated while loading your config. By default `ctx.env (process.env.NODE_ENV)` and `ctx.cwd (process.cwd())` are available on the `ctx` `{Object}`\n\n> ℹ️ Most third-party integrations add additional properties to the `ctx` (e.g `postcss-loader`). Check the specific module's README for more information about what is available on the respective `ctx`\n\n<h2 align=\"center\">Examples</h2>\n\n**postcss.config.js**\n\n",
    "snippet": "module.exports = (ctx) => ({\n  parser: ctx.parser ? 'sugarss' : false,\n  map: ctx.env === 'development' ? ctx.map : false,\n  plugins: {\n    'postcss-import': {},\n    'postcss-nested': {},\n    cssnano: ctx.env === 'production' ? {} : false\n  }\n})\n"
   },
   {
    "description": "### `Async`\n\n",
    "snippet": "const { readFileSync } = require('fs')\n\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\n\nconst css = readFileSync('index.sss', 'utf8')\n\nconst ctx = { parser: true, map: 'inline' }\n\npostcssrc(ctx).then(({ plugins, options }) => {\n  postcss(plugins)\n    .process(css, options)\n    .then((result) => console.log(result.css))\n})\n"
   },
   {
    "description": "### `Sync`\n\n",
    "snippet": "const { readFileSync } = require('fs')\n\nconst postcss = require('postcss')\nconst postcssrc = require('postcss-load-config')\n\nconst css = readFileSync('index.sss', 'utf8')\n\nconst ctx = { parser: true, map: 'inline' }\n\nconst { plugins, options } = postcssrc.sync(ctx)\n"
   },
   {
    "description": "\n",
    "snippet": "const { task, src, dest, series, watch } = require('gulp')\n\nconst postcss = require('gulp-postcssrc')\n\nconst css = () => {\n  src('src/*.css')\n    .pipe(postcss())\n    .pipe(dest('dest'))\n})\n\ntask('watch', () => {\n  watch(['src/*.css', 'postcss.config.js'], css)\n})\n\ntask('default', series(css, 'watch'))\n"
   },
   {
    "description": "\n**webpack.config.js**\n",
    "snippet": "module.exports = (env) => ({\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [\n          'style-loader',\n          'css-loader',\n          'postcss-loader'\n        ]\n      }\n    ]\n  }\n})\n"
   }
  ]
 },
 {
  "package": "postcss-rtl-fish",
  "snippets": [
   {
    "description": "### With Webpack:\n",
    "snippet": "module.exports = {\n  module: {\n    rules: [ {\n      test: /\\.css$/,\n      use: [\n        { loader: 'style-loader' },\n        { loader: 'css-loader' },\n        { loader: 'postcss-loader',\n          options: {\n            plugins: function () {\n              return [ require( 'postcss-rtl' )( options ) ]\n            }\n          }  \n        }\n      ]\n    } ]\n  }\n}\n"
   },
   {
    "description": "### With Gulp:\n",
    "snippet": "gulp.src( 'style.css' )\n    .pipe( postcss( [ rtl( options ) ]) )\n    .pipe( gulp.dest( './dest' ) )\n"
   }
  ]
 },
 {
  "package": "progress-notifier",
  "snippets": []
 },
 {
  "package": "promise-contrib-retry",
  "snippets": []
 },
 {
  "package": "promise-latest",
  "snippets": [
   {
    "description": "## An example:\n \n",
    "snippet": "\nvar latest = require('promise-latest')\n\nfunction sometimesFastSometimesSlow(duration) {\n  return new Promise(function() {\n    setTimeout(function() {\n      resolve('operation took ' + duration + 'time')\n    }, duration)\n  })\n}\n\nvar latestFromUnpredictable = latest(sometimesFastSometimesSlow) \n\nvar slow = latestFromUnpredictable(1000)\nvar fastest = latestFromUnpredictable(10)\nvar faster = latestFromUnpredictable(100)\n\nslow.then(function(value) {\n  console.log(value)\n})\n\nfaster.then(function(value) {\n  console.log(value)\n})\n\nfastest.then(function(value) {\n  console.log(value)\n})\n\n// Will take around 10 ms and print\n=> operation took 100ms\n=> operation took 100ms\n=> operation took 100ms\n\n"
   },
   {
    "description": "\nA great use case is for preventing out of order results while the user types in an auto-complete:\n\n    user type 'c' -> search for 'c'\n    user type 'a' -> search for 'ca'\n    user type 't' -> search for 'cat'\n\nSince 'c' is a much broader search term than 'cat', the operation `search for 'c'` may take longer time to process, so maybe you'll get the results in this order:\n\n    10ms  => result of search for 'cat'\n    50ms  => result of search for 'ca'\n    100ms => result of search for 'c'\n\nNow, if your code handling search looks like this, you are in trouble, because the result of search `c` will be presented\nto the user *after* the result from both `cat` and `ca`\n\n",
    "snippet": "searchElement.addEventListener('keyup', function(event) {\n  ajax('/search?term=' + event.target.value).then(presentSearchResult)\n})\n"
   },
   {
    "description": "\nThis can be easily fixed by decorating the ajax function above with:\n",
    "snippet": "var latest = require('latest-promise')\nvar latestAjax = latest(ajax) // do not worry about out of order results\nsearchElement.addEventListener('keyup', function(event) {\n  latestAjax('/search?term=' + event.target.value).then(presentSearchResult)\n})\n"
   }
  ]
 },
 {
  "package": "puppeteer-extra-plugin-user-data-dir",
  "snippets": []
 },
 {
  "package": "q-write-file",
  "snippets": []
 },
 {
  "package": "qak",
  "snippets": []
 },
 {
  "package": "querify",
  "snippets": []
 },
 {
  "package": "radql",
  "snippets": []
 },
 {
  "package": "randomly",
  "snippets": []
 },
 {
  "package": "rdfprefix",
  "snippets": []
 },
 {
  "package": "react-advance-jalaali-datepicker2",
  "snippets": []
 },
 {
  "package": "react-browser-interaction",
  "snippets": []
 },
 {
  "package": "react-easy-paginate",
  "snippets": []
 },
 {
  "package": "react-midday",
  "snippets": [
   {
    "description": "## Installation\n\nreact-midday is available on NPM as **react-midday**:\n\n",
    "snippet": "npm install react-midday\n"
   }
  ]
 },
 {
  "package": "react-native-fading-slides",
  "snippets": [
   {
    "description": "### Properties\n\n",
    "snippet": "fadeDuration={500} // Milliseconds for slide fade\nstillDuration={1000} // Milliseconds for slide still\nheight={1000} // Set the slides component height\nslides={slidesList} // Set the slides list\nstartAnimation={true} // Start or stops animation\n"
   },
   {
    "description": "### Slides Properties\n\n",
    "snippet": "title={\"Title\"} // Slide's title\ntitleColor={\"#fff\"} // Slide's title color\nsubtitle={\"Subtitle\"} // Slide's subtitle\nsubtitleColor={\"#fff\"} // Slide's subtitle color\nimage={require('image!filename')} // Slide's image\nimageWidth={1000} // Slide's image width\nimageHeight={1000} // Slide's image height\n"
   }
  ]
 },
 {
  "package": "react-native-headphone-controls",
  "snippets": []
 },
 {
  "package": "react-native-inapp-browser",
  "snippets": []
 },
 {
  "package": "react-native-introduce",
  "snippets": []
 },
 {
  "package": "react-native-lindf-loading",
  "snippets": []
 },
 {
  "package": "react-navigation-collapsible",
  "snippets": [
   {
    "description": "### 1-1. Default Header\n\n<img src=\"https://github.com/benevbright/react-navigation-collapsible/blob/master/docs/demo-sample1-1.gif?raw=true\" width=\"200\">\n\n",
    "snippet": "import {\n  createCollapsibleStack,\n  // disableExpoTranslucentStatusBar,\n} from 'react-navigation-collapsible';\n\n/* Expo only: If you disabled Expo's default translucent statusBar, please call this function as well.\ndisableExpoTranslucentStatusBar();\n*/\n\nfunction App() {\n  return (\n    <NavigationContainer>\n      <Stack.Navigator>\n        /* Wrap your Stack.Screen */\n        {createCollapsibleStack(\n          <Stack.Screen\n            name=\"HomeScreen\"\n            component={MyScreen}\n            options={{\n              headerStyle: { backgroundColor: 'green' },\n              title: 'Home',\n            }}\n          />,\n          {\n            collapsedColor: 'red' /* Optional */,\n            useNativeDriver: true /* Optional, default: true */,\n          }\n        )}\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n"
   },
   {
    "description": "\n",
    "snippet": "import { Animated } from 'react-native';\nimport { useCollapsibleStack } from 'react-navigation-collapsible';\n\nconst MyScreen = ({ navigation, route }) => {\n  const {\n    onScroll /* Event handler */,\n    onScrollWithListener /* Event handler creator */,\n    containerPaddingTop /* number */,\n    scrollIndicatorInsetTop /* number */,\n    /* Animated.AnimatedInterpolation by scrolling */\n    translateY /* 0.0 ~ -headerHeight */,\n    progress /* 0.0 ~ 1.0 */,\n    opacity /* 1.0 ~ 0.0 */,\n  } = useCollapsibleStack();\n\n  /* in case you want to use your listener\n  const listener = ({nativeEvent}) => {\n    console.log(nativeEvent);\n  };\n  const onScroll = onScrollWithListener(listener);\n  */\n\n  return (\n    <Animated.FlatList\n      onScroll={onScroll}\n      contentContainerStyle={{ paddingTop: containerPaddingTop }}\n      scrollIndicatorInsets={{ top: scrollIndicatorInsetTop }}\n      /* rest of your stuff */\n    />\n  );\n};\n"
   },
   {
    "description": "### 2. Sub Header (e.g Search Bar)\n\n<img src=\"https://github.com/benevbright/react-navigation-collapsible/blob/master/docs/demo-sample2.gif?raw=true\" width=\"200\">\n\n",
    "snippet": "import { createCollapsibleStackSub } from 'react-navigation-collapsible';\n/* use 'createCollapsibleStackSub' instead of 'createCollapsibleStack' */\n\n/* The rest are the same with the default header. */\n"
   },
   {
    "description": "\n",
    "snippet": "import { Animated } from 'react-native';\nimport {\n  useCollapsibleStack,\n  CollapsibleStackSub,\n} from 'react-navigation-collapsible';\n\nconst MySearchBar = () => (\n  <View style={{ padding: 15, width: '100%', height: 60 }}>\n    <TextInput placeholder=\"search here\" />\n  </View>\n);\n\nconst MyScreen = ({ navigation, route }) => {\n  const {\n    onScroll /* Event handler */,\n    containerPaddingTop /* number */,\n    scrollIndicatorInsetTop /* number */,\n  } = useCollapsibleStack();\n\n  return (\n    <>\n      <Animated.FlatList\n        onScroll={onScroll}\n        contentContainerStyle={{ paddingTop: containerPaddingTop }}\n        scrollIndicatorInsets={{ top: scrollIndicatorInsetTop }}\n        /* rest of your stuff */\n      />\n      /* Wrap your component with `CollapsibleStackSub` */\n      <CollapsibleStackSub>\n        <MySearchBar />\n      </CollapsibleStackSub>\n    </>\n  );\n};\n"
   }
  ]
 },
 {
  "package": "react-package-boilerplate",
  "snippets": []
 },
 {
  "package": "react-pretence-router",
  "snippets": []
 },
 {
  "package": "react-server-rendering",
  "snippets": []
 },
 {
  "package": "react-tether",
  "snippets": []
 },
 {
  "package": "react-vizibility-watcher",
  "snippets": []
 },
 {
  "package": "redis-json",
  "snippets": []
 },
 {
  "package": "redis-typescript",
  "snippets": [
   {
    "description": "### Getting started\n\n> commonjs\n\n",
    "snippet": "const { Tedis, TedisPool } = require(\"tedis\");\n"
   }
  ]
 },
 {
  "package": "redux-router5",
  "snippets": [
   {
    "description": "## Using the router plugin\n\nIf you choose to not use the middleware, you need to add `reduxPlugin` to your router. The plugin simply syncs the router state with redux. To navigate, you will need to invoke `router.navigate`. If you use React, you can use `Link` from `react-router5`.\n\n",
    "snippet": "import { reduxPlugin } from 'redux-router5'\n\n// You need a router instance and a store instance\nrouter.usePlugin(reduxPlugin(store.dispatch))\n"
   },
   {
    "description": "## Reducer\n\nThis packages exposes a reducer (`router5Reducer`) that you can add to your application. It contains four properties:\n\n- `route`\n- `previousRoute`\n- `transitionRoute` (the current transitioning route)\n- `transitionError` (the last error which occured)\n\n",
    "snippet": "import { combineReducers } from 'redux'\nimport { router5Reducer } from 'redux-router5'\n\nconst reducers = combineReducers({\n  router: router5Reducer\n  // ...add your other reducers\n})\n"
   },
   {
    "description": "\nUsing `createRouteNodeSelector` with other connect properties:\n\n",
    "snippet": "export default connect(state => {\n    const routeNodeSelector = createRouteNodeSelector('');\n\n    return (state) => ({\n        a: state.a,\n        b: state.b,\n        ...routeNodeSelector(state)\n    })\n)(Root);\n"
   }
  ]
 },
 {
  "package": "regular-bot",
  "snippets": []
 },
 {
  "package": "rehype-minify-css-style",
  "snippets": []
 },
 {
  "package": "remote-ip-express-middleware",
  "snippets": []
 },
 {
  "package": "request-as-promise",
  "snippets": [
   {
    "description": "### Installation\n\n",
    "snippet": "npm i --save request-as-promise\n"
   }
  ]
 },
 {
  "package": "retrier",
  "snippets": []
 },
 {
  "package": "rfolderify",
  "snippets": [
   {
    "description": "### on the command-line\n\n",
    "snippet": "$ browserify -t rfolderify example/main.js > bundle.js\n"
   },
   {
    "description": "## Direct Usage\n\nA tiny command-line program ships with this module for easier debugging and if you just want this without any of the rest of browserify.\n\n",
    "snippet": "npm install rfolderify -g\nrfolderify --help\n"
   }
  ]
 },
 {
  "package": "ricecrust",
  "snippets": []
 },
 {
  "package": "rico-core",
  "snippets": []
 },
 {
  "package": "riot-testing-library",
  "snippets": []
 },
 {
  "package": "rn-uuid",
  "snippets": []
 },
 {
  "package": "rollup-plugin-legacy",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "// rollup.config.js\nimport legacy from 'rollup-plugin-legacy';\n\nexport default {\n  entry: 'src/main.js',\n  dest: 'bundle.js',\n  format: 'iife',\n  plugins: [\n    legacy({\n      // add a default export, corresponding to `someLibrary`\n      'vendor/some-library.js': 'someLibrary',\n\n      // add named exports\n      'vendor/another-library.js': {\n        foo: 'anotherLib.foo',\n        bar: 'anotherLib.bar',\n        baz: 'anotherLib.baz'\n      }\n    })\n  ]\n}\n"
   }
  ]
 },
 {
  "package": "routes-http",
  "snippets": []
 },
 {
  "package": "rycou-test",
  "snippets": []
 },
 {
  "package": "sag-bourbon-neat",
  "snippets": []
 },
 {
  "package": "sanitize_files",
  "snippets": []
 },
 {
  "package": "sax-xml2json",
  "snippets": []
 },
 {
  "package": "scrappie",
  "snippets": []
 },
 {
  "package": "scrive",
  "snippets": []
 },
 {
  "package": "scroll-to-y-el",
  "snippets": []
 },
 {
  "package": "scrummy",
  "snippets": []
 },
 {
  "package": "seisplotjs-miniseed",
  "snippets": []
 },
 {
  "package": "semantic-ui-riot",
  "snippets": []
 },
 {
  "package": "setdragimage-ie",
  "snippets": []
 },
 {
  "package": "shell-task-log",
  "snippets": []
 },
 {
  "package": "showkit",
  "snippets": [
   {
    "description": "## Using the API\n\n",
    "snippet": "var ShowKit = require('showkit');\nvar kit = new ShowKit('aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa');\n"
   },
   {
    "description": "## Getting Accounts\n\n",
    "snippet": "kit.getAccounts(function(err, accounts) {\n  // ...\n});\n"
   },
   {
    "description": "\n__Example Result__\n\n",
    "snippet": "{\n  create_timestamp: Date,\n  status: 'active',\n  billing_profile: 'default',\n  terminate_timestamp: null,\n  activate_timestamp: Date,\n  modify_timestamp: Date,\n  id: 9\n}\n"
   },
   {
    "description": "## Adding a Subscriber\n\n",
    "snippet": "kit.addSubscriber('username', 'password', function(err, result) {\n  // ...\n});\n"
   },
   {
    "description": "\n__Example Result__\n\n",
    "snippet": "{\n  username: '9.bob',\n  domain: '108.166.105.43'\n  success: true\n}\n"
   },
   {
    "description": "## Listing Subscribers\n\n",
    "snippet": "kit.getSubscribers(function(err, subscribers) {\n  // ...\n});\n"
   },
   {
    "description": "\n__Example Result__\n\n",
    "snippet": "[{\n  alias_numbers: [],\n  create_timestamp: Date,\n  status: 'active',\n  uuid: 'd3cb8508-fee0-42a8-b96a-96b5a254227b',\n  domain: '108.166.105.43',\n  subscriber_id: 9,\n  username: 'bob',\n  account_id: 9,\n  modify_timestamp: Date\n}]\n"
   },
   {
    "description": "## Listing a Subscriber's Calls\n\n",
    "snippet": "kit.getSubscriberCalls(username, function(err, calls) {\n  // ...\n});\n"
   },
   {
    "description": "\n__Example Result__\n\n",
    "snippet": "[{\n  source_domain: '0',\n  rating_status: '3',\n  call_status: 'call_fee',\n  start_time: 'timeout',\n  duration: '1349398146.01',\n  destination_user: '108.166.105.43',\n  mct: 'jamesexpert2222',\n  destination_domain: false,\n  source_clir: '13105284403',\n  id: 'james2252',\n  call_type: 'ok'\n}]\n"
   },
   {
    "description": "## Checking if a Subscriber is Active\n\n",
    "snippet": "kit.getSubscriberActive(username, function(err, result) {\n  // ...\n});\n"
   },
   {
    "description": "\n__Example Result__\n\n",
    "snippet": "{\n  active: true\n}\n"
   }
  ]
 },
 {
  "package": "simple-routing",
  "snippets": []
 },
 {
  "package": "simplenvm",
  "snippets": [
   {
    "description": "# License\n\nMIT\n\n",
    "snippet": "Copyright (c) 2013 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
   }
  ]
 },
 {
  "package": "slickgrid-bare",
  "snippets": [
   {
    "description": "## Install\n\nSimply (with jquery peer dep):\n\n```shell script\n$ npm i slickgrid-bare jquery --save\n$ yarn add slickgrid-bare jquery\n",
    "snippet": "\nThe peerDependency on jQuery is v2.2+ that you have to provide yourself (which is deemed insecure), works with that or v3+\n\n## Use (full bundle)\n\n"
   },
   {
    "description": "import {Data, Grid, Slick} from 'slickgrid-bare';\n\nconst data = new Data.DataView([{...}, {...}]);\nconst columns = [{\n  id: 'name',\n  resizable: true,\n  name: 'Name',\n  field: 'name',\n  cssClass: 'is-text',\n  minWidth: 60,\n  maxWidth: 200,\n  sortable: true,\n  sortComparer: (a, b) => a > b ? -1 : 0,\n  formatter: (row, column, value) => `<div>${value}</div>`\n}];\nconst options = {\n  rowHeight: 30,\n  editable: false,\n  enableAddRow: false,\n  enableColumnResize: true,\n  enableColumnReorder: true,\n  frozenColumn: 1,\n  enableCellNavigation: true,\n  asyncEditorLoading: false,\n  enableAsyncPostRender: true,\n  asyncPostRenderDelay: 1,\n  enableAsyncPostRenderCleanup: true,\n  autoEdit: false,\n  showHeaderRow: false,\n  headerRowHeight: 28,\n  enableTextSelectionOnCells: true,\n  forceFitColumns: true,\n  fullWidthRows: true,\n  explicitInitialization: true\n};\nconst grid = new Grid(document.getElementById('grid-container'), data, columns, options);\n\ngrid.onColumnsReordered.subscribe(() => {\n  const foo = new Slick.Event();\n  foo.notify(grid.getColumns())\n});\n\ngrid.init();\n",
    "snippet": "\nOptimised use for build sizes in module imports:\n\n"
   },
   {
    "description": "import Grid from 'slickgrid-bare/dist/6pac';\nimport FrozenGrid from 'slickgrid-bare/dist/frozen';\nimport Data from 'slickgrid-bare/dist/data';\nimport Core from 'slickgrid-bare/dist/core';\n",
    "snippet": "\n*WARNING:* This package does not come with a compiled CSS version, you get .SCSS export only. Ideally, copy the files locally and fix\nbut some defaults are available.\n\n"
   }
  ]
 },
 {
  "package": "snippetify",
  "snippets": [
   {
    "description": "## Example\n\n",
    "snippet": "'use strict';\nvar fs         =  require('fs')\n  , snippetify =  require('..')\n  , code       =  fs.readFileSync(__filename, 'utf-8')\n  , snippets   =  snippetify(code);\n\nfunction printRawCode(snippets) {\n  // prints all lines exactly as they appeared in the script\n  var lines = snippets\n    .map(function (x) { return '[ ' + x.raw + ' ]'; });\n\n  console.log(lines.join('\\n'));\n}\n\nprintRawCode(snippets);\n"
   },
   {
    "description": "\nOutputs:\n\n",
    "snippet": "[ 'use strict'; ]\n[ var fs         =  require('fs') ]\n[   , snippetify =  require('..') ]\n[   , code       =  fs.readFileSync(__filename, 'utf-8') ]\n[   , snippets   =  snippetify(code); ]\n[  ]\n[ function printRawCode(snippets) {\n  // prints all lines exactly as they appeared in the script\n  var lines = snippets\n    .map(function (x) { return '[ ' + x.raw + ' ]'; });\n\n  console.log(lines.join('\\n'));\n} ]\n[  ]\n[ printRawCode(snippets); ]\n[  ]\n"
   },
   {
    "description": "## API\n\n",
    "snippet": "snippetify(script[, esprimaOpts])\n"
   },
   {
    "description": "\n",
    "snippet": "/**\n * Splits given script into as many root level snippets as possible, one line being the smallest possible.\n * Keeps root level expressions intact, i.e. does not pull out snippets from inside functions.\n * \n * @name snippetify\n * @function\n * @param script {String} The script to split into snippets.\n * @param esprimaOpts {Object} Options to pass to the esprima parser (optional):\n *    loc      :  Nodes have line and column-based location info\n *    range    :  Nodes have an index-based location range (array)\n *    raw      :  Literals have extra property which stores the verbatim source\n *    tokens   :  An extra array containing all found tokens\n *    comment  :  An extra array containing all line and block comments\n *    tolerant :  An extra array containing all errors found, attempts to continue parsing when an error is encountered\n * @return {Array{Object}} each with the following properties:\n *    code     :  The snippet code that was parsed and possibly fixed\n *    raw      :  The snippet code that was parsed before it was fixed\n *    ast      :  The AST for the snippet (note ast.tokens will be present if tokens: true is set)\n */\n"
   }
  ]
 },
 {
  "package": "soundbank-oscillator",
  "snippets": [
   {
    "description": "## API\n\n",
    "snippet": "var Oscillator = require('soundbank-oscillator')\n"
   },
   {
    "description": "## Standalone Example\n\n",
    "snippet": "var Oscillator = require('soundbank-oscillator')\n\nvar audioContext = new AudioContext()\nvar oscillator = Oscillator(audioContext)\n\noscillator.note.value = 60 // middle C (midi)\noscillator.start(0)\n"
   }
  ]
 },
 {
  "package": "spacebars-compiler",
  "snippets": []
 },
 {
  "package": "spacious",
  "snippets": []
 },
 {
  "package": "spider-engine",
  "snippets": [
   {
    "description": "## How to use\n\nTo create a new spider, you can do:\n\n",
    "snippet": "var Spider = require('spider-engine');\nvar spider = new Spider(`scraper` || `options`);\n\nspider.query(`queryParams`);\n"
   },
   {
    "description": "\nThe spider is an `EventEmitter`, so you can get the scraped results as they come in, by doing:\n\n",
    "snippet": "spider.on('data', function (data) {\n\tresults = data.items;\n\t// ...do something with the results\n});\n\nspider.on('finish', function(data) {\n\tconsole.log('Spider finished with code '+data.code+'. ' + data.message);\n});\n"
   },
   {
    "description": "#### Spider(scraper:Function)\n\nCreates a new basic spider with the provided scraper.\n\n",
    "snippet": "// example:\n\nvar Spider = require('spider-engine');\n\nvar spider = new Spider( function($) {\n\n\t// Get all the links in the page\n\tvar links = [];\n\t$('a').each( function(i, elem) {\n\t\tlinks.push( $(elem).attr('href') );\n\t});\n\n\treturn {\n\t\titems: links,\n\t};\n});\n\nspider.query('http://en.wikipedia.org/wiki/Web_scraping');\n\nspider.on('data', function(results) {\n\tconsole.log(results); // -> returned data from the scraper;\n});\n"
   },
   {
    "description": "#### Spider::query(`queryParams`:`Object`)\n\n",
    "snippet": "spider.query('Scraping in nodejs');\n"
   },
   {
    "description": "#### Spider::kill()\n\nStops the spider. This will also trigger the `finish` event.\n\n",
    "snippet": "spider.kill();\n"
   }
  ]
 },
 {
  "package": "squiss",
  "snippets": []
 },
 {
  "package": "ssh-key",
  "snippets": [
   {
    "description": "# Install\n",
    "snippet": "npm install sojs-utility-file\n"
   },
   {
    "description": "# Use\n",
    "snippet": "require('sojs');\nrequire('sojs-utility-file');\n\nvar file = sojs.using('sojs.utility.file');\nvar filePath = sojs.getClassPath('sojs.utility.file');\nfile.readFileSync(filePath);\n"
   },
   {
    "description": "## install for develop\n",
    "snippet": "npm install\n"
   },
   {
    "description": "## Unit Test\n",
    "snippet": "node .\\tool\\unit.js\n"
   },
   {
    "description": "## Benchmark\n",
    "snippet": "node .\\tool\\benchmark.js\n"
   },
   {
    "description": "## Coverage\n",
    "snippet": "node .\\tool\\coverage.js\n"
   }
  ]
 },
 {
  "package": "stimulus-flatpickr",
  "snippets": [
   {
    "description": "### Register a Flatpickr Controller\n\nmanually register a new Stimulus controller in your main JS entry point.\n\n",
    "snippet": "// ./packs/application.js\nimport { Application } from 'stimulus'\n// import Flatpickr\nimport Flatpickr from 'stimulus-flatpickr'\n\nimport { definitionsFromContext } from 'stimulus/webpack-helpers'\nconst application = Application.start()\nconst context = require.context('../controllers', true, /\\.js$/)\napplication.load(definitionsFromContext(context))\n\n// Manually register Flatpickr as a stimulus controller\napplication.register('flatpickr', Flatpickr)\n"
   },
   {
    "description": "### Extends the controller\n\ncreate a new Stimulus controller that will inherit from `stimulus-flatpickr`\n\n",
    "snippet": "// ./controllers/flatpickr_controller.js\n// import stimulus-flatpickr wrapper controller to extend it\nimport Flatpickr from 'stimulus-flatpickr'\n\n// you can also import a translation file\nimport { French } from 'flatpickr/dist/l10n/fr.js'\n\n// import a theme (could be in your main CSS entry too...)\nimport 'flatpickr/dist/themes/dark.css'\n\n// create a new Stimulus controller by extending stimulus-flatpickr wrapper controller\nexport default class extends Flatpickr {\n  initialize() {\n    // sets your language (you can also set some global setting for all time pickers)\n    this.config = {\n      locale: French\n    }\n  }\n\n  // all flatpickr hooks are available as callbacks in your Stimulus controller\n  change(selectedDates, dateStr, instance) {\n    console.log('the callback returns the selected dates', selectedDates)\n    console.log('but returns it also as a string', dateStr)\n    console.log('and the flatpickr instance', instance)\n  }\n}\n"
   },
   {
    "description": "### Global settings for all datepickers\n\nAs we have seen just above you can easily from your rails `erb` code pass the flatpickr options. This is great for passing dynamic options that might change (ie enableDate, dateFormat etc).\n\nIf all your datepickers share some global settings you can define them in your `initialize()` or `connect()` function.\n\n",
    "snippet": "initialize() {\n   //global options\n    this.config = {\n      enableTime: true,\n      time_24hr: true\n    };\n  }\n"
   },
   {
    "description": "\nor with `connect()`\n\n",
    "snippet": "connect() {\n   //global options\n    this.config = {\n      ...this.config, //spread options in case some where defined in initialize\n      enableTime: true,\n      time_24hr: true\n    };\n\n    //always call super.connect()\n    super.connect();\n  }\n"
   },
   {
    "description": "## Overriding connect & disconnect\n\nif you need to override the connect function in the extended controller, you need to call `super`\n\n",
    "snippet": "connect(){\n  // ...\n  // define global settings as explained in the global settings section before super\n  // ...\n\n  // always call super.connect()\n  super.connect();\n\n  // ...\n  // Your code can access this.fp flatpickr instance\n  // ...\n}\n"
   }
  ]
 },
 {
  "package": "stream-to-array",
  "snippets": [
   {
    "description": "## API\n\n",
    "snippet": "var toArray = require('stream-to-array')\n"
   },
   {
    "description": "### toArray([stream], [callback(err, arr)])\n\nReturns all the data objects in an array.\nThis is useful for streams in object mode if you want to just use an array.\n\n",
    "snippet": "var stream = new Stream.Readable()\ntoArray(stream, function (err, arr) {\n  assert.ok(Array.isArray(arr))\n})\n"
   },
   {
    "description": "\nIf `stream` is not defined, it is assumed that `this` is a stream.\n\n",
    "snippet": "var stream = new Stream.Readable()\nstream.toArray = toArray\nstream.toArray(function (err, arr) {\n\n})\n"
   },
   {
    "description": "\nIf `callback` is not defined, then it returns a promise.\n\n",
    "snippet": "toArray(stream)\n  .then(function (parts) {\n\n  })\n"
   },
   {
    "description": "\nIf you want to return a buffer, just use `Buffer.concat(arr)`\n\n",
    "snippet": "toArray(stream)\n  .then(function (parts) {\n    var buffers = []\n    for (var i = 0, l = parts.length; i < l ; ++i) {\n      var part = parts[i]\n      buffers.push((part instanceof Buffer) ? part : new Buffer(part))\n    }\n    return Buffer.concat(buffers)\n  })\n"
   }
  ]
 },
 {
  "package": "sun-king",
  "snippets": []
 },
 {
  "package": "supposed",
  "snippets": [
   {
    "description": "\nUsing the default reporter, this will print:\n\n",
    "snippet": "✓ when dividing a number by 0, it should return Infinity\n✓ when dividing a number by 0, if the number is zero, it should return NaN\n✓ when dividing a number by 0, if the number is zero, it should not be equal to itself\n"
   }
  ]
 },
 {
  "package": "suwis-simpleps",
  "snippets": [
   {
    "description": "##### JAVASCRIPT\n\n",
    "snippet": "import Simpleps from 'suwis-simpleps'\n\n// this.$refs.poster => dom 节点\nvar sp = new Simpleps(this.$refs.poster)\n\nsp.mix({\n  // 图片地址\n  src: 'http://test.suwis.com/temp/4c8a22cf73059f0c!600x600.jpg',\n  // 文字偏移 x 轴  \n  x: 0,\n  // 文字偏移 y 轴\n  y: 0,\n  // 文本样式\n  style: {\n    // 文字 默认：字符串 富文本： [`{a|应用rich中的a样式}`,`默认样式`]\n    text: '图像合成',\n    // 富文本，此项配置了以后text可支持富文本格式\n    rich: {\n      // 样式枚举\n      a: {\n        fontSize: 18\n      }\n    },\n    // 文本旋转\n    textRotation: 0,\n    // 混合模式 同 Canvas globalCompositeOperation\n    blend: null,\n    // 颜色\n    textFill: '#fff',\n    // 字号\n    fontSize: 18,\n    // 字体\n    fontFamily: 'Microsoft YaHei',\n    // 文字描边样式\n    textStroke: null,\n    // 文字水平对齐方式，\n    // 可取值：'left'、 'center'、 'right'，\n    // 默认根据 textPosition 计算。\n    textAlign: 'bottom',\n    // 文字位置，可以为 'inside'、 'left'、 'right'、 'top'、 'bottom'，\n    // 或一个二维数\n    // 组 [x, y] 表示相对形状的位置。\n    textPosition: 'bottom',\n    // 当文字过长显示不下时，显示省略号表示。\n    truncate: {\n      // 包含了 textPadding 的宽度，超出这个范围就裁剪。\n      outerWidth: null,\n      // 包含了 textPadding 的高度，超出这个范围就裁剪。\n      outerHeight: null,\n      // 默认用省略号表示超出部分，也可以对其进行自定义。\n      ellipsis: '...'\n    },\n    // 文本包围盒 文本居中 居左上下垂直居中时根据文本包围盒设置相对位置\n    textRect: {\n      // 坐标\n      x: 0,\n      y: 0,\n      // 尺寸\n      width: 160,\n      height: 50\n    }\n  }\n})\n\n// 事件\n\nsp.on('load', ()=> {\n  // TODO: 图片加载完毕\n})\n\n// 方法\n\n// 获取合成图片的base64\nsp.toDataURL()\n\n// 销毁\nsp.dispose()\n"
   }
  ]
 },
 {
  "package": "sv2json",
  "snippets": []
 },
 {
  "package": "svelte-webext-storage-adapter",
  "snippets": []
 },
 {
  "package": "svg-compactor",
  "snippets": []
 },
 {
  "package": "swichr",
  "snippets": []
 },
 {
  "package": "sync-bee",
  "snippets": [
   {
    "description": "Can be used to sync files from local filesystem to networked/mapped/mounted drives. Prosynkee-Web uses this package to do it's business!\n\n#Useage\n\nRequire sync-bee. Create a SyncBee object. Set some properties. Call setConfigs() passing in a configuration object if you want to set configuration object manually. Or, call loadConfigFile() passing in the full path to a json file containing the configuration object. Call the run() method. It will output status to the console.\n\nProperties on the sync-bee object to set:\n\n **testcopy** Set to true if you want to display to console the file move (versus actually moving the files; aka a dry run)\n\n **testclean** Set to true if you want to display to console the files deleted (versus actually deleting the files; aka a dry run)\n\n **quietmode** Set to true to squash the console output (default = false)\n\n **writetofile** Set to true to write the results of the sync to a file (default = true)\n\n **fileout** Set path to a file in which to log the results of the sync (default = \"./logs/synced.txt\")\n\nConfiguration object:\n\n**cleans** any files that you would like deleted on the target prior to syncing\n\n**filebase** base path that will be appended to each file (can be left blank if you want to define full path in the files array)\n\n**files** files you want moved to the target\n\n**mountbase** base path that will be appended to each directory defined in mountdirs (can be left blank if you want to define full path in the mountdirs array)\n\n**mountdirs** mounted directory\n\nExample script:\n",
    "snippet": "'use strict'\nlet SyncBee = require('sync-bee')\n\nlet confs =\n{\n    clean       : [],\n    filebase    : '/Users/johnny/projects/todoapp/',\n    files       : ['controllers/manageController.js','views/manage.html'],\n    mountbase   : '/Users/johnny/mounts/',\n    mountdirs   : ['dev/','test/']\n}\n\nlet bee = new SyncBee()\nbee.testcopy = true\nbee.testclean = false\nbee.docopy = true\nbee.quietmode = false\nbee.writetofile = true\nbee.fileout = './last-sync.txt'\nif(typeof syncFile==='undefined') bee.setConfigs( confs )\nelse bee.loadConfigFile( syncFile )\nbee.run();\n\n"
   }
  ]
 },
 {
  "package": "tailwind-zeplin-extension",
  "snippets": [
   {
    "description": "\nUtilities to generate Tailwind Config and classes for your design.\n\nSample colors output:\n",
    "snippet": "const colors = {\n  red: \"#ff0000\",\n  green: \"#00ff00\",\n  blue: \"#0000ff\",\n  yellow: \"#ffff00\",\n  black: \"#000000\",\n  black50: \"rgba(0, 0, 0, 0.5)\",\n  white: \"#ffffff\"\n};\n"
   },
   {
    "description": "### Tailwind Config\n\nIf this isn't supplied, the default Tailwind config will be used. If you've customised the config you can import it to generate appropriate classes for your project. \n\nTo export your current config, add the following lines to the bottom of your `tailwind-config.js`:\n\n",
    "snippet": "console.log(JSON.stringify(module.exports))\n"
   }
  ]
 },
 {
  "package": "tarikcurto%2Enode-webdriver",
  "snippets": []
 },
 {
  "package": "tentacle-less",
  "snippets": []
 },
 {
  "package": "term-img2",
  "snippets": [
   {
    "description": "## Install\n\n",
    "snippet": "$ npm install --save term-img2\n"
   },
   {
    "description": "## Usage\n\n",
    "snippet": "const termImg = require('term-img2');\n\ntermImg('unicorn.jpg', {log: true});\n"
   }
  ]
 },
 {
  "package": "test-example",
  "snippets": []
 },
 {
  "package": "test-friday-tech-npm-package",
  "snippets": []
 },
 {
  "package": "testafile",
  "snippets": []
 },
 {
  "package": "tfl-busboy",
  "snippets": [
   {
    "description": "<img src=\"https://raw.githubusercontent.com/quarterto/node-busboy/master/logo.png?2\" alt=\"TfL-BUSBOY\" width=\"382\"><br>\n<a href=\"https://travis-ci.org/quarterto/node-busboy\"><img src=\"https://travis-ci.org/quarterto/node-busboy.svg?branch=master\" alt=\"Build Status\"></a>\n</h1>\n\nNice event stream wrapper for the byzantine TfL Bus Departures API.\n\n",
    "snippet": "npm install tfl-busboy\n"
   }
  ]
 },
 {
  "package": "the-controller-role",
  "snippets": []
 },
 {
  "package": "theia-rust",
  "snippets": []
 },
 {
  "package": "thohar_censorify",
  "snippets": []
 },
 {
  "package": "thumbslider",
  "snippets": [
   {
    "description": "### npm\n\n",
    "snippet": "npm install thumbslider --save\n"
   },
   {
    "description": "### bower\n\n",
    "snippet": "bower install thumbslider --save\n"
   },
   {
    "description": "\nMake sure the container is styled to have a width and height.\n\nFinally, to create and render the carousel (with default options)\n\n",
    "snippet": "var carousel = thumbslider.create('carousel_container');\ncarousel.start(); // start rotation\n"
   },
   {
    "description": "\nAnimation can be plugged into _thumbslider_.  \n\nFor instance, if you have JQuery in your page, you can create the carousel like so:\n\n",
    "snippet": "var carousel = thumbslider.create('carousel_container', { animator: thumbslider.tweeners.jquery });\n"
   },
   {
    "description": "### Configuration Options\n\n",
    "snippet": "var config = { ... }\nthumbslider.create('my_carousel_id', config);\n"
   },
   {
    "description": "#### Animators\n\nJQuery\n\n",
    "snippet": "{ animator: thumbslider.tweeners.jquery }\n"
   },
   {
    "description": "\nGreenSock (requires TweenMax and ScrollToPlugin)\n\n",
    "snippet": "{ animator: thumbslider.tweeners.gsap }\n"
   },
   {
    "description": "\nNo animation (the default)\n\n",
    "snippet": "{ animator: thumbslider.tweeners.none }\n"
   },
   {
    "description": "\nCustom\n\n",
    "snippet": "{ animator: function(element, time, params) { ... } }\n"
   },
   {
    "description": "#### Icon Controls\n\nThere are four possible values for `config.icons`, and the defaults are\n\n",
    "snippet": "{\n    icons:\n    {\n        top: 'deficon',\n        left: 'deficon',\n        bottom: 'deficon',\n        right: 'deficon'\n    }\n}\n"
   },
   {
    "description": "\nThe default 'deficon' class simply makes black css triangles for the nav controls.\n\nTo use actual icons you can use your favorite icon provider.\n\nFor instance, here is an example using [Font Awesome](http://fontawesome.io/).\n\n",
    "snippet": "{\n    icons:\n    {\n        top: 'fa fa-chevron-up',\n        left: 'fa fa-chevron-left',\n        bottom: 'fa fa-chevron-down',\n        right: 'fa fa-chevron-right',\n    }\n}\n"
   },
   {
    "description": "#### Content Scaling\n\nHTML content can be scaled for either the slide or the thumbnail, and this scaling is specified by element tagname or css classname.\n\nFor instance, to scale all image content items to completely fill the thumbnail,\n\n",
    "snippet": "{ thumbScaleType: { img: 'content-max' } }\n"
   },
   {
    "description": "\nOr, to scale content items with a 'scale-me' class to fit in the slide,\n\n",
    "snippet": "{ slideScaleType: { 'scale-me': 'content-min' } }\n"
   },
   {
    "description": "#### Slide Transitions\n\nYou can specify the transition for slide rotation in the configuration.\n\n",
    "snippet": "{ slideTransition: thumbslider.transitions.xxx }\n"
   },
   {
    "description": "#### Configuring Responsively\n\nThe default responsive setup is\n\n",
    "snippet": "{ responsive: { xs: 480, sm: 768, md: 1024, lg: 1200 } }\n"
   },
   {
    "description": "\nUse responsive labels ('xs', 'sm', etc.) inside other config options to have those values change responsively.\n\n",
    "snippet": "{\n    selectorDisplay: { xs: 'hidden', def: 'transient' },\n    selectorSize: { sm: 0.2, lg: 0.24, def: 0.3 }\n}\n"
   },
   {
    "description": "### Polyfilling\n\nThe polyfill-candidate language features needed by _thumbslider_ include\n\n",
    "snippet": "    Array.isArray\n    Array.prototype.filter\n    Array.prototype.find\n    Array.prototype.forEach\n    Array.prototype.indexOf\n    Array.prototype.map\n    Array.prototype.reduce\n    document.querySelector\n    Element.prototype.classList\n    getComputedStyle\n    Object.assign\n    Object.keys\n    Symbol\n"
   },
   {
    "description": "\nThis makes the `thumbslider` export a function.  Pass this function a callback that will get executed once the polyfills are loaded.\n\n",
    "snippet": "thumbslider(function(ts)\n{\n    // Create carousel instances here\n    ts.create( ... );\n});\n"
   },
   {
    "description": "### Tests\n\n_thumbslider_ uses [Jasmine](https://jasmine.github.io) for testing and [Istanbul](https://www.npmjs.com/package/istanbul) for coverage analysis.\n\nTest coverage is imcomplete at this time.\n\n",
    "snippet": "npm test\n"
   }
  ]
 },
 {
  "package": "tiar",
  "snippets": []
 },
 {
  "package": "timeclockwizard",
  "snippets": []
 },
 {
  "package": "timeconstants",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "var timeconstants = require('timeconstants');\n\nvar tenMilliseconds = 10 * timeconstants.ms;\nvar twoMinuteAndFiveSeconds = 2 * timeconstants.minute + 5 * timeconstants.second;\nvar twelveHours = 12 * timeconstants.hour;\nvar oneDay = timeconstants.day;\nvar oneWeek = timeconstants.week;\n\n// = 1/12th of a year\ntimeconstants.monthApprox;\n\n// = 365.25 days\ntimeconstants.yearApprox;\n"
   }
  ]
 },
 {
  "package": "tmj-pagination",
  "snippets": []
 },
 {
  "package": "toggle-parent",
  "snippets": [
   {
    "description": "## Installation\n\n  With [component](https://github.com/component/component):\n\n",
    "snippet": "$ component install mjlescano/toggle-parent\n"
   },
   {
    "description": "\n",
    "snippet": "var ToggleParent = require('toggle-parent');\n\nvar button = document.querySelector('#dropdown-container button');\n\n// Every time 'button' is pressed, the class 'active' will\n// be toggled on '#dropdown-container'\nvar dropdown = new ToggleParent(button);\n\n// Toggle programatically\ndropdown.toggle()\n"
   }
  ]
 },
 {
  "package": "topolr",
  "snippets": []
 },
 {
  "package": "trainiac-webpack-configs",
  "snippets": []
 },
 {
  "package": "tree-sitter-vue",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "const Parser = require(\"tree-sitter\");\nconst Vue = require(\"tree-sitter-vue\");\n\nconst parser = new Parser();\nparser.setLanguage(Vue);\n\nconst sourceCode = `\n<template>\n  Hello, <a :[key]=\"url\">{{ name }}</a>!\n</template>\n`;\n\nconst tree = parser.parse(sourceCode);\nconsole.log(tree.rootNode.toString());\n// (component\n//   (template_element\n//     (start_tag\n//       (tag_name))\n//       (text)\n//       (element\n//         (start_tag\n//           (tag_name)\n//           (directive_attribute\n//             (directive_name)\n//             (directive_dynamic_argument\n//               (directive_dynamic_argument_value))\n//             (quoted_attribute_value\n//               (attribute_value))))\n//         (interpolation\n//           (raw_text))\n//         (end_tag\n//           (tag_name)))\n//       (text)\n//     (end_tag\n//       (tag_name))))\n"
   }
  ]
 },
 {
  "package": "treeview-multilevel-react",
  "snippets": []
 },
 {
  "package": "typedoc-plugin-npm-externals",
  "snippets": []
 },
 {
  "package": "typeface-rasa",
  "snippets": []
 },
 {
  "package": "typescript-deno",
  "snippets": []
 },
 {
  "package": "unoconv_fixed",
  "snippets": []
 },
 {
  "package": "updot",
  "snippets": []
 },
 {
  "package": "uppercasedong",
  "snippets": []
 },
 {
  "package": "url-encoder-svgbg",
  "snippets": []
 },
 {
  "package": "use-jquery",
  "snippets": []
 },
 {
  "package": "vaire",
  "snippets": [
   {
    "description": "## Usage\n\n``` jsx\nimport React, { Component } from 'react'\nimport Time from 'vaire'\n\nclass Foo extends Component {\n  render () {\n    return <div>\n      This component was rendered <Time dateTime={new Date()} /> ago\n    </div>\n  }\n}\n",
    "snippet": "\nThis will render to something like:\n\n"
   },
   {
    "description": "This component was rendered 1s ago\n",
    "snippet": "\nand will soon update to:\n\n"
   },
   {
    "description": "This component was rendered 2s ago\n",
    "snippet": "\net cetera. A minute later, it will be:\n\n"
   },
   {
    "description": "This component was rendered 1m ago\n",
    "snippet": "\nad infinitum.\n\n### Specifying the time rendering function\n\n``` jsx\nimport React, { Component } from 'react'\nimport Time from 'vaire'\n\nclass Foo extends Component {\n  renderTime (date, now = new Date()) {\n    if (!(date instanceof Date)) {\n      date = new Date(date)\n    }\n\n    return date.getSeconds()\n  }\n\n  render () {\n    return <div>\n      This component was rendered\n      <Time dateTime={new Date()} format={this.renderTime} /> ago\n    </div>\n  }\n}\n"
   },
   {
    "description": "## API\n\nThe `dateTime` prop is required, all others are optional.\n\n``` jsx\n<Time dateTime={/* instanceof Date */}\n      format={/* function (date, now = new Date()), default: shortAgo */}\n      interval={/* Number, default: 1000 */}\n      raw={/* true to omit the <time> wrapper */} />\n",
    "snippet": "\nThe `shortAgo` function is described above. It can be `import`ed for direct use\nor remixing, too:\n\n``` js\nimport { shortAgo } from 'vaire'\n"
   }
  ]
 },
 {
  "package": "validater-max",
  "snippets": []
 },
 {
  "package": "validation-codes",
  "snippets": []
 },
 {
  "package": "validotron",
  "snippets": []
 },
 {
  "package": "vdt%2Ejs",
  "snippets": []
 },
 {
  "package": "videojs-creo-slide",
  "snippets": [
   {
    "description": "### Browserify/CommonJS\n\nWhen using with Browserify, install videojs-creo-slide via npm and `require` the plugin as you would any other module.\n\n",
    "snippet": "var videojs = require('video.js');\n\n// The actual plugin function is exported by this module, but it is also\n// attached to the `Player.prototype`; so, there is no need to assign it\n// to a variable.\nrequire('videojs-creo-slide');\n\nvar player = videojs('my-video');\n\nplayer.creoSlide();\n"
   },
   {
    "description": "### RequireJS/AMD\n\nWhen using with RequireJS (or another AMD library), get the script in whatever way you prefer and `require` the plugin as you normally would:\n\n",
    "snippet": "require(['video.js', 'videojs-creo-slide'], function(videojs) {\n  var player = videojs('my-video');\n\n  player.creoSlide();\n});\n"
   }
  ]
 },
 {
  "package": "vrrv-builder",
  "snippets": [
   {
    "description": "# CLI Usage\nExecute `node_modules/.bin/build --help` to get the actual CLI usage guide.\n",
    "snippet": "Building:\n  --mac, -m, -o, --osx, --macos  Build for MacOS, accepts target list (see\n                                 https://goo.gl/HAnnq8).                 [array]\n  --linux, -l                    Build for Linux, accepts target list (see\n                                 https://goo.gl/O80IL2)                  [array]\n  --win, -w, --windows           Build for Windows, accepts target list (see\n                                 https://goo.gl/dL4i8i)                  [array]\n  --x64                          Build for x64                         [boolean]\n  --ia32                         Build for ia32                        [boolean]\n  --dir                          Build unpacked dir. Useful to test.   [boolean]\n  --extraMetadata, --em          Inject properties to application package.json\n\nPublishing:\n  --publish, -p  Publish artifacts (to GitHub Releases), see\n                 https://goo.gl/WMlr4n\n                           [choices: \"onTag\", \"onTagOrDraft\", \"always\", \"never\"]\n  --draft        Create a draft (unpublished) release                  [boolean]\n  --prerelease   Identify the release as a prerelease                  [boolean]\n\nDeprecated:\n  --platform  The target platform (preferred to use --mac, --win or --linux)\n               [choices: \"mac\", \"osx\", \"win\", \"linux\", \"darwin\", \"win32\", \"all\"]\n  --arch      The target arch (preferred to use --x64 or --ia32)\n                                                 [choices: \"ia32\", \"x64\", \"all\"]\n\nOther:\n  --help     Show help                                                 [boolean]\n  --version  Show version number                                       [boolean]\n\nExamples:\n  build -mwl                build for MacOS, Windows and Linux\n  build --linux deb tar.xz  build deb and tar.xz for Linux\n  build --win --ia32        build for Windows ia32\n  build --em.foo=bar        set application package.json property `foo` to `bar`\n"
   },
   {
    "description": "# Programmatic Usage\nSee `node_modules/electron-builder/out/electron-builder.d.ts`. [Typings](https://github.com/Microsoft/TypeScript/wiki/Typings-for-npm-packages) is supported.\n\n",
    "snippet": "\"use strict\"\n\nconst builder = require(\"electron-builder\")\nconst Platform = builder.Platform\n\n// Promise is returned\nbuilder.build({\n  targets: Platform.MAC.createTarget(),\n  devMetadata: {\n    \"//\": \"build and other properties, see https://goo.gl/5jVxoO\"\n  }\n})\n  .then(() => {\n    // handle result\n  })\n  .catch((error) => {\n    // handle error\n  })\n"
   }
  ]
 },
 {
  "package": "vue-async-everything",
  "snippets": [
   {
    "description": "\n> Vue Component Plugin for asynchronous data and computed properties.\n\n**A Marketdial Project**\n\n<p>\n<a href=\"http://marketdial.com\">\n<img src=\"https://cdn.rawgit.com/marketdial/vue-async-properties/master/marketdial-logo.svg\" alt=\"MarketDial logo\" title=\"MarketDial\" width=\"35%\">\n</a>\n</p>\n\n---\n\n",
    "snippet": "new Vue({\n  props: {\n    articleId: Number\n  },\n  asyncData: {\n    article() {\n      return this.axios.get(`/articles/${this.articleId}`)\n    }\n  },\n\n  data: {\n    query: ''\n  },\n  asyncComputed: {\n    searchResults: {\n      get() {\n        return this.axios.get(`/search/${this.query}`)\n      },\n      watch: 'query'\n      debounce: 500,\n    }\n  }\n})\n"
   },
   {
    "description": "\n",
    "snippet": "// main.js\nimport Vue from 'vue'\n\n// you can use whatever http library you prefer\nimport axios from 'axios'\nimport VueAxios from 'vue-axios'\nVue.use(VueAxios, axios)\n\nVue.axios.defaults.baseURL = '... whatever ...'\n\nimport VueAsyncProperties from 'vue-async-properties'\nVue.use(VueAsyncProperties)\n"
   },
   {
    "description": "## `asyncData`\n\nYou can simply pass a function that returns a promise.\n\n",
    "snippet": "// in component\nnew Vue({\n  props: ['articleId'],\n  asyncData: {\n    // when the component is created\n    // a request will be made to\n    // http://api.example.com/v1/articles/articleId\n    // (or whatever baseURL you've configured)\n    article() {\n      return this.axios.get(`/articles/${this.articleId}`)\n    }\n  },\n})\n"
   },
   {
    "description": "## `asyncComputed`\n\nYou have to provide a `get` function that returns a promise, and a `watch` parameter that's either a [string referring to a property on the vue instance, or a function that refers to the properties you want tracked](https://vuejs.org/v2/api/#vm-watch).\n\n",
    "snippet": "// in component\nnew Vue({\n  data: {\n    query: ''\n  },\n  asyncComputed: {\n    // whenever query changes,\n    // a request will be made to\n    // http://api.example.com/v1/search/articleId\n    // (or wherever)\n    // debounced by 1000 miliseconds\n    searchResults: {\n      // the function that returns a promise\n      get() {\n        return this.axios.get(`/search/${this.query}`)\n      },\n\n      // the thing to watch for changes\n      watch: 'query'\n      // ... or ...\n      watch() {\n        // do this if you need to watch multiple things\n        this.query\n      }\n    }\n  }\n})\n"
   },
   {
    "description": "## Debouncing\n\nIt's always a good idea to debounce asynchronous functions that rely on user input. You can configure this both globally and at the property level.\n\nBy default, anything you pass to `debounce` only applies to `asyncComputed`, since it's the only one that directly relies on input.\n\n",
    "snippet": "// global configuration\nVue.use(VueAsyncProperties, {\n  // if the value is just a number, it's used as the wait time\n  debounce: 500,\n\n  // you can pass an object for more complex situations\n  debounce: {\n    wait: 500,\n\n    // these are the same options used in lodash debounce\n    // https://lodash.com/docs/#debounce\n    leading: false, // default\n    trailing: true, // default\n    maxWait: null // default\n  }\n})\n\n// property level configuration\nnew Vue({\n  asyncComputed: {\n    searchResults: {\n      get() { /* ... */ },\n      watch: '...'\n      // this will be 1000\n      // instead of the globally configured 500\n      debounce: 1000\n    }\n  }\n})\n"
   },
   {
    "description": "\nIt is also allowed to pass `null` to debounce, to specify that no debounce should be applied. If this is done, `property$pending`, `property$cancel`, and `property$now` will not exist. The same rules that apply to other options holds here; the global setting will set all components, but it can be overridden by the local settings.\n\n\n",
    "snippet": "// no components will debounce\nVue.use(VueAsyncProperties, {\n  debounce: null\n})\n\n// just this component won't have a debounce\nnew Vue({\n  asyncComputed: {\n    searchResults: {\n      get() { /* ... */ },\n      watch: '...'\n      debounce: null\n\n      // this however would debounce,\n      // since the local overrides the global\n      debounce: 500\n    }\n  }\n})\n"
   },
   {
    "description": "### `watchClosely`\n\nSometimes the method should debounce when some values change (things like key inputs or anything that might change rapidly), and *not debounce* when other values change (things like boolean switches that are more discrete, or things that are only changed programmatically).\n\nFor these situations, you can set up a separate watcher called `watchClosely` that will trigger an immediate, undebounced invocation of the `asyncComputed`.\n\n",
    "snippet": "new Vue({\n  data: {\n    query: '',\n    includeInactiveResults: false\n  },\n  asyncComputed: {\n    searchResults: {\n      get() {\n        if (this.includeInactiveResults)\n          return this.axios.get(`/search/all/${this.query}`)\n        else\n          return this.axios.get(`/search/${this.query}`)\n      },\n\n      // the normal, debounced watcher\n      watch: 'query',\n\n      // whenever includeInactiveResults changes,\n      // the method will be invoked immediately\n      // without any debouncing\n      watchClosely: 'includeInactiveResults'\n    }\n  }\n})\n"
   },
   {
    "description": "\nObviously, if you pass `debounce: null`, then `watchClosely` will be ignored, since invoking immediately without any debounce is the default behavior.\n\nAlso, if you only pass `watchClosely`, that will automatically infer that debouncing should never be done.\n\n",
    "snippet": "new Vue({\n  data: {\n    showOldPosts: false\n  },\n  asyncComputed: {\n    searchResults: {\n      // a change to showOldPosts\n      // should always immediately\n      // retrigger a request\n      watchClosely: 'showOldPosts',\n      get() {\n        if (this.showOldPosts) return this.axios.get('/posts')\n        else return this.axios.get('/posts/new')\n      }\n    }\n  }\n})\n"
   },
   {
    "description": "## Returning a Value Rather Than a Promise\n\nIf you don't want a request to be performed, you can directly return a value instead of a promise.\n\n",
    "snippet": "new Vue({\n  props: ['articleId'],\n  asyncData: {\n    article: {\n      get() {\n        // if you return null\n        // the default will be used\n        // and no request will be performed\n        if (!this.articleId) return null\n\n        // ... or ...\n\n        // doing this will directly set the value\n        // and no request will be performed\n        if (!this.articleId) return {\n          title: \"No Article ID!\",\n          content: \"There's nothing there.\"\n        }\n        else\n          return this.axios.get(`/articles/${this.articleId}`)\n      },\n      // this will be used if null or undefined\n      // are returned either by the get method\n      // or by the request it returns\n      // or if there's an error\n      default: {\n        title: \"Default Title\",\n        content: \"Default Content\"\n      }\n    }\n  }\n})\n"
   },
   {
    "description": "## Lazy and Eager\n\n`asyncData` allows the `lazy` param, which tells it to not perform its request immediately on creation, and instead set the property as `null` or the default if you've provided one. It will instead wait for the `$refresh` method to be called.\n\n",
    "snippet": "new Vue({\n  asyncData: {\n    article: {\n      get() { /* ... */ },\n      // won't be triggered until article$refresh is called\n      lazy: true, // default 'false'\n\n      // if a default is provided,\n      // it will be used until article$refresh is called\n      default: {\n        title: \"Default Title\",\n        content: \"Default content\"\n      }\n    }\n  }\n})\n"
   },
   {
    "description": "\n`asyncComputed` allows an `eager` param, which tells it to immediately perform its request on creation, rather than waiting for some user input.\n\n",
    "snippet": "new Vue({\n  data: {\n    query: 'initial query'\n  },\n  asyncComputed: {\n    searchResults: {\n      get() { /* ... */ },\n      watch: 'query',\n      // will be triggered right away with 'initial query'\n      eager: true // default 'false'\n    }\n  }\n})\n"
   },
   {
    "description": "## Transformation Functions\n\nPass a `transform` function if you have some processing you'd always like to do with request results. This is convenient if you'd rather not chain `then` onto promises. You can provide this globally and locally.\n\n**Note:** this function will only be called if a request is actually made. So if you directly return a value rather than a promise from your `get` function, `transform` won't be called.\n\n",
    "snippet": "Vue.use(VueAsyncProperties, {\n  // this is the default\n  transform(result) {\n    return result.data\n  }\n\n  // ... or ...\n  // doing this will prevent any transforms\n  // from being applied in any properties\n  transform: null\n})\n\nnew Vue({\n  asyncData: {\n    article: {\n      get() { /* ... */ },\n      // this will override the global transform\n      transform(result) {\n        return doSomeTransforming(result)\n      },\n\n      // ... or ...\n      // doing this will prevent any transforms\n      // from being applied to this property\n      transform: null\n    }\n  }\n})\n"
   },
   {
    "description": "## Pagination\n\nNormal pagination is easy with this library, you just need to use some sort of limit and offset in your requests.\n\nWith `asyncData`:\n\n",
    "snippet": "new Vue({\n  data() {\n    return {\n      pageSize: 10,\n      pageNumber: 0\n    }\n  },\n  asyncData: {\n    posts() {\n      return this.axios.get(`/posts`, {\n        params: {\n          limit: this.pageSize,\n          offset: this.pageSize * this.pageNumber,\n        }\n      })\n    }\n  },\n  methods: {\n    goToPage(page) {\n      this.pageNumber = page\n      this.posts$refresh()\n    }\n  }\n})\n"
   },
   {
    "description": "\n... and with `asyncComputed`:\n\n",
    "snippet": "const pageSize = 10,\nnew Vue({\n  data() {\n    return {\n      pageNumber: 0\n    }\n  },\n  asyncComputed: {\n    posts: {\n      get() {\n        return this.axios.get(`/posts`, {\n          params: {\n            limit: pageSize,\n            offset: pageSize * this.pageNumber,\n          }\n        })\n      },\n      watchClosely: 'pageNumber'\n    }\n  }\n})\n"
   },
   {
    "description": "## Load More\n\nDoing a \"load more\" is interesting though, since you need to append new results onto the old ones.\n\nTo make a load more situation, pass a `more` option to your property, giving a method that gets more results to add to the old ones. A `$more` method will be added to your component that you can call whenever you want to get more results.\n\n\n",
    "snippet": "const pageSize = 5\nnew Vue({\n  data() {\n    return { filter: '' }\n  },\n\n  asyncData: {\n    posts: {\n      get() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n          }\n        })\n      },\n\n      // this method will get results that will be appended to the old ones\n      // it's triggered by the `posts$more` method\n      more() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n            offset: this.posts.length,\n          }\n        })\n      }\n\n      // since sometimes the way you add new results\n      // to the property won't be a basic array concat\n      // you can pass a static concat method that\n      // returns a collection with the new results added to it\n      more: {\n        // this is the default\n        concat: (posts, newPosts) => posts.concat(newPosts),\n        get() {\n          const pageSize = 5\n          return this.axios.get(`/posts/${this.filter}`, {\n            params: {\n              limit: pageSize,\n              offset: this.posts.length,\n            }\n          })\n        }\n      }\n    }\n\n  }\n})\n"
   },
   {
    "description": "\nFor `asyncComputed`, the `watch` and `watchClosely` parameters will still trigger a complete reset of the collection. Only the `$more` method appends new results.\n\n",
    "snippet": "const pageSize = 5\nnew Vue({\n  data() {\n    return { filter: '' }\n  },\n\n  asyncComputed: {\n    posts: {\n\n      get() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n          }\n        })\n      },\n      watch: 'filter',\n\n      more() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n            offset: this.posts.length,\n          }\n        })\n      }\n\n    }\n  }\n})\n"
   },
   {
    "description": "### `$more` Returns Last Response\n\nIf you need to do some logic based on what the last load more request returned, you can wrap the `$more` method and get the last response the `$more` received. This returned value is the raw response, without the `transform` function called on it.\n\n\n",
    "snippet": "const pageSize = 10\nnew Vue({\n  data() {\n    return { noMoreResults: false }\n  },\n\n  asyncData: {\n    posts: {\n      get() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n          }\n        })\n      },\n\n      more() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n            offset: this.posts.length,\n          }\n        })\n      }\n    }\n  },\n  async moreHandler() {\n    // `$more` handles appending the results,\n    // so don't worry about doing that here\n    // this just allows you to inspect the last result\n    let lastResponse = await this.posts$more()\n\n    this.noMoreResults = lastResponse.data.length < pageSize\n  }\n})\n"
   },
   {
    "description": "### Watching For Reset Events\n\nSince you might need to be notified when the collection resets based on a `watch` or `watchClosely`, you can watch for a `propertyName$reset` event. It passes the response that came for the reset.\n\n",
    "snippet": "const pageSize = 5\nnew Vue({\n  data() {\n    return {\n      noResultsReturned: false\n    }\n  },\n\n  asyncData: {\n    posts: {\n      get() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n          }\n        })\n      },\n\n      more() {\n        return this.axios.get(`/posts/${this.filter}`, {\n          params: {\n            limit: pageSize,\n            offset: this.posts.length,\n          }\n        })\n      }\n    }\n  },\n\n  created() {\n    // whenever a watch or watchClosely resets the collection,\n    // it will $emit this event\n    this.$on('posts$reset', (resettingResponse) => {\n\n      // here you can perform whatever logic\n      // you need to with the resetttingResponse\n\n      if (resettingResponse.data.length == 0) {\n        this.noResultsReturned = true\n      }\n\n      this.resetScoller() // or whatever\n\n    })\n  }\n})\n"
   },
   {
    "description": "## Error Handling\n\nYou can set up error handling, either globally (maybe you have some sort of notification tray or alerts), or at the property level.\n\n",
    "snippet": "Vue.use(VueAsyncProperties, {\n  error(error) {\n    Notification.error({\n      title: \"error\",\n      message: error.message,\n    })\n  }\n})\n\nnew Vue({\n  asyncData: {\n    article: {\n      get() { /* ... */ },\n\n      // this will override the error handler\n      error(error) {\n        this.doErrorStuff(error)\n      }\n    }\n  }\n})\n"
   },
   {
    "description": "\nThere is a global default, which simply logs the error to the console:\n\n",
    "snippet": "Vue.use(VueAsyncProperties, {\n  error(error) {\n    console.error(error)\n  }\n})\n"
   },
   {
    "description": "### Different naming for Meta Properties\n\nThe default naming strategy for the meta properties like `loading` and `pending` is `propName$metaName`. You may prefer a different naming strategy, and you can pass a function for a different one in the global config.\n\n",
    "snippet": "Vue.use(VueAsyncProperties, {\n  // for \"article\" and \"loading\"\n  // \"article__Loading\"\n  meta: (propName, metaName) =>\n    `${propName}__${myCapitalize(metaName)}`,\n\n  // ... or ...\n  // \"$loading_article\"\n  meta: (propName, metaName) =>\n    '$' + metaName + '_' + propName,\n\n  // the default is:\n  meta: (propName, metaName) =>\n    `${propName}$${metaName}`,\n})\n"
   }
  ]
 },
 {
  "package": "vue-bem-cn",
  "snippets": [
   {
    "description": "### Q: I will want use another delimiters for BEM entities. And still I need namespances.\n\nNo problem. You can set your settings object with `Vue.use()` as second argument:\n\n",
    "snippet": "  import Vue from 'vue';\n  import vueBemCn from 'vue-bem-cn';\n\n  // default delimiters settings\n  const bemConfig = {\n    delimiters: {\n      ns: '', // namespace\n      el: '__', // element delimeter\n      mod: '--', // modifier delimeter\n      modVal: '-', // value delimeter for modifier\n    }\n  }\n\n  Vue.use(vueBemCn, bemConfig);\n\n  new Vue({...});\n"
   },
   {
    "description": "### Q: I will want use another name for `b` method.\n\nJust change `methodName` option in config:\n\n",
    "snippet": "  import Vue from 'vue';\n  import vueBemCn from 'vue-bem-cn';\n\n  const bemConfig = {\n    methodName: 'bem',\n  }\n\n  Vue.use(vueBemCn, bemConfig);\n\n  new Vue({...});\n"
   },
   {
    "description": "### Q: What about converting camelCase to kebab-case?\n\nCheck `hyphenate` option:\n\n",
    "snippet": "  import Vue from 'vue';\n  import vueBemCn from 'vue-bem-cn';\n\n  const bemConfig = {\n    hyphenate: true,\n  }\n\n  Vue.use(vueBemCn, bemConfig);\n\n  new Vue({...});\n"
   },
   {
    "description": "### Default settings\n\n",
    "snippet": "{\n  hyphenate: false,\n  methodName: 'b',\n  delimiters: {\n    ns: '',\n    el: '__',\n    mod: '--',\n    modVal: '-'\n  }\n}\n"
   },
   {
    "description": "\n* `hyphenate: boolean` - hyphenation the resulting class name\n",
    "snippet": "// { hyphenate: true }\n\nb({ hasFocus: true }) // block--has-focus\n"
   },
   {
    "description": "\n* `methodName: string` - name of the method for generating the class name\n",
    "snippet": "// { methodName: 'bem' }\n\nb('elem') // [Vue warn]: Property or method \"b\" is not defined...\nbem('elem') // block__elem\n"
   },
   {
    "description": "\n* `delimiters: Object<string>` - delimiters for BEM entities\n",
    "snippet": "// { delimiters: { ns: 'b-', modVal: '_'} }\n\nb({ mod: 'val' }) // b-block b-block--mod_val\n"
   }
  ]
 },
 {
  "package": "vue-bulma-tags",
  "snippets": []
 },
 {
  "package": "vue-components-container",
  "snippets": []
 },
 {
  "package": "vue-contentful",
  "snippets": []
 },
 {
  "package": "vue-nested-list",
  "snippets": [
   {
    "description": "## Usage\nRegister the component, for example globally:\n\n",
    "snippet": "const VueNestedList = require('vue-nested-list').NestedList;\nVue.component('nested-list', VueNestedList);\n"
   },
   {
    "description": "\nNow you can use in Vue.js templates. Let's say you have `person` object defined as a property on the data object:\n",
    "snippet": "var vue = new Vue({\n\tel: \"#app\",\n\tdata: {\n\t\tperson: {\n\t\t\tname: \"John Smith\",\n\t\t\tage: 25,\n\t\t\thobbies: [\"coding\", \"swimming\", \"whisky\"],\n\t\t\tcompetencies: {\n\t\t\t\t\"javascript\": \"strong\",\n\t\t\t\t\"vue.js\": \"good\",\n\t\t\t\t\"angularjs\": \"poor\"\n\t\t\t}\n\t\t},\n\t}\n})\n"
   },
   {
    "description": "\nYou can now use the component in the Vue template:\n\n",
    "snippet": "<h1>{{person.name}}</h1>\n<nested-list v-bind:content=\"person\"></nested-list>\n"
   },
   {
    "description": "\nAnd the data will be output as `dl` and `ul` elements:\n\n",
    "snippet": "<h1>John Smith</h1>\n<dl>\n\t<dt>name</dt> <dd><span>John Smith</span></dd>\n\t<dt>age</dt> <dd><span>25</span></dd>\n\t<dt>hobbies</dt> <dd>\n\t\t<ul>\n\t\t\t<li><span>coding</span></li>\n\t\t\t<li><span>swimming</span></li>\n\t\t\t<li><span>whisky</span></li>\n\t\t</ul>\n\t</dd>\n\t<dt>competencies</dt> <dd>\n\t\t<dl>\n\t\t\t<dt>javascript</dt> <dd><span>strong</span></dd>\n\t\t\t<dt>vue.js</dt> <dd><span>good</span></dd>\n\t\t\t<dt>angularjs</dt> <dd><span>poor</span></dd>\n\t\t</dl>\n\t</dd>\n</dl>\n"
   },
   {
    "description": "\nTo get nicely nested output across browsers when rendered, you will need a little CSS for the definition list, something like:\n\n",
    "snippet": "dt {\n\tfont-weight: bold;\n}\ndt:after {\n\tcontent: \":\"\n}\ndd {\n\tmargin-left: 2em;\n}\n"
   },
   {
    "description": "## Install\n\n",
    "snippet": "$ npm install vue-nested-list\n"
   }
  ]
 },
 {
  "package": "vue-simple-breakpoints",
  "snippets": []
 },
 {
  "package": "vue-vantext",
  "snippets": []
 },
 {
  "package": "vue-yh1",
  "snippets": []
 },
 {
  "package": "vuex-localstorage",
  "snippets": [
   {
    "description": "## Usage\n\n``` js\nimport { Store } from 'vuex'\nimport createPersist, { createStorage } from 'vuex-localstorage'\n\nnew Store({\n  plugins: [createPersist({\n    namespace: 'namespace-for-state'\n    initialState: {},\n    // ONE_WEEK\n    expires: 7 * 24 * 60 * 60 * 1e3\n  })]\n}\n",
    "snippet": "\n[Live Example at PLATO](https://github.com/platojs/plato/blob/master/src/modules/persist/index.js)\n\n## Development Setup\n\n``` bash\n# install deps\nnpm install\n\n# build dist files\nnpm run build\n\n# lint & run all tests\nnpm test\n\n# run unit tests only\nnpm run unit\n"
   }
  ]
 },
 {
  "package": "wasm-themis",
  "snippets": [
   {
    "description": "### Installation\n\nFirst, install the latest version of WasmThemis:\n\n",
    "snippet": "npm install wasm-themis\n"
   }
  ]
 },
 {
  "package": "webotest",
  "snippets": []
 },
 {
  "package": "webpack-at-war",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "const WarPlugin = require('webpack-at-war');\nconst package = require('./package.json');\n\nplugins: [\n  ...\n  new WarPlugin({\n    bundleName: `${ package.name.toLowerCase() }.war`,\n    implementationTitle: package.name.toLowerCase(),\n    implementationVersion: package.version,\n  }),\n]\n"
   }
  ]
 },
 {
  "package": "weex-http",
  "snippets": [
   {
    "description": "## Installing\n\n",
    "snippet": "npm i weex-http --save-dev\n# or\nyarn add weex-http --dev\n"
   },
   {
    "description": "## Example\n\nPerforming a GET request\n\n",
    "snippet": "import weexHttp from 'weex-http'\n\nweexHttp.get('/user', {\n    ID: 12345\n})\n.then(function (response) {\n    console.log(response)\n})\n.catch(function (error) {\n    console.log(error)\n})\n"
   },
   {
    "description": "\nPerforming a POST request\n\n",
    "snippet": "weexHttp.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n})\n.then(function (response) {\n    console.log(response);\n})\n.catch(function (error) {\n    console.log(error);\n})\n"
   },
   {
    "description": "## Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\nweexHttp.create([config])\n\n",
    "snippet": "var instance = weexHttp.create({\n    baseURL: 'https://some-domain.com/api/',\n    timeout: 1000,\n    headers: {'X-Custom-Header': 'foobar'}\n})\n"
   }
  ]
 },
 {
  "package": "weld-next",
  "snippets": [
   {
    "description": "##### Router Events\n\nYou can also listen to different events happening inside the Router.\nHere's a list of supported events:\n\n- `routeChangeStart(url)` - Fires when a route starts to change\n- `routeChangeComplete(url)` - Fires when a route changed completely\n- `routeChangeError(err, url)` - Fires when there's an error when changing routes\n- `beforeHistoryChange(url)` - Fires just before changing the browser's history\n- `hashChangeStart(url)` - Fires when the hash will change but not the page\n- `hashChangeComplete(url)` - Fires when the hash has changed but not the page\n\n> Here `url` is the URL shown in the browser. If you call `Router.push(url, as)` (or similar), then the value of `url` will be `as`.\n\nHere's how to properly listen to the router event `routeChangeStart`:\n\n",
    "snippet": "const handleRouteChange = url => {\n  console.log('App is changing to: ', url)\n}\n\nRouter.events.on('routeChangeStart', handleRouteChange)\n"
   },
   {
    "description": "\nIf you no longer want to listen to that event, you can unsubscribe with the `off` method:\n\n",
    "snippet": "Router.events.off('routeChangeStart', handleRouteChange)\n"
   },
   {
    "description": "\nIf a route load is cancelled (for example by clicking two links rapidly in succession), `routeChangeError` will fire. The passed `err` will contain a `cancelled` property set to `true`.\n\n",
    "snippet": "Router.events.on('routeChangeError', (err, url) => {\n  if (err.cancelled) {\n    console.log(`Route to ${url} was cancelled!`)\n  }\n})\n"
   },
   {
    "description": "##### Shallow Routing\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/with-shallow-routing\">Shallow Routing</a></li>\n  </ul>\n</details></p>\n\nShallow routing allows you to change the URL without running `getInitialProps`. You'll receive the updated `pathname` and the `query` via the `url` prop of the same page that's loaded, without losing state.\n\nYou can do this by invoking either `Router.push` or `Router.replace` with the `shallow: true` option. Here's an example:\n\n",
    "snippet": "// Current URL is \"/\"\nconst href = '/?counter=10'\nconst as = href\nRouter.push(href, as, { shallow: true })\n"
   },
   {
    "description": "\nNow, the URL is updated to `/?counter=10`. You can see the updated URL with `this.props.router.query` inside the `Component` (make sure you are using [`withRouter`](#using-a-higher-order-component) around your `Component` to inject the `router` prop).\n\nYou can watch for URL changes via [`componentDidUpdate`](https://reactjs.org/docs/react-component.html#componentdidupdate) hook as shown below:\n\n",
    "snippet": "componentDidUpdate(prevProps) {\n  const { pathname, query } = this.props.router\n  // verify props have changed to avoid an infinite loop\n  if (query.id !== prevProps.router.query.id) {\n    // fetch data based on the new query\n  }\n}\n"
   },
   {
    "description": "\nThis example makes `/a` resolve to `./pages/b`, and `/b` resolve to `./pages/a`:\n\n",
    "snippet": "// This file doesn't go through babel or webpack transformation.\n// Make sure the syntax and sources this file requires are compatible with the current node version you are running\n// See https://github.com/zeit/next.js/issues/1245 for discussions on Universal Webpack or universal Babel\nconst { createServer } = require('http')\nconst { parse } = require('url')\nconst next = require('weld-next')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer((req, res) => {\n    // Be sure to pass `true` as the second argument to `url.parse`.\n    // This tells it to parse the query portion of the URL.\n    const parsedUrl = parse(req.url, true)\n    const { pathname, query } = parsedUrl\n\n    if (pathname === '/a') {\n      app.render(req, res, '/b', query)\n    } else if (pathname === '/b') {\n      app.render(req, res, '/a', query)\n    } else {\n      handle(req, res, parsedUrl)\n    }\n  }).listen(3000, err => {\n    if (err) throw err\n    console.log('> Ready on http://localhost:3000')\n  })\n})\n"
   },
   {
    "description": "#### Disabling file-system routing\nBy default, `Next` will serve each file in `/pages` under a pathname matching the filename (eg, `/pages/some-file.js` is served at `site.com/some-file`.\n\nIf your project uses custom routing, this behavior may result in the same content being served from multiple paths, which can present problems with SEO and UX.\n\nTo disable this behavior & prevent routing based on files in `/pages`, simply set the following option in your `next.config.js`:\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  useFileSystemPublicRoutes: false\n}\n"
   },
   {
    "description": "#### Dynamic assetPrefix\n\nSometimes we need to set the `assetPrefix` dynamically. This is useful when changing the `assetPrefix` based on incoming requests.\nFor that, we can use `app.setAssetPrefix`.\n\nHere's an example usage of it:\n\n",
    "snippet": "const next = require('weld-next')\nconst micro = require('micro')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handleNextRequests = app.getRequestHandler()\n\napp.prepare().then(() => {\n  const server = micro((req, res) => {\n    // Add assetPrefix support based on the hostname\n    if (req.headers.host === 'my-app.com') {\n      app.setAssetPrefix('http://cdn.com/myapp')\n    } else {\n      app.setAssetPrefix('')\n    }\n\n    handleNextRequests(req, res)\n  })\n\n  server.listen(port, (err) => {\n    if (err) {\n      throw err\n    }\n\n    console.log(`> Ready on http://localhost:${port}`)\n  })\n})\n\n"
   },
   {
    "description": "### Custom `<App>`\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/with-app-layout\">Using `_app.js` for layout</a></li></ul>\n  <ul><li><a href=\"./examples/with-componentdidcatch\">Using `_app.js` to override `componentDidCatch`</a></li></ul>\n</details></p>\n\nNext.js uses the `App` component to initialize pages. You can override it and control the page initialization. Which allows you to do amazing things like:\n\n- Persisting layout between page changes\n- Keeping state when navigating pages\n- Custom error handling using `componentDidCatch`\n- Inject additional data into pages (for example by processing GraphQL queries)\n\nTo override, create the `./pages/_app.js` file and override the App class as shown below:\n\n",
    "snippet": "import React from 'react'\nimport App, { Container } from 'next/app'\n\nexport default class MyApp extends App {\n  static async getInitialProps({ Component, router, ctx }) {\n    let pageProps = {}\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx)\n    }\n\n    return { pageProps }\n  }\n\n  render () {\n    const { Component, pageProps } = this.props\n\n    return (\n      <Container>\n        <Component {...pageProps} />\n      </Container>\n    )\n  }\n}\n"
   },
   {
    "description": "### Custom configuration\n\nFor custom advanced behavior of Next.js, you can create a `next.config.js` in the root of your project directory (next to `pages/` and `package.json`).\n\nNote: `next.config.js` is a regular Node.js module, not a JSON file. It gets used by the Next server and build phases, and not included in the browser build.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  /* config options here */\n}\n"
   },
   {
    "description": "\nOr use a function:\n\n",
    "snippet": "module.exports = (phase, {defaultConfig}) => {\n  //\n  // https://github.com/zeit/\n  return {\n    /* config options here */\n  }\n}\n"
   },
   {
    "description": "\n`phase` is the current context in which the configuration is loaded. You can see all phases here: [constants](./lib/constants.js)\nPhases can be imported from `next/constants`:\n\n",
    "snippet": "const {PHASE_DEVELOPMENT_SERVER} = require('weld-next/constants')\nmodule.exports = (phase, {defaultConfig}) => {\n  if(phase === PHASE_DEVELOPMENT_SERVER) {\n    return {\n      /* development only config options here */\n    }\n  }\n\n  return {\n    /* config options for all phases except development here */\n  }\n}\n"
   },
   {
    "description": "#### Setting a custom build directory\n\nYou can specify a name to use for a custom build directory. For example, the following config will create a `build` folder instead of a `.next` folder. If no configuration is specified then next will create a `.next` folder.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  distDir: 'build'\n}\n"
   },
   {
    "description": "#### Disabling etag generation\n\nYou can disable etag generation for HTML pages depending on your cache strategy. If no configuration is specified then Next will generate etags for every page.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  generateEtags: false\n}\n"
   },
   {
    "description": "#### Configuring the onDemandEntries\n\nNext exposes some options that give you some control over how the server will dispose or keep in memories pages built:\n\n",
    "snippet": "module.exports = {\n  onDemandEntries: {\n    // period (in ms) where the server will keep pages in the buffer\n    maxInactiveAge: 25 * 1000,\n    // number of pages that should be kept simultaneously without being disposed\n    pagesBufferLength: 2,\n  }\n}\n"
   },
   {
    "description": "#### Configuring extensions looked for when resolving pages in `pages`\n\nAimed at modules like [`@zeit/next-typescript`](https://github.com/zeit/next-plugins/tree/master/packages/next-typescript), that add support for pages ending in `.ts`. `pageExtensions` allows you to configure the extensions looked for in the `pages` directory when resolving pages.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  pageExtensions: ['jsx', 'js']\n}\n"
   },
   {
    "description": "#### Configuring the build ID\n\nNext.js uses a constant generated at build time to identify which version of your application is being served. This can cause problems in multi-server deployments when `next build` is ran on every server. In order to keep a static build id between builds you can provide the `generateBuildId` function:\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  generateBuildId: async () => {\n    // For example get the latest git commit hash here\n    return 'my-build-id'\n  }\n}\n"
   },
   {
    "description": "### Customizing webpack config\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/with-webpack-bundle-analyzer\">Custom webpack bundle analyzer</a></li></ul>\n</details></p>\n\nSome commonly asked for features are available as modules:\n\n- [@zeit/next-css](https://github.com/zeit/next-plugins/tree/master/packages/next-css)\n- [@zeit/next-sass](https://github.com/zeit/next-plugins/tree/master/packages/next-sass)\n- [@zeit/next-less](https://github.com/zeit/next-plugins/tree/master/packages/next-less)\n- [@zeit/next-preact](https://github.com/zeit/next-plugins/tree/master/packages/next-preact)\n- [@zeit/next-typescript](https://github.com/zeit/next-plugins/tree/master/packages/next-typescript)\n\n*Warning: The `webpack` function is executed twice, once for the server and once for the client. This allows you to distinguish between client and server configuration using the `isServer` property*\n\nMultiple configurations can be combined together with function composition. For example:\n\n",
    "snippet": "const withTypescript = require('@zeit/next-typescript')\nconst withSass = require('@zeit/next-sass')\n\nmodule.exports = withTypescript(withSass({\n  webpack(config, options) {\n    // Further custom configuration here\n    return config\n  }\n}))\n"
   },
   {
    "description": "\nIn order to extend our usage of `webpack`, you can define a function that extends its config via `next.config.js`.\n\n",
    "snippet": "// next.config.js is not transformed by Babel. So you can only use javascript features supported by your version of Node.js.\n\nmodule.exports = {\n  webpack: (config, { buildId, dev, isServer, defaultLoaders }) => {\n    // Perform customizations to webpack config\n    // Important: return the modified config\n    return config\n  },\n  webpackDevMiddleware: config => {\n    // Perform customizations to webpack dev middleware config\n    // Important: return the modified config\n    return config\n  }\n}\n"
   },
   {
    "description": "\nThe second argument to `webpack` is an object containing properties useful when customing the WebPack configuration:\n\n- `buildId` - `String` the build id used as a unique identifier between builds\n- `dev` - `Boolean` shows if the compilation is done in development mode\n- `isServer` - `Boolean` shows if the resulting configuration will be used for server side (`true`), or client size compilation (`false`).\n- `defaultLoaders` - `Object` Holds loader objects Next.js uses internally, so that you can use them in custom configuration\n  - `babel` - `Object` the `babel-loader` configuration for Next.js.\n  - `hotSelfAccept` - `Object` the `hot-self-accept-loader` configuration. This loader should only be used for advanced use cases. For example [`@zeit/next-typescript`](https://github.com/zeit/next-plugins/tree/master/packages/next-typescript) adds it for top-level typescript pages.\n\nExample usage of `defaultLoaders.babel`: \n\n",
    "snippet": "// Example next.config.js for adding a loader that depends on babel-loader\n// This source was taken from the @zeit/next-mdx plugin source: \n// https://github.com/zeit/next-plugins/blob/master/packages/next-mdx\nmodule.exports = {\n  webpack: (config, {}) => {\n    config.module.rules.push({\n      test: /\\.mdx/,\n      use: [\n        options.defaultLoaders.babel,\n        {\n          loader: '@mdx-js/loader',\n          options: pluginOptions.options\n        }\n      ]\n    })\n\n    return config\n  }\n}\n"
   },
   {
    "description": "### Exposing configuration to the server / client side\n\nThe `next/config` module gives your app access to runtime configuration stored in your `next.config.js`. Place any server-only runtime config under a `serverRuntimeConfig` property and anything accessible to both client and server-side code under `publicRuntimeConfig`.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  serverRuntimeConfig: { // Will only be available on the server side\n    mySecret: 'secret'\n  },\n  publicRuntimeConfig: { // Will be available on both server and client\n    staticFolder: '/static',\n    mySecret: process.env.MY_SECRET // Pass through env variables\n  }\n}\n"
   },
   {
    "description": "\n",
    "snippet": "// pages/index.js\nimport getConfig from 'next/config'\n// Only holds serverRuntimeConfig and publicRuntimeConfig from next.config.js nothing else.\nconst {serverRuntimeConfig, publicRuntimeConfig} = getConfig()\n\nconsole.log(serverRuntimeConfig.mySecret) // Will only be available on the server side\nconsole.log(publicRuntimeConfig.staticFolder) // Will be available on both server and client\n\nexport default () => <div>\n  <img src={`${publicRuntimeConfig.staticFolder}/logo.png`} alt=\"logo\" />\n</div>\n"
   },
   {
    "description": "### CDN support with Asset Prefix\n\nTo set up a CDN, you can set up the `assetPrefix` setting and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\n",
    "snippet": "const isProd = process.env.NODE_ENV === 'production'\nmodule.exports = {\n  // You may only need to add assetPrefix in the production.\n  assetPrefix: isProd ? 'https://cdn.mydomain.com' : ''\n}\n"
   },
   {
    "description": "### Usage\n\nSimply develop your app as you normally do with Next.js. Then run:\n\n",
    "snippet": "next build\nnext export\n"
   },
   {
    "description": "\nBy default `next export` doesn't require any configuration. It will generate a default `exportPathMap` containing the routes to pages inside the `pages` directory. This default mapping is available as `defaultPathMap` in the example below. \n\nIf your application has dynamic routes you can add a dynamic `exportPathMap` in `next.config.js`.\nThis function is asynchronous and gets the default `exportPathMap` as a parameter.\n\n",
    "snippet": "// next.config.js\nmodule.exports = {\n  exportPathMap: async function (defaultPathMap) {\n    return {\n      '/': { page: '/' },\n      '/about': { page: '/about' },\n      '/readme.md': { page: '/readme' },\n      '/p/hello-nextjs': { page: '/post', query: { title: 'hello-nextjs' } },\n      '/p/learn-nextjs': { page: '/post', query: { title: 'learn-nextjs' } },\n      '/p/deploy-nextjs': { page: '/post', query: { title: 'deploy-nextjs' } }\n    }\n  }\n}\n"
   },
   {
    "description": "### Copying custom files\n\nIn case you have to copy custom files like a robots.txt or generate a sitemap.xml you can do this inside of `exportPathMap`.\n`exportPathMap` gets a few contextual parameter to aid you with creating/copying files: \n\n- `dev` - `true` when `exportPathMap` is being called in development. `false` when running `next export`. In development `exportPathMap` is used to define routes and behavior like copying files is not required.\n- `dir` - Absolute path to the project directory\n- `outDir` - Absolute path to the `out` directory (configurable with `-o` or `--outdir`). When `dev` is `true` the value of `outDir` will be `null`.\n- `distDir` - Absolute path to the `.next` directory (configurable using the `distDir` config key)\n- `buildId` - The buildId the export is running for\n\n",
    "snippet": "// next.config.js\nconst fs = require('fs')\nconst { join } = require('path')\nconst { promisify } = require('util')\nconst copyFile = promisify(fs.copyFile)\n\nmodule.exports = {\n  exportPathMap: async function (defaultPathMap, {dev, dir, outDir, distDir, buildId}) {\n    if (dev) {\n      return defaultPathMap\n    }\n    // This will copy robots.txt from your project root into the out directory\n    await copyFile(join(dir, 'robots.txt'), join(outDir, 'robots.txt'))\n    return defaultPathMap\n  }\n}\n"
   }
  ]
 },
 {
  "package": "wind-mvc",
  "snippets": [
   {
    "description": "## Installation\n",
    "snippet": "$ npm install wind-mvc\n$ node app.js\n"
   },
   {
    "description": "## main configuration file\nlib/config.js\n",
    "snippet": "/**\n* gloabl configuration\n**/\nmodule.exports = {\n\t/**\n\t* server port\n\t**/\n\tport: 8080,\n\t\n\tuploadDir :'./uploadfile/'\n};\n"
   },
   {
    "description": "\nlib/url-config.js\n",
    "snippet": "/**\n*  url map the module of the action\n**/\n\nmodule.exports = {\n\t'/ajax': {\n\t\tpath: './action/ajax.js',\n\t\tresults: {\n\t\t\t'success': './static/start/index.html'\n\t\t}\n\t},\n\t'/register': {\n\t\tpath: './action/register.js',\n\t\tresults: {\n\t\t\t'success': './static/form/form.html'\n\t\t}\n\t},\n\t'/server': {\n\t\tpath: './action/serverSent.js',\n\t\tresults: {\n\t\t\t'success': './static/server/server-sent.html'\n\t\t}\n\t},\n\t'/fileUpload': {\n\t\tpath: './action/fileUpload.js',\n\t\tresults: {\n\t\t\tsuccess: './static/form/fileUploadWithProgress.html'\n\t\t}\n\t}\n};\n"
   }
  ]
 },
 {
  "package": "winston-transmission",
  "snippets": [
   {
    "description": "[![npm version](https://badge.fury.io/js/winston-transmission.svg)](https://badge.fury.io/js/winston-transmission)\n\n\nA Custom Logger build on top of [Winston](https://github.com/winstonjs/winston).\n\n- [x] Console\n- [x] Sentry\n- [x] Papertrail\n- [x] Rollbar\n- [x] Bugsnag\n- [ ] Isomorphic using raven-js raven-node\n\n",
    "snippet": "npm install winston-transmission\n"
   },
   {
    "description": "### Basic\nThe basic configurations only reports to the console, the default logging level is `info`.\n\n",
    "snippet": "import winstonTransmission from 'winston-transmission';\n\nconst logger = winstonTransmission({\n  logLevel: 'info',\n});\n\nlogger.info(\"Hello World!\");\n"
   },
   {
    "description": "### Sentry\nTo use sentry, install this dependency in your project:\n\n",
    "snippet": "npm install raven\n"
   },
   {
    "description": "#### Usage\n",
    "snippet": "import winstonTransmission from 'winston-transmission';\n\nglobal.winston = winstonTransmission({\n  logLevel: 'info',\n  processName: 'My Awesome App',\n  external: {\n    logLevel: 'warn',\n    sentry: 'SENTRY-KEY-XXXX',\n  },\n})\n"
   },
   {
    "description": "## npm log-levels Assumption\n\nWinston Transmission assumes npm log-levels, and bases its logging upon it.\n\nEach level is given a specific integer priority. The higher the priority the more important the message is considered to be. Ordered from highest priority to the lowest:\n\n",
    "snippet": "error | warn | info | verbose | debug | silly\n"
   }
  ]
 },
 {
  "package": "witivio-tui-editor",
  "snippets": [
   {
    "description": "\nIf you want to use a specific version, use the tag name instead of `latest` in the url's path.\n\nThe CDN directory has the following structure.\n\n",
    "snippet": "tui-editor/\n├─ latest/\n│  ├─ tui-editor-Editor.js\n│  ├─ tui-editor-Editor.min.js\n│  └─ ...\n├─ v1.1.0/\n│  ├─ ...\n"
   }
  ]
 },
 {
  "package": "wongxong-utils",
  "snippets": []
 },
 {
  "package": "wpcli",
  "snippets": [
   {
    "description": "## Usage\n\n",
    "snippet": "const wpCli = require('wpcli').default;\n\nwpCli('./wp-cli.phar', ['--version'], {\n    cwd: 'vendor/bin'\n})\n    .then((result) => {\n        console.log(result);\n    });\n"
   }
  ]
 },
 {
  "package": "wqeqe",
  "snippets": []
 },
 {
  "package": "wr",
  "snippets": []
 },
 {
  "package": "xianzhi-test-pkg",
  "snippets": []
 },
 {
  "package": "yake",
  "snippets": [
   {
    "description": "## Install\n\nSimple \n\n",
    "snippet": "\tnpm --save-dev install yake\n"
   },
   {
    "description": "### As a command\n\nAs in\n\n",
    "snippet": "\tyake [options] taskname arg1 arg2 .... argn\n\t\n\twhere options are:\n\t\n\t\t-T --showTasks \tshow all tasks with descriptions\n\t\t-f --file\t\t\tpath to a config file, defaults to one of ['yakefile']\n\t\n"
   }
  ]
 },
 {
  "package": "zgl-lib-one",
  "snippets": []
 }
]