package,snippet,description
@aws-sdk/client-rds-data-browser	"//JavaScript\nconst {\n  RDSDataClient,\n  BatchExecuteStatementCommand\n} = require(\"@aws-sdk/client-rds-data-browser\");\n"	"### Import\nThe AWS SDK is modulized by clients and commands in CommonJS modules. To send a request, you only need to import the client(`RDSDataClient`) and the commands you need, for example `BatchExecuteStatementCommand`:\n"
@aws-sdk/client-rds-data-browser	"//TypeScript\nimport {\n  RDSDataClient,\n  BatchExecuteStatementCommand\n} from \"@aws-sdk/client-rds-data-browser\";\n"	"### Import\nThe AWS SDK is modulized by clients and commands in CommonJS modules. To send a request, you only need to import the client(`RDSDataClient`) and the commands you need, for example `BatchExecuteStatementCommand`:\n"
@aws-sdk/client-rds-data-browser	"const rDSData = new RDSDataClient({region: 'region'});\n//clients can be shared by different commands\nconst params = {\n  resourceArn: /**a string value*/,\n  secretArn: /**a string value*/,\n  sql: /**a string value*/,\n};\nconst batchExecuteStatementCommand = new BatchExecuteStatementCommand(params);\nrDSData.send(batchExecuteStatementCommand).then(data => {\n    // do something\n}).catch(error => {\n    // error handling\n})\n"	"### Usage\nTo send a request, you:\n- Initiate client with configuration (e.g. credentials, region). For more information you can refer to the [API reference][].\n- Initiate command with input parameters.\n- Call `send` operation on client with command object as input.\n- If you are using a custom http handler, you may call `destroy()` to close open connections.\n"
@aws-sdk/client-rds-data-browser	"// async/await\ntry {\n  const data = await rDSData.send(batchExecuteStatementCommand);\n  // do something\n} catch (error) {\n  // error handling\n}\n"	"In addition to using promises, there are 2 other ways to send a request:\n"
@aws-sdk/client-rds-data-browser	"// callback\nrDSData.send(batchExecuteStatementCommand, (err, data) => {\n  //do something\n});\n"	"In addition to using promises, there are 2 other ways to send a request:\n"
@aws-sdk/client-rds-data-browser	"import * as AWS from \"@aws-sdk/client-rds-data-browser\";\nconst rDSData = new AWS.RDSData({ region: \"region\" });\nrDSData.batchExecuteStatement(params, (err, data) => {\n  //do something\n});\n"	"The SDK can also send requests using the simplified callback style from version 2 of the SDK.\n"
@aws-sdk/client-rds-data-browser	"try {\n  const data = await rDSData.send(batchExecuteStatementCommand);\n  // do something\n} catch (error) {\n  const metadata = error.$metadata;\n  console.log(\n    `requestId: ${metadata.requestId}\ncfId: ${metadata.cfId}\nextendedRequestId: ${metadata.extendedRequestId}`\n  );\n  /*\nThe keys within exceptions are also parsed. You can access them by specifying exception names:\n    if(error.name === 'SomeServiceException') {\n        const value = error.specialKeyInException;\n    }\n*/\n}\n"	"### Troubleshooting\nWhen the service returns an exception, the error will include the exception information, as well as response metadata (e.g. request id).\n"
@blueeast/react-native-web-maps	"import MapView from 'react-native-maps';\n"	"## Usage\n"
@cw-types/bluebird	"    \"typeRoots\": [\n      \"node_modules/@cw-types\",\n      \"node_modules/@types\"\n    ]\n"	" \n> First, run `npm install --save @cw-types/bluebird`\n>Then, you must add `node_modules/@cw-types` to your `tsconifg.json` file, like so:\n"
@enounca/socket.io	"var server = require('http').createServer();\nvar io = require('socket.io')(server);\nio.on('connection', function(socket){\n  socket.on('event', function(data){});\n  socket.on('disconnect', function(){});\n});\nserver.listen(3000);\n"	"## How to use\nThe following example attaches socket.io to a plain Node.JS\nHTTP server listening on port `3000`.\n"
@enounca/socket.io	"var io = require('socket.io')();\nio.on('connection', function(socket){});\nio.listen(3000);\n"	"### Standalone\n"
@enounca/socket.io	"var app = require('express')();\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nio.on('connection', function(){ /* … */ });\nserver.listen(3000);\n"	"### In conjunction with Express\nStarting with **3.0**, express applications have become request handler\nfunctions that you pass to `http` or `http` `Server` instances. You need\nto pass the `Server` to `socket.io`, and not the express application\nfunction.\n"
@enounca/socket.io	"var app = require('koa')();\nvar server = require('http').createServer(app.callback());\nvar io = require('socket.io')(server);\nio.on('connection', function(){ /* … */ });\nserver.listen(3000);\n"	"### In conjunction with Koa\nLike Express.JS, Koa works by exposing an application as a request\nhandler function, but only by calling the `callback` method.\n"
@femessage/upload-to-ali	"// vue.config.js\nconst Dotenv = require('dotenv-webpack')\nmodule.exports = {\n  configureWebpack: {\n    plugins: [new Dotenv()]\n  }\n}\n"	"### vue-cli3\nvue-cli3 offers an easy solution to replace [process.env](https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F), but it requires a pattern(VUE*APP*\\*) to inject in client side. So we need to use `dotenv-webpack`'s solution.\n"
@flykode/simplejs-format	"'use strict';\n\nconst sjsformat = require('@flykode/simplejs-format');\n\nlet currency001 = new sjsformat.FkNumbers();\n\nconsole.log(currency001.currencyFormat(1000));\n"	"A simple JS Format Package for Study purposes\n#Example\n"
@gormed/chromeless	"const { Chromeless } = require('chromeless')\n\nasync function run() {\n  const chromeless = new Chromeless()\n\n  const screenshot = await chromeless\n    .goto('https://www.google.com')\n    .type('chromeless', 'input[name=\"q\"]')\n    .press(13)\n    .wait('#resultStats')\n    .screenshot()\n\n  console.log(screenshot) // prints local file path or S3 url\n\n  await chromeless.end()\n}\n\nrun().catch(console.error.bind(console))\n"	"## Usage\nUsing Chromeless is similar to other browser automation tools. For example:\n"
@gormed/chromeless	"const chromeless = new Chromeless({\n  remote: {\n    endpointUrl: 'https://XXXXXXXXXX.execute-api.eu-west-1.amazonaws.com/dev',\n    apiKey: 'your-api-key-here',\n  },\n})\n"	"### Proxy Usage\nFollow the setup instructions [here](serverless#installation).\nThen using Chromeless with the Proxy service is the same as running it locally with the exception of the `remote` option.\nAlternatively you can configure the Proxy service's endpoint with environment variables. [Here's how](serverless#using-the-proxy).\n"
@infinitecsolutions/semantic-ui-less-module-loader	"import 'semantic-ui-less/definitions/globals/reset.less';\nimport 'semantic-ui-less/definitions/globals/site.less';\n"	"### Configuration\nAdd to your root js component:\n"
@infinitecsolutions/semantic-ui-less-module-loader	"module: {\n  loaders: [\n\n    // less-loader\n    {\n      test: /\\.less$/,\n      loader: ExtractTextPlugin.extract('style', 'css?!postcss!semantic-ui-less-module'),\n      include: [/[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n    },\n\n    // loader for static assets\n    {\n      test: /\\.(png|jpg|jpeg|gif|svg)$/,\n      loader: 'url?limit=10240&absolute&name=images/[path][name]-[hash:7].[ext]',\n      include: [/[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n    },\n    {\n      test: /\\.(woff|woff2|ttf|svg|eot)$/,\n      loader: 'url?limit=10240&name=fonts/[name]-[hash:7].[ext]',\n      include: [/[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n    }\n  ]\n},\n\n// you can also add specific options:\nsemanticUiLessModuleLoader: {\n  siteFolder: path.join(__dirname, 'src/site'),\n},  \n  \n"	"#### For webpack v.1\n"
@infinitecsolutions/semantic-ui-less-module-loader	"\nmodule: {\n      rules: [\n\n        // for .less files:\n        {\n          test: /\\.less$/,\n          use: ExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n              { loader: 'css-loader' },\n              { loader: 'less-loader' }\n            ]\n          }),\n          exclude: [/[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n        },\n\n        // for semantic-ui-less files:\n        {\n          test: /\\.less$/,\n          use: ExtractTextPlugin.extract({\n            fallback: 'style-loader',\n            use: [\n              { loader: 'css-loader' },\n              {\n                loader: 'semantic-ui-less-module-loader',\n                // you can also add specific options:\n                options: { siteFolder: path.join(__dirname, 'src/site') }\n              }\n            ]\n          }),\n          include: [/[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n        },\n\n        // loader for static assets\n        {\n          test: /\\.(png|jpg|jpeg|gif|svg)$/,\n          use: {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              absolute: true,\n              name: 'images/[path][name]-[hash:7].[ext]'\n            }\n          },\n          include: [path.join(__dirname, 'src'), /[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n        }, {\n          test: /\\.(woff|woff2|ttf|svg|eot)$/,\n          use: {\n            loader: 'url-loader',\n            options: {\n              limit: 10240,\n              name: 'fonts/[name]-[hash:7].[ext]'\n            }\n          },\n          include: [path.join(__dirname, 'src'), /[\\/\\\\]node_modules[\\/\\\\]semantic-ui-less[\\/\\\\]/]\n        }\n      ]\n    }\n"	"#### For webpack v.2\n"
@ironfly/lru-diskcache	"var LRU = require(\"lru-diskcache\")\r\n\r\nvar cache = LRU('./cache', {\r\n    max: 50\r\n});\r\n\r\ncache.init()\r\n\r\ncache.set(\"myfile.md\", \"A string content\")\r\ncache.get(\"file\").then(function() { ... }) // Buffer(\"A string content\")\r\n\r\n// with a buffer or stream\r\ncache.set(\"image.png\", new Buffer([ ... ]))\r\ncache.set(\"index.html\", request.get(\"https://www.google.fr\"))\r\n\r\ncache.reset()    // empty the cache\r\n"	"### Usage\r\n\r\n"
@ironfly/lru-diskcache	"// Initialize the cache\r\ncache.init()\r\n\r\n// Get content as a buffer (return a promise)\r\ncache.get(key)\r\n\r\n// Get content as a string\r\ncache.get(key, { encoding: 'utf8' })\r\n\r\n// Get content as a stream (return a promise)\r\ncache.getStream(key)\r\n\r\n// Check if a key is in the cache, without updating the recent-ness or deleting it for being stale.\r\ncache.has(key)\r\n\r\n// Delete a key from the cache\r\ncache.del(key)\r\n\r\n// Return total length of objects in cache taking into account\r\ncache.size()\r\n\r\n// Manually iterates over the entire cache proactively pruning old entries\r\ncache.prune()\r\n"	"### API\r\n\r\n"
@jamestalmage/babel-template	"import template from 'babel-template';\nimport generate from 'babel-generator';\nimport * as t from 'babel-types';\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier('myModule'),\n  SOURCE: t.stringLiteral('my-module')\n});\n\nconsole.log(generate(ast).code);\n"	"## Usage\n"
@jamestalmage/babel-template	"var myModule = require('my-module');\n"	"## Usage\n"
@kingjs/linq.average	"var average = require('@kingjs/linq.average');\r\nvar sequence = require('@kingjs/enumerable.create');\r\n\r\naverage.call(sequence(-2, 0, 2));\r\n"	"## Usage\r\nCompute the average of `[-2, 0, 2]` like this:\r\n"
@lion/option	"import '@lion/option/lion-option.js';\n"	"### Installation\n"
@meifacil/react-native-pdf-view	"'use strict';\r\n\r\nimport React,{\r\n    Component\r\n} from 'react';\r\n\r\nimport {\r\n    StyleSheet,\r\n    View\r\n} from 'react-native';\r\n\r\nimport PDFView from 'react-native-pdf-view';\r\n\r\nexport default class PDF extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n      <PDFView ref={(pdf)=>{this.pdfView = pdf;}}\r\n                         src={\"sdcard/pdffile.pdf\"}\r\n                         onLoadComplete = {(pageCount)=>{\r\n                            this.pdfView.setNativeProps({\r\n                                zoom: 1.5\r\n                            });\r\n                         }}\r\n                         style={styles.pdf}/>\r\n    }\r\n}\r\nvar styles = StyleSheet.create({\r\n    pdf: {\r\n        flex:1\r\n    }\r\n});\r\n"	"### Example\r\n\r\n"
@meniga/config	"import { globalConfig } from '@meniga/config'\r\n\r\nconst _configItemsPerPage = globalConfig('transactions.itemsPerPage', 50)\r\n"	"\r\nExample:\r\n\r\n"
@meniga/config	"import { getBooleanConfigValue } from '@meniga/config'\r\n\r\nconst _configShowCurrentMonthInChart = getBooleanConfigValue('transactions.showCurrentMonthInChart', false)\r\n"	"### getBooleanConfigValue\r\n> *getBooleanConfigValue* makes sure that the value you get from the config is a boolean (e.g. if the config file itself has a string value 'true' you will get back a Boolean(true)). Example:\r\n\r\n"
@meniga/config	"import { getIntConfigValue } from '@meniga/config'\r\n\r\nconst _configUndoCategoryChangeTimeout = getIntConfigValue('transactions.undoCategoryChangeTimeout', 3000)\r\n"	"### getIntConfigValue\r\n> *getIntConfigValue* makes sure that the value you get from the config is an integer (e.g. if the config file itself has a string value '10' you will get a Number(10) back). Example:\r\n\r\n"
@mu-ui/mu-dialog	"// plugin\nimport Dialog from '@mu-ui/mu-dialog'\n\nVue.use(Dialog)\n\nthis.$dialog({\n  title: 'Title',\n  message: 'Message...',\n  opacity: 0.5,\n  single: true,\n  highlight: '#fd0',\n  btns: ['No', 'Yes'],\n  confirm() {\n    console.log('click confirm btn')\n  },\n  cancel() {\n    console.log('click cancel btn')\n  }\n})\n\nor\n\n// component\nimport Dialog from '@mu-ui/mu-dialog'\n\nVue.component('mu-dialog', Dialog.Dialog)\n\n// use v-model to control whether or not visible\n<mu-dialog v-model=\"show\" @confirm=\"confirm\" @cancel=\"cancel\">\n  <div class=\"dialog-main\">\n    <p>1</p>\n    <p>2</p>\n    <p>3</p>\n  </div>\n</mu-dialog>\n"	"### Usage\n"
@ngard/tiny-chunk	"chunk(/* array [, chunkSize] */)\n"	"## Syntax\n"
@ngard/tiny-chunk	"import { chunk } from '@ngard/tiny-chunk';\n\nconst value = chunk([1, 2, 3, 4, 5], 2);\n// value is [[1, 2], [3, 4], [5]]\n"	"## Example\n"
@nlabs/arkhamjs-example-react	"// JS\nimport `./component.css`;\n"	"All `.css` imports will be run through postcss and cssnext, extracted and compiled during builds. CSS features included are nested classes and SASS-like variables. Styles must be imported either directly within the js file or via another stylesheet which has already been imported.\n"
@openfonts/carrois-gothic-sc_latin	"// Load Carrois Gothic SC typeface\nrequire('@openfonts/carrois-gothic-sc_latin')\n"	"## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n"
@opentelemetry/tracing	"const opentelemetry = require('@opentelemetry/api');\nconst { BasicTracerProvider } = require('@opentelemetry/tracing');\n\n// To start a trace, you first need to initialize the Tracer provider.\n// NOTE: The default OpenTelemetry tracer provider does not record any tracing information.\n//       Registering a working tracer provider allows the API methods to record traces.\nnew BasicTracerProvider().register();\n\n// To create a span in a trace, we used the global singleton tracer to start a new span.\nconst span = opentelemetry.trace.getTracer('default').startSpan('foo');\n\n// Set a span attribute\nspan.setAttribute('key', 'value');\n\n// We must end the spans so they become available for exporting.\nspan.end();\n"	"## Usage\n"
@ornikar/rollup-plugin-postcss	"// rollup.config.js\nimport postcss from 'rollup-plugin-postcss'\n\nexport default {\n  plugins: [\n    postcss({\n      plugins: []\n    })\n  ]\n}\n"	"## Usage\nYou are viewing the docs for `v2.0` which only support Rollup 1.0 or above.\n"
@ornikar/rollup-plugin-postcss	"import './style.css'\n"	"Then you can use CSS files:\n"
@ornikar/rollup-plugin-postcss	"// Inject to `<head>` and also available as `style`\nimport style from './style.css'\n"	"Note that the generated CSS will be injected to `<head>` by default, and the CSS string is also available as default export unless `extract: true`:\n"
@ornikar/rollup-plugin-postcss	"postcss({\n  extract: true\n})\n"	"### Extract CSS\n"
@ornikar/rollup-plugin-postcss	"postcss({\n  modules: true,\n  // Or with custom options for `postcss-modules`\n  modules: {}\n})\n"	"### CSS modules\n"
@ornikar/rollup-plugin-postcss	"namedExports(name) {\n  // Maybe you simply want to convert dash to underscore\n  return name.replace(/-/g, '_')\n}\n"	"### namedExports\nType: `boolean` `function`<br>\nDefault: `false`\nUse named exports alongside default export.\nYou can supply a function to control how exported named is generated:\n"
@ornikar/rollup-plugin-postcss	"import style, { class$_$name, class$__$name, $switch$ } from './style.css'\nconsole.log(style['class-name'] === class$_$name) // true\nconsole.log(style['class--name'] === class$__$name) // true\nconsole.log(style['switch'] === $switch$) // true\n"	"The original will not be removed, it's still available on `default` export:\n"
@ornikar/rollup-plugin-postcss	"// rollup.config.js\npostcss({\n  config: {\n    ctx: {\n      foo: 'bar'\n    }\n  }\n})\n\n// postcss.config.js\nmodule.exports = context => {\n  console.log(context.options.foo) // 'bar'\n\n  return {}\n}\n"	"#### config.ctx\nType: `object`\n[`ctx`](https://github.com/michael-ciniawsky/postcss-load-config#context) argument for PostCSS config file.\nNote: Every keys you pass to `config.ctx` will be available under `options` inside\nthe postcss config.\n"
@ornikar/rollup-plugin-postcss	"interface Loader {\n  name: string,\n  test: RegExp,\n  process: (this: Context, input: Payload) => Promise<Payload> | Payload\n}\n\ninterface Context {\n  /** Loader options */\n  options: any\n  /** Sourcemap */\n  sourceMap: any\n  /** Resource path */\n  id: string\n  /** Files to watch */\n  dependencies: Set<string>\n  /** Emit a waring */\n  warn: PluginContext.warn\n  /** https://rollupjs.org/guide/en#plugin-context */\n  plugin: PluginContext\n}\n\ninterface Payload {\n  /** File content */\n  code: string\n  /** Sourcemap */\n  map?: string | SourceMap\n}\n"	"### loaders\nType: `Loader[]`\nAn array of custom loaders, check out our [sass-loader](./src/sass-loader.js) as example.\n"
@regexp-extra/flags	"const flags = require('@regexp-extra/flags');\r\n// -> flags\r\n\r\n\r\nflags(/EATME/g);\r\n// g\r\n\r\nflags(/DRINKME/im);\r\n// im\r\n"	"\r\n"
@roocky/vue-shudan	"import Goban from '@roocky/vue-shudan';\n"	"加载后直接调用即可：\n"
@soundstep/infuse	"var injector = new infuse.Injector();\n"	"## create injector\n"
@soundstep/infuse	"var infuse = require('@soundstep/infuse');\nvar injector = new infuse.Injector();\n"	"## create injector with node.js\n"
@soundstep/infuse	"injector.mapValue(\"name\", \"John\");\n"	"## map value\n"
@soundstep/infuse	"injector.removeMapping(\"name\");\n"	"## remove mapping\n"
@soundstep/infuse	"injector.hasMapping(\"name\");\n"	"## test mapping\n"
@soundstep/infuse	"injector.inject(john);\n"	"## inject value\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function() {\n\tthis.name = null;\n}\n// instantiate Person class\nvar john = new Person();\n// inject values in the Person instance\ninjector.inject(john);\nalert(john.name); // will alert John\n"	"Full example:\n"
@soundstep/infuse	"var john = injector.createInstance(Person);\n"	"or\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function() {\n\tthis.name = null;\n}\n// instantiate Person class and inject values\nvar john = injector.createInstance(Person);\nalert(john.name); // will alert John\n"	"Full example:\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function(name) {\n\tthis.nameParam = name;\n}\n// instantiate Person class and inject values from the constructor\nvar john = injector.createInstance(Person);\nalert(john.nameParam); // will alert John\n"	"Full example with constructor:\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// person class\nvar Person = function(specifiedName) {\n\tthis.specifiedName = specifiedName;\n}\n// specify injected arguments\nPerson.inject = [\"name\"];\n// instantiate Person class and inject values from the constructor\nvar john = injector.createInstance(Person);\nalert(john.specifiedName); // will alert John\n"	"## specified inject value (minification)\nIt is also possible to specify the injected value using a static variable \"inject\", which would describe the arguments that should be sent into the instance.\n"
@soundstep/infuse	"var injector = new infuse.Injector();\ninjector.strictMode = true; // default is false\n"	"A strict mode can be enabled, the injector will throw an error if the \"inject\" property is missing when trying to instantiate a function.\n"
@soundstep/infuse	"var injector = new infuse.Injector();\ninjector.strictModeConstructorInjection = true;  // default is false\n"	"A strict mode for constructor injection only can also be specified, the injector will throw an error if the \"inject\" property is missing.  \nThe error will not be thrown if the dependencies are declared using properties (`obj.propName = null`) rather than constructor argument (`function Obj(propName) {`).  \nThis is a looser strict mode than `injector.strictMode`, which apply to both property and constructor injection.  \nthis option will be enough to mangle arguments while minifying javascript and have the dependency injection still working.\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel);\n"	"## map class\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function() {\n\tthis.model = null;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.model); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.model); // contains another MyModel instance\n"	"Full example:\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function(model) {\n\tthis.modelParam = model;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.modelParam); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.modelParam); // contains another MyModel instance\n"	"Full example with constructor:\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel, true);\n"	"## map class as singleton\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function() {\n\tthis.model = null;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.model); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.model); // contains the same model instance as other1\nalert(other1.model === other2.model); // alert true\n"	"Full example:\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function(model) {\n\tthis.modelParam = model;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.modelParam); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.modelParam); // contains the same model instance as other1\nalert(other1.modelParam === other2.modelParam); // alert true\n"	"Full example with constructor:\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel);\nvar model = injector.getValue(\"model\");\n"	"## get instance with mapping name\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// get instance created\nvar model1 = injector.getValue(\"model\");\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValue(\"model\");\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert false\n"	"Full example:\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel, true);\nvar model = injector.getValue(\"model\");\n"	"## get instance with mapping name as singleton\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// get instance created\nvar model1 = injector.getValue(\"model\");\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValue(\"model\");\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert true\n"	"Full example:\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel);\nvar model = injector.getValueFromClass(MyModel);\n"	"## get instance with class\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// get instance created\nvar model1 = injector.getValueFromClass(MyModel);\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValueFromClass(MyModel);\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert false\n"	"Full example:\n"
@soundstep/infuse	"injector.mapClass(\"model\", MyModel, true);\nvar model = injector.getValueFromClass(MyModel);\n"	"## get instance with class as singleton\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// get instance created\nvar model1 = injector.getValueFromClass(MyModel);\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValueFromClass(MyModel);\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert true\n"	"Full example:\n"
@soundstep/infuse	"var child = injector.createChild();\n"	"## create child injector (inherit the mapping from the parent injector)\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the name property on the parent injector\ninjector.mapValue(\"name\", \"John\");\n// create child injector\nvar child = injector.createChild();\n// map value to the type property on the child injector\nchild.mapValue(\"type\", \"male\");\n// create class that will receive the name and type value\nvar FooClass = function() {\n\tthis.name = null;\n\tthis.type = null;\n}\n// instance the class with the child injector\nvar fooChild = child.createInstance(FooClass);\nalert(fooChild.name); // will alert \"John\"\nalert(fooChild.type); // will alert \"male\"\nvar fooParent = injector.createInstance(FooClass);\nalert(fooParent.name); // will alert \"John\"\nalert(fooParent.type); // will alert null\n"	"Full example:\n"
@soundstep/infuse	"// return a new instance every time\nvar instance1 = injector.createInstance(MyClass);\nvar instance2 = injector.createInstance(MyClass);\nvar instance3 = injector.createInstance(MyClass);\n\n// return a new instance every time\ninjector.mapClass(\"name\", MyClass);\nvar instance1 = injector.getValue(\"name\");\nvar instance2 = injector.getValue(\"name\");\nvar instance3 = injector.getValue(\"name\");\n\n// return a new instance every time\ninjector.mapClass(\"name\", MyClass);\nvar instance1 = injector.getValueFromClass(MyClass);\nvar instance2 = injector.getValueFromClass(MyClass);\nvar instance3 = injector.getValueFromClass(MyClass);\n\n// return the same instance every time\ninjector.mapClass(\"name\", MyClass, true); // mapped as singleton\nvar instance1 = injector.getValue(\"name\");\nvar instance2 = injector.getValue(\"name\");\nvar instance3 = injector.getValue(\"name\");\n\n// return the same instance every time\ninjector.mapClass(\"name\", MyClass, true); // mapped as singleton\nvar instance1 = injector.getValueFromClass(MyClass);\nvar instance2 = injector.getValueFromClass(MyClass);\nvar instance3 = injector.getValueFromClass(MyClass);\n"	"## getValue vs createInstance\nThe method createInstance will always return a new instance.\nThe method getValue needs to have a mapping registered and might return the same instance depending if the class has been mapped as singleton.\n"
@soundstep/infuse	"// create injector\nvar injector = new infuse.Injector();\n// map value to the data property\ninjector.mapValue(\"data\", \"some data\");\n// create model class\nvar MyModel = function() {\n\tthis.data = null;\n}\nMyModel.prototype = {\n\tpostConstruct: function() {\n\t\t// called after injection\n\t\t// this.data is injected\n\t\talert(this.data);\n\t}\n}\ninjector.createInstance(MyModel);\n"	"## post construct\nA post construct method can be added, it will be automatically called once the injection is done.\n"
@stackstorm/browserify-postcss	"var browserify = require('browserify')\nvar fs = require('fs')\n\nvar b = browserify(__dirname + '/src/entry.js')\nb.transform('browserify-postcss', {\n  // a list of postcss plugins\n  plugin: [\n    'postcss-import',\n    'postcss-advanced-variables',\n    ['postcss-custom-url', [\n      ['inline', { maxSize: 10 }],\n      ['copy', {\n        assetOutFolder: __dirname + '/static/assets',\n        baseUrl: 'assets',\n        name: '[name].[hash]',\n      }],\n    ]],\n  ],\n  // basedir where to search plugins\n  basedir: __dirname + '/src',\n  // insert a style element to apply the styles\n  inject: true,\n})\nb.bundle().pipe(\n  fs.createWriteStream(to)\n)\n\n"	"## Example\nThe build script:\n"
@stackstorm/browserify-postcss	"require('./entry.css')\n\nconsole.log('styles from entry.css are applied')\n\n"	"entry.js:\n"
@vacom/logbook	"import Log from \"@vacom/logbook\";\n"	"### How to import\nAfter installing the dependency, just import the components you need\n"
@xpertsea/vaadin-grid	"import '@vaadin/vaadin-grid/vaadin-grid.js';\n"	"Once installed, import it in your application:\n"
ac-rev-hash	"var fs = require('fs');\nvar revHash = require('ac-rev-hash');\nvar buffer = fs.readFileSync('unicorn.png');\n\nrevHash(buffer);\n//=> 'bb9d8fe615bb9d8fe615'\n"	"## Usage\n"
aez.wasm	"var aez = require('aez.wasm')\n\naez.ready(function () {\n    var plaintext            = Buffer.from('37c8f1a1c981c04263769feb059be120', 'hex');\n    var ad                   = Buffer.from('38e7de89bfabf8b4064118449633e2adb942c22b63c9c0971d19d6845dedd9a0', 'hex');\n    var nonce                = Buffer.from('54d3b0f09e55592d449c5117', 'hex');\n    var key                  = Buffer.from('ead50aed64ee3bd8925b7fbbbe619cdf803cbcf386fccce48ea6b921c36efdb821e47fe3fbdf1a0a90e36d29467797ea', 'hex');\n    var ciphertext_expansion = 16;\n    var ciphertext = aez.encrypt(plaintext, ad, nonce, key, ciphertext_expansion);\n    console.log(ciphertext);\n    var plaintext_decrypted = aez.decrypt(ciphertext, ad, nonce, key, ciphertext_expansion);\n    console.log(plaintext_decrypted);\n});\n"	"## How to use\nNode.js:\n"
aez.wasm	"requirejs(['aez.wasm'], function (aez) {\n    aez.ready(function () {\n        var plaintext            = Buffer.from('37c8f1a1c981c04263769feb059be120', 'hex');\n        var ad                   = Buffer.from('38e7de89bfabf8b4064118449633e2adb942c22b63c9c0971d19d6845dedd9a0', 'hex');\n        var nonce                = Buffer.from('54d3b0f09e55592d449c5117', 'hex');\n        var key                  = Buffer.from('ead50aed64ee3bd8925b7fbbbe619cdf803cbcf386fccce48ea6b921c36efdb821e47fe3fbdf1a0a90e36d29467797ea', 'hex');\n        var ciphertext_expansion = 16;\n        var ciphertext = aez.encrypt(plaintext, ad, nonce, key, ciphertext_expansion);\n        console.log(ciphertext);\n        var plaintext_decrypted = aez.decrypt(ciphertext, ad, nonce, key, ciphertext_expansion);\n        console.log(plaintext_decrypted);\n    });\n})\n"	"Browser:\n"
alagator	"var path = require('path')\r\nvar fs = require('fs')\r\n\r\nvar Promise = require('promise')\r\nvar alagator = require('alagator')\r\n\r\nmodule.exports = mkdirpFactory(true, Promise.denodeify(fs.mkdir), Promise.denodeify(fs.stat))\r\nmodule.exports.sync = mkdirpFactory(false, fs.mkdirSync, fs.statSync)\r\n\r\nmodule.exports.mkdirp = module.exports.mkdirP = module.exports\r\n\r\nfunction mkdirpFactory(async, mkdir, stat) {\r\n  var rec = alagator(function *(p, mode, made) {\r\n    if (mode === undefined) {\r\n      mode = 0777 & (~process.umask());\r\n    }\r\n    if (!made) made = null;\r\n\r\n    if (typeof mode === 'string') mode = parseInt(mode, 8);\r\n    p = path.resolve(p);\r\n\r\n    try {\r\n      yield mkdir(p, mode);\r\n      made = made || p;\r\n    }\r\n    catch (err0) {\r\n      switch (err0.code) {\r\n        case 'ENOENT' :\r\n          made = yield rec(path.dirname(p), mode, made);\r\n          yield rec(p, mode, made);\r\n          break;\r\n\r\n        // In the case of any other error, just see if there's a dir\r\n        // there already.  If so, then hooray!  If not, then something\r\n        // is borked.\r\n        default:\r\n          var stat;\r\n          try {\r\n              stat = yield stat(p);\r\n          }\r\n          catch (err1) {\r\n              throw err0;\r\n          }\r\n          if (!stat.isDirectory()) throw err0;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return made;\r\n  }, async)\r\n  return rec\r\n}\r\n"	"## Example\r\n\r\nA fully backwards compatible version of [@substack](https://github.com/substack)'s [mkdirp](https://github.com/substack/node-mkdirp/blob/master/index.js) but without writing the algorithm out twice:\r\n\r\n"
alagator	"var mkdirp = require('mkdirp')\r\n\r\nmkdirp('/foo/bar', function(err) {\r\n  if (err) throw err\r\n  console.log('/foo/bar exists')\r\n})\r\n\r\n//or\r\n\r\nmkdirp('/foo/bar')\r\n  .then(function() {\r\n    console.log('/foo/bar exists')\r\n  })\r\n  .done()\r\n\r\n//or\r\n\r\nmkdirp.sync('/foo/bar')\r\nconsole.log('/foo/bar exists')\r\n"	"### alagator(generatorFunction, isAsync)\r\n\r\nisAsync defaults to `true`.\r\n\r\nThe `alagator` method takes a generator function, and then either `true` (for async) or `false` (for sync).  If `false` is passed, it makes `yield` act as a pass through, so the method runs fully synchronously.  If `true` is passed, it makes `yield` await the resolution of a promise (or array of promises) so that the function becomes async (it also uses `Promise.nodeify` to support both callback and promise based use).  The above mkdirp example could be used in any of the following 3 ways:\r\n\r\n"
alagator	"var Q = require('q')\r\n\r\nmodule.exports = mkdirpFactory(Q, Q.denodeify(fs.mkdir), Q.denodeify(fs.stat))\r\nmodule.exports.sync = mkdirpFactory(false, fs.mkdirSync, fs.statSync)\r\n"	"### use with other promise libraries\r\n\r\nIf you want the promise returned from async versions of your algorithms to be of a specific type (other than [promise](https://github.com/then/promise)) we've got you covered.  Simply pass a wrap function in place of `true`:\r\n\r\n"
am-bucker	"var logger = require('bucker').createLogger(opts, module);\n\nlogger.info('informational message');\nlogger.debug('debug message');\nlogger.warn('warning');\nlogger.error('error');\nlogger.log('also works for informational messsages');\nlogger.module('something_else').info('and you can override the module name temporarily if you want');\nlogger.tags(['showing', 'off']).info('and we also support tags now');\n"	"==========\nBucker is a simple logging module that has everything you need to make your logs sane, readable, and useful.\nUsage\n=====\n"
am-bucker	"app.use(logger.middleware());\n"	"Where opts is an optional object containing your configuration options, and the module reference is optionally used for namespacing your logs and can be omitted.\nLog levels available are, debug, info, warn, and error. When specifying a level in your initial options, items will only be logged if they are equal to or above the level chosen. For example, if options contains a level of 'info', debug messages will be ignored while info, warn, and error level messages will be logged.\nMessages are passed through [util.format](http://nodejs.org/api/util.html#util_util_format_format) so can be more than simple strings, and work very similar to console.log.\nIncluded in the logger is a middleware for connect/express that writes access logs, to use it simply add it to your middleware stack\n"
am-bucker	"pack.require('bucker', { .. opts .. }, function (err) {\n  if (err) console.error('failed loading bucker plugin');\n});\n"	"In addition to the connect middleware, bucker also exports a Hapi plugin. To use it, simply load it into your plugins\n"
am-bucker	"{ file: {\n    filename: '/path/to/file',\n    format: ':level :time :data',\n    timestamp: 'HH:mm:ss',\n    accessFormat: ':time :level :method :status :url'\n  },\n  console: {\n    color: false\n  },\n  syslog: {\n    host: 'localhost',\n    port: 514,\n    facility: 18\n  },\n  logstash: {\n    redis: true, // send as redis pubsub messages\n    // udp: true, // or send directly over UDP, *NOTE* you can only use one or the other, never both\n    host: '127.0.0.1', // defaults to localhost\n    port: 12345, // defaults to 6379 for redis, 9999 for udp\n    key: 'bucker_logs', // defaults to 'bucker', this is only used for the redis transport\n    channel: true, // use redis pubsub\n    list: false, // use a redis list *NOTE* if channel is false, list usage is forced\n    source_host: 'bacon.com' // this sets the @source_host field in logstash\n  }\n}\n"	"Frontend Usage\n==============\nThanks to Johannes Boyne, there exists a module to relay frontend logs to a receiver on your server for storage and display. You can read more about it [here](https://github.com/johannesboyne/bucker-receiver)\nOptions\n=======\n* app - filename to save application log items to.\n* error - filename to save error log items to. if this is not specified, errors will be combined with the regular app log if one is available.\n* access - filename to save access log items to.\n* console - boolean specifying if we should print to console or not.\n* syslog - a host:port combination to send logs to via syslog (e.g. 'localhost:6500'). port defaults to 514 if not specified. this may also be specified as an object, as in ``` { host: 'localhost', port: 514 } ```\n* logstash - an object describing the host to ship logstash formatted events to, this is documented further below\n* level - minimum level to log, this can be specified as a string (i.e. 'error') or as a number (i.e. 3). items that are below this level will not be logged.\n* name - name to use when namespacing logs. note that this will override the module reference if one is passed.\n* handleExceptions - a boolean to indicate whether or not we should add an uncaughtException handler. the handler will log the event as an exception, then process.exit(1).\n* hapi - when using bucker for logging as a hapi plugin we add a handler to the server's 'log' event and log the data with an appropriate log level based on the tags provided. You can prevent this behavior by adding the property 'handleLog', set as false to the hapi object ``` hapi: { handleLog: false } ```\nThe above list describes the most basic usage of each option. Below, I've written out an example config object that shows all available options.\nIn addition to the 'app' option, individual configurations may be set for each log level supporting the same options as the 'app' and 'error' items. If no level options are specified, the defaults (those passed to the 'app' and/or 'error' options) will be used.\n"
anysols-model	"const {AnysolsModel} = require('anysols-model');\n\n const anysolsModel = new AnysolsModel();\n\n    const config = {\n        \"host\": \"localhost\",\n        \"port\": \"27017\",\n        \"database\": \"anysols-model\",\n        \"dialect\": \"mongodb\",\n    };\n\n    anysolsModel.connect(config).then(() => {\n        console.log('connection success');\n        anysolsModel.databaseExists().then(() => {\n            console.log('db exists');\n            cb(anysolsModel);\n        }, () => {\n            console.log(\"db does not exists\");\n        });\n    }, (err) => {\n        console.log('connection failed');\n    });\n"	"## Establishing database connection\n"
anysols-model	"// after establishing connection\n\n anysolsModel.addInterceptor(\"my-intercept\", {\n    intercept: (modelName, operation, when, records) => {\n        return new Promise((resolve, reject) => {\n            if (modelName === 'student') {\n                if (operation === 'create') {\n                    if (when === \"before\") {\n                        console.log(\"Student before\");\n                        if (!Array.isArray(records)) {\n                            let record = records;\n                            record.set(\"computed\",  record.get(\"name\") + \" +++ computed\");\n                        }\n                    } else if (when === \"after\")\n                        console.log(\"Student after\");\n                }\n            }\n            resolve(records);\n        });\n    }\n});\n\nanysolsModel.defineModel({\n    name: 'student',\n    fields: [{\n        name: 'name',\n        type: 'string'\n    }, {\n        name: 'computed',\n        type: 'string'\n    }]\n});\n\nlet Student = anysolsModel.model(\"student\");\nlet s = new Student({});\ns.set(\"name\", \"John\");\ns.save().then(function () {\n    Student.find().exec().then(function (students) {\n        console.log(JSON.stringify(students, null, 4));\n    });\n});\n"	"## Intercepting database operations\n"
anysols-model	"// after establishing connection\n\n anysolsModel.registerFieldDefinition(new FieldDefinition(\"customType\", field => {\n     return true\n }, function (field, fieldDefinition) {\n     return {\n         type: MONGOOSE_TYPES.STRING\n     }\n }));\n\n anysolsModel.defineModel({\n     name: 'student',\n     fields: [{\n         name: 'name',\n         type: 'string'\n     }, {\n         name: 'dob',\n         type: 'date'\n     }, {\n         name: 'custom_field',\n         type: 'customType'\n     }]\n });\n\n let Student = anysolsModel.model(\"student\");\n let s = new Student();\n s.set(\"name\", \"John\");\n s.set(\"dob\", new Date());\n s.set(\"custom_field\", \"testing\");\n s.save().then(function () {\n     console.log(\"Student created\");\n     anysolsModel.closeConnection();\n });\n"	"## Define custom field type\n"
apibee	"'use strict';\n\nvar bee = require('apibee');\n\nmodule.exports = function(router) {\n  var api = new bee(router)\n\n  api.group('Index', function(api) {\n    api.get('/read', function(req, res) {\n      //do stuff\n    });\n    api.post('/update', function(req, res) {\n      //do stuff  \n    })\n  }\n\n  api.group('User CRUD', function(api) {\n    api.get('/read', function(req, res) {\n      //do stuff\n    });\n    api.post('/update', function(req, res) {\n      //do stuff  \n    })\n  }\n};\n"	"## Basic Usage\ncd into `your project` && `npm install apibee --save-dev`\nExample for `routes.js`\n"
apollo-resolvers	"import { createResolver } from 'apollo-resolvers';\nimport { createError, isInstance } from 'apollo-errors';\n\nconst UnknownError = createError('UnknownError', {\n  message: 'An unknown error has occurred!  Please try again later'\n});\n\nexport const baseResolver = createResolver(\n   //incoming requests will pass through this resolver like a no-op\n  null,\n\n  /*\n    Only mask outgoing errors that aren't already apollo-errors,\n    such as ORM errors etc\n  */\n  (root, args, context, error) => isInstance(error) ? error : new UnknownError()\n);\n"	"Create a base resolver for last-resort error masking:\n"
apollo-resolvers	"import { createError } from 'apollo-errors';\n\nimport { baseResolver } from './baseResolver';\n\nconst ForbiddenError = createError('ForbiddenError', {\n  message: 'You are not allowed to do this'\n});\n\nconst AuthenticationRequiredError = createError('AuthenticationRequiredError', {\n  message: 'You must be logged in to do this'\n});\n\nexport const isAuthenticatedResolver = baseResolver.createResolver(\n  // Extract the user from context (undefined if non-existent)\n  (root, args, { user }, info) => {\n    if (!user) throw new AuthenticationRequiredError();\n  }\n);\n\nexport const isAdminResolver = isAuthenticatedResolver.createResolver(\n  // Extract the user and make sure they are an admin\n  (root, args, { user }, info) => {\n    /*\n      If thrown, this error will bubble up to baseResolver's\n      error callback (if present).  If unhandled, the error is returned to\n      the client within the `errors` array in the response.\n    */\n    if (!user.isAdmin) throw new ForbiddenError();\n\n    /*\n      Since we aren't returning anything from the\n      request resolver, the request will continue on\n      to the next child resolver or the response will\n      return undefined if no child exists.\n    */\n  }\n)\n"	"Create a few child resolvers for access control:\n"
apollo-resolvers	"import { isAuthenticatedResolver } from './acl';\nimport { createError } from 'apollo-errors';\n\nconst NotYourUserError = createError('NotYourUserError', {\n  message: 'You cannot update the profile for other users'\n});\n\nconst updateMyProfile = isAuthenticatedResolver.createResolver(\n  (root, { input }, { user, models: { UserModel } }, info) => {\n    /*\n      If thrown, this error will bubble up to isAuthenticatedResolver's error callback\n      (if present) and then to baseResolver's error callback.  If unhandled, the error\n      is returned to the client within the `errors` array in the response.\n    */\n    if (!user.isAdmin && input.id !== user.id) throw new NotYourUserError();\n    return UserModel.update(input);\n  }\n);\n\nexport default {\n  Mutation: {\n    updateMyProfile\n  }\n};\n"	"Create a profile update resolver for our user type:\n"
apollo-resolvers	"import { createError, isInstance } from 'apollo-errors';\nimport { isAuthenticatedResolver, isAdminResolver } from './acl';\n\nconst ExposedError = createError('ExposedError', {\n  message: 'An unknown error has occurred'\n});\n\nconst banUser = isAdminResolver.createResolver(\n  (root, { input }, { models: { UserModel } }, info) => UserModel.ban(input),\n  (root, args, context, error) => {\n    /*\n      For admin users, let's tell the user what actually broke\n      in the case of an unhandled exception\n    */\n\n    if (!isInstance(error)) throw new ExposedError({\n      // overload the message\n      message: error.message\n    });\n  }\n);\n\nexport default {\n  Mutation: {\n    banUser\n  }\n};\n"	"Create an admin resolver:\n"
apollo-resolvers	"import { combineResolvers } from 'apollo-resolvers';\n\nimport User from './user';\nimport Admin from './admin';\n\n/*\n  This combines our multiple resolver definition\n  objects into a single definition object\n*/\nconst resolvers = combineResolvers([\n  User,\n  Admin\n]);\n\nexport default resolvers;\n"	"Combine your resolvers into a single definition ready for use by `graphql-tools`:\n"
apollo-resolvers	"import { and, or } from 'apollo-resolvers';\n\nimport isFooResolver from './foo';\nimport isBarResolver from './bar';\n\nconst banResolver = (root, { input }, { models: { UserModel } }, info)=> UserModel.ban(input);\n\n// Will execute banResolver if either isFooResolver or isBarResolver successfully resolve\n// If none of the resolvers succeed, the error from the last conditional resolver will\n// be returned\nconst orBanResolver = or(isFooResolver, isBarResolver)(banResolver);\n\n// Will execute banResolver if both isFooResolver and isBarResolver successfully resolve\n// If one of the condition resolvers throws an error, it will stop the execution and\n// return the error\nconst andBanResolver = and(isFooResolver, isBarResolver)(banResolver);\n\n// In both cases, conditions are evaluated from left to right\n"	"Conditional resolvers:\n"
apollo-resolvers	"import express from 'express';\nimport bodyParser from 'body-parser';\nimport { GraphQLError } from 'graphql';\nimport { graphqlExpress } from 'apollo-server-express';\nimport { createExpressContext } from 'apollo-resolvers';\nimport { formatError as apolloFormatError, createError } from 'apollo-errors';\n\nimport { UserModel } from './models/user';\nimport schema from './schema';\n\nconst UnknownError = createError('UnknownError', {\n  message: 'An unknown error has occurred.  Please try again later'\n});\n\nconst formatError = error => {\n  let e = apolloFormatError(error);\n\n  if (e instanceof GraphQLError) {\n    e = apolloFormatError(new UnknownError({\n      data: {\n        originalMessage: e.message,\n        originalError: e.name\n      }\n    }));\n  }\n\n  return e;\n};\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  req.user = null; // fetch the user making the request if desired\n  next();\n});\n\napp.post('/graphql', graphqlExpress((req, res) => {\n  const user = req.user;\n\n  const models = {\n    User: new UserModel(user)\n  };\n\n  const context = createExpressContext({\n    models,\n    user\n  }, res);\n\n  return {\n    schema,\n    formatError, // error formatting via apollo-errors\n    context // our resolver context\n  };\n}));\n\nexport default app;\n"	"## Resolver context\nResolvers are provided a mutable context object that is shared between all resolvers for a given request.  A common pattern with GraphQL is inject request-specific model instances into the resolver context for each request.  Models frequently reference one another, and unbinding circular references can be a pain.  `apollo-resolvers` provides a request context factory that allows you to bind context disposal to server responses, calling a `dispose` method on each model instance attached to the context to do any sort of required reference cleanup necessary to avoid memory leaks:\n"
array-intersection	"var intersection = require('array-intersection');\n\nintersection(['a', 'a', 'c'])\n//=> ['a', 'c']\n\nintersection(['a', 'b', 'c'], ['b', 'c', 'e'])\n//=> ['b', 'c']\n\nintersection(['a', 'b', 'c'], ['b', 'c', 'e'], ['b', 'c', 'e'])\n//=> ['b', 'c']\n"	"## Usage\n"
backbone.rel	"// models/project.js\nModels.Project.hasMany = function () {\n  return {\n    users: {collection: Collections.users, id: 'project_id'}\n  , tasks: {collection: Collection.tasks, filter: function (task) {\n      return task.rel('project') ? task.rel('project').id === this.id : null;\n    }}\n  };\n};\n\n// models/user.js\nModels.User.hasMany = function () {\n  return {\n    tasks: {collection: Collections.tasks, id: 'user_id'}\n  };\n};\n\nModels.User.belongsTo = function () {\n  return {\n    project: Collection.projects\n  };\n};\n\n// models/task.js\nModels.Task.belongsTo = function () {\n  return {\n    user: Collections.users\n  , project: function (task) {\n      return task.rel('user.project');\n    }\n  };\n};\n\nvar project = new Project({id: 1})\n  , user = new User({id: 1, project_id: 1})\n  , task1 = new Task({id: 1, user_id: 1})\n  , task2 = new Task({id: 2, user_id: 1});\n\nassert.equal(user.rel('tasks').length, 2);\nassert.equal(user.rel('project'), project);\nassert.equal(task1.rel('user'), user);\nassert.equal(task1.rel('project'), project);\n"	"## Example\n"
bitcoin-merkle-tree	"var merkleTree = require('bitcoin-merkle-tree')\n\n// build partial merkle tree object (block #681135 in testnet)\nvar partialMT = merkleTree.build({\n  hashes: [\n    new Buffer('52a893ef120d5e24aa38604ead9ada6628eea417df6d6096ef0dd7b73a89c0e9', 'hex'),\n    new Buffer('a76a1e1bffbbb254bd897e379298549eb8ff4aa57a4bb4c06637b36d76833207', 'hex'),\n    new Buffer('056b4e64697677788744a8ad23cc407cbc1c357ff889d9975edd431fb779466f', 'hex'),\n    new Buffer('3c51bfb4f9cdd2b8e3a5c47cb1b3bdbc8879a1c1b238d4123dcb572a00b2b80e', 'hex'),\n    new Buffer('d6d1f9ca0a4017050379a82ecccb050cf4218f2180087e9592110972a71e375c', 'hex')\n  ],\n  include: [\n    new Buffer('3c51bfb4f9cdd2b8e3a5c47cb1b3bdbc8879a1c1b238d4123dcb572a00b2b80e', 'hex'),\n    new Buffer('d6d1f9ca0a4017050379a82ecccb050cf4218f2180087e9592110972a71e375c', 'hex')\n  ],\n  merkleRoot: new Buffer('b9b4500294c18487dc32a929b587475fbf9652beb7d73010ea37ee0483e52e58', 'hex')\n})\n// { flags: [ 235, 1 ],\n//   hashes:\n//    [ <Buffer 19 d6 5e 9e 20 d4 55 db ae 6d 11 39 66 54 7a 1d 41 91 e3 cf eb 3c 4c 2a b9 0e d2 79 5f 39 c4 cc>,\n//      <Buffer 05 6b 4e 64 69 76 77 78 87 44 a8 ad 23 cc 40 7c bc 1c 35 7f f8 89 d9 97 5e dd 43 1f b7 79 46 6f>,\n//      <Buffer 3c 51 bf b4 f9 cd d2 b8 e3 a5 c4 7c b1 b3 bd bc 88 79 a1 c1 b2 38 d4 12 3d cb 57 2a 00 b2 b8 0e>,\n//      <Buffer d6 d1 f9 ca 0a 40 17 05 03 79 a8 2e cc cb 05 0c f4 21 8f 21 80 08 7e 95 92 11 09 72 a7 1e 37 5c> ],\n//   numTransactions: 5,\n//   merkleRoot: <Buffer b9 b4 50 02 94 c1 84 87 dc 32 a9 29 b5 87 47 5f bf 96 52 be b7 d7 30 10 ea 37 ee 04 83 e5 2e 58> }\n\n// extract included hashes from object\nvar hashes = merkleTree.extract(partialMT)\nconsole.log('Matched transactions: ', hashes.map(function(b) { return b.toString('hex') }))\n"	""
bitcoin-merkle-tree	"{\n  flags: number[],\n  hashes: Buffer[],\n  numTransactions: number,\n  merkleRoot: Buffer\n}\n"	"##### `var partialMerkleTree = merkleTree.build(block)`\nConstruct proof object for transactions. Proof object:\n"
bizfly-unleash-proxy-client	"import { UnleashClient } from 'bizfly-unleash-proxy-client';\n\nconst unleash = new UnleashClient({\n    url: 'https://hostname/hosted/api',\n    clientKey: 'your-proxy-key',\n    appName: 'my-webapp'\n});\n\n// Used to set the context fields, shared with the Unleash Proxy\nunleash.updateContext({userId: '1233'});\n\n// Start the background polling\nunleash.start();\n"	"**Step 2: Initialize the SDK**\nYou need to have a Unleash-hosted instance, and the proxy need to be enabled. In addition you will need a proxy-specific `clientKey` in order to connect  to the Unleash-hosted Proxy.\n"
bizfly-unleash-proxy-client	"unleash.isEnabled('proxy.demo');\n"	"**Step 3: Check if feature toggle is enabled**\n"
bizfly-unleash-proxy-client	"const variant = unleash.getVariant('proxy.demo');\nif(variant.name === 'blue') {\n // somehting with variant blue...\n}\n"	"**Step 4: Get toggle variant**\n"
bizfly-unleash-proxy-client	"unleash.on('update', () => {\n    const myToggle = unleash.isEnabled('proxy.demo');\n    //do something useful\n});\n"	"**Listen for updates via the EventEmitter**\nThe client is also an event emitter. This means that your code can subscribe to updates from the client. \nThis is a neat way to update a single page app when toggle state updates. \n"
blockcypher-unofficial	"var blockcypher = require('blockcypher-unofficial');\n"	"## Usage\nsimply require the npm module at the top of the file\n"
blockcypher-unofficial	"var client = blockcypher({\n  network: \"testnet\"\n});\n\n//example call\nclient.Addresses.Unspents([\"address 1\", \"address 2\", ...], callback);\n"	"##Networks\nThis adapter supports testnet, mainnet, and blockcyphers testnet. You may access each network by setting the network option to \none of these options:\ntestnet3: \"testnet\",\nBlockcypher's testnet: \"blockcypher-testnet\",\nmainnet: (anything but other two)\nyou may specify the options you wish to make a call like so:\n"
bmaplib.lushu	"import LuShu from 'bmaplib.lushu'\n\n// You should use this lib after BaiduMap loaded. For Example:\n\nloadBaiduMap.then(() => {\n  new LuShu()\n})\n"	"### ES Next\n"
brl-daily-quotation	"const { CurrencyCode, getLastQuote } = require('./')\n\ngetLastQuote(CurrencyCode.EURO_BUY).then(console.log)\n"	"This package is responsible for listing the daily quotation of foreign currencies against the Brazillian Real (BRL), all based on SOAP services provided by Banco do Brasil for free, which you can see here: [SOAL Service Banco do Brasil](https://www3.bcb.gov.br/sgspub/JSP/sgsgeral/FachadaWSSGS.wsdl)\nYou can use destructor to get the requisition function and an object in the desired currency to get the daily quote.\n"
brl-daily-quotation	"{ \n  id: '21620',\n  isSpecial: 'false',\n  source: 'PTAX',\n  fullName: 'Exchange rate - Free - Euro (bid)',\n  shortName: 'Euro (bid)',\n  fullNamePTbr: 'Taxa de câmbio - Livre - Euro (compra)',\n  shortNamePTbr: 'Euro (compra)',\n  periodicity: 'Diária',\n  periodicityInitials: 'D',\n  isLocked: 'false',\n  isPublic: 'true',\n  lastValue: '4.3522000',\n  defaultUnitPTbr: 'R$/u.m.c.',\n  defaultUnit: 'R$/c.m.u.',\n  dateCurrency: 2019-06-14T03: 00: 00.000Z\n}\n"	"With this code, you will obtain an object like this:\n"
byted-vuedraggable	"  import draggable from 'vuedraggable'\n  ...\n  export default {\n        components: {\n            draggable,\n        },\n  ...\n"	".vue file:\n"
byted-vuedraggable	"computed: {\n    myList: {\n        get() {\n            return this.$store.state.myList\n        },\n        set(value) {\n            this.$store.commit('updateList', value)\n        }\n    }\n}\n"	"### With Vuex:\n"
byted-vuedraggable	"function onMoveCallback(evt, originalEvent){\n   ...\n    // return false; — for cancel\n}\n"	"#### move\nType: `Function`<br>\nRequired: `false`<br>\nDefault: `null`<br>\nIf not null this function will be called in a similar way as [Sortable onMove callback](https://github.com/RubaXa/Sortable#move-event-object).\nReturning false will cancel the drag operation.\n"
byted-vuedraggable	"checkMove: function(evt){\n    return (evt.draggedContext.element.name!=='apple');\n}\n"	"javascript:\n"
byted-vuedraggable	" Bower install vue.draggable\n"	"## Installation\n- Available through:\n"
cacache	"const cacache = require('cacache')\nconst fs = require('fs')\n\nconst tarball = '/path/to/mytar.tgz'\nconst cachePath = '/tmp/my-toy-cache'\nconst key = 'my-unique-key-1234'\n\n// Cache it! Use `cachePath` as the root of the content cache\ncacache.put(cachePath, key, '10293801983029384').then(integrity => {\n  console.log(`Saved content to ${cachePath}.`)\n})\n\nconst destination = '/tmp/mytar.tgz'\n\n// Copy the contents out of the cache and into their destination!\n// But this time, use stream instead!\ncacache.get.stream(\n  cachePath, key\n).pipe(\n  fs.createWriteStream(destination)\n).on('finish', () => {\n  console.log('done extracting!')\n})\n\n// The same thing, but skip the key index.\ncacache.get.byDigest(cachePath, integrityHash).then(data => {\n  fs.writeFile(destination, data, err => {\n    console.log('tarball data fetched based on its sha512sum and written out!')\n  })\n})\n"	"### Example\n"
cacache	"cacache.ls(cachePath).then(console.log)\n// Output\n{\n  'my-thing': {\n    key: 'my-thing',\n    integrity: 'sha512-BaSe64/EnCoDED+HAsh=='\n    path: '.testcache/content/deadbeef', // joined with `cachePath`\n    time: 12345698490,\n    size: 4023948,\n    metadata: {\n      name: 'blah',\n      version: '1.2.3',\n      description: 'this was once a package but now it is my-thing'\n    }\n  },\n  'other-thing': {\n    key: 'other-thing',\n    integrity: 'sha1-ANothER+hasH=',\n    path: '.testcache/content/bada55',\n    time: 11992309289,\n    size: 111112\n  }\n}\n"	"##### Example\n"
cacache	"cacache.ls.stream(cachePath).on('data', console.log)\n// Output\n{\n  key: 'my-thing',\n  integrity: 'sha512-BaSe64HaSh',\n  path: '.testcache/content/deadbeef', // joined with `cachePath`\n  time: 12345698490,\n  size: 13423,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n\n{\n  key: 'other-thing',\n  integrity: 'whirlpool-WoWSoMuchSupport',\n  path: '.testcache/content/bada55',\n  time: 11992309289,\n  size: 498023984029\n}\n\n{\n  ...\n}\n"	"##### Example\n"
cacache	"// Look up by key\ncache.get(cachePath, 'my-thing').then(console.log)\n// Output:\n{\n  metadata: {\n    thingName: 'my'\n  },\n  integrity: 'sha512-BaSe64HaSh',\n  data: Buffer#<deadbeef>,\n  size: 9320\n}\n\n// Look up by digest\ncache.get.byDigest(cachePath, 'sha512-BaSe64HaSh').then(console.log)\n// Output:\nBuffer#<deadbeef>\n"	"##### Example\n"
cacache	"// Look up by key\ncache.get.stream(\n  cachePath, 'my-thing'\n).on('metadata', metadata => {\n  console.log('metadata:', metadata)\n}).on('integrity', integrity => {\n  console.log('integrity:', integrity)\n}).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n// Outputs:\nmetadata: { ... }\nintegrity: 'sha512-SoMeDIGest+64=='\n\n// Look up by digest\ncache.get.stream.byDigest(\n  cachePath, 'sha512-SoMeDIGest+64=='\n).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n"	"##### Example\n"
cacache	"cacache.get.info(cachePath, 'my-thing').then(console.log)\n\n// Output\n{\n  key: 'my-thing',\n  integrity: 'sha256-MUSTVERIFY+ALL/THINGS=='\n  path: '.testcache/content/deadbeef',\n  time: 12345698490,\n  size: 849234,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n"	"##### Example\n"
cacache	"cacache.get.hasContent(cachePath, 'sha256-MUSTVERIFY+ALL/THINGS==').then(console.log)\n\n// Output\n{\n  sri: {\n    source: 'sha256-MUSTVERIFY+ALL/THINGS==',\n    algorithm: 'sha256',\n    digest: 'MUSTVERIFY+ALL/THINGS==',\n    options: []\n  },\n  size: 9001\n}\n\ncacache.get.hasContent(cachePath, 'sha521-NOT+IN/CACHE==').then(console.log)\n\n// Output\nfalse\n"	"##### Example\n"
cacache	"fetch(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).then(data => {\n  return cacache.put(cachePath, 'registry.npmjs.org|cacache@1.0.0', data)\n}).then(integrity => {\n  console.log('integrity hash is', integrity)\n})\n"	"##### Example\n"
cacache	"request.get(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).pipe(\n  cacache.put.stream(\n    cachePath, 'registry.npmjs.org|cacache@1.0.0'\n  ).on('integrity', d => console.log(`integrity digest is ${d}`))\n)\n"	"##### Example\n"
cacache	"cacache.rm.all(cachePath).then(() => {\n  console.log('THE APOCALYPSE IS UPON US 😱')\n})\n"	"##### Example\n"
cacache	"cacache.rm.entry(cachePath, 'my-thing').then(() => {\n  console.log('I did not like it anyway')\n})\n"	"##### Example\n"
cacache	"cacache.rm.content(cachePath, 'sha512-SoMeDIGest/IN+BaSE64==').then(() => {\n  console.log('data for my-thing is gone!')\n})\n"	"##### Example\n"
cacache	"cacache.tmp.mkdir(cache).then(dir => {\n  fs.writeFile(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n})\n"	"##### Example\n"
cacache	"cacache.tmp.mkdir(cache).then(dir => {\n  writeFile(path.join(dir, 'file'), someData).then(() => {\n    // make sure we didn't just put a root-owned file in the cache\n    cacache.tmp.fix().then(() => {\n      // all uids and gids match now\n    })\n  })\n})\n"	"##### Example\n"
cacache	"cacache.tmp.withTmp(cache, dir => {\n  return fs.writeFileAsync(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n}).then(() => {\n  // `dir` no longer exists\n})\n"	"##### Example\n"
cacache	"const crypto = require('crypto')\nconst hashAlgorithm = 'sha512'\nconst data = 'foobarbaz'\n\nconst integrity = (\n  hashAlgorithm +\n  '-' +\n  crypto.createHash(hashAlgorithm).update(data).digest('base64')\n)\n"	"##### Generating Digests Yourself\nIf you have an existing content shasum, they are generally formatted as a\nhexadecimal string (that is, a sha1 would look like:\n`5f5513f8822fdbe5145af33b64d8d970dcf95c6e`). In order to be compatible with\ncacache, you'll need to convert this to an equivalent subresource integrity\nstring. For this example, the corresponding hash would be:\n`sha1-X1UT+IIv2+UUWvM7ZNjZcNz5XG4=`.\nIf you want to generate an integrity string yourself for existing data, you can\nuse something like this:\n"
cacache	"cacache.verify(cachePath).then(stats => {\n  // deadbeef collected, because of invalid checksum.\n  console.log('cache is much nicer now! stats:', stats)\n})\n"	"##### Example\n"
cacache	"cacache.verify(cachePath).then(() => {\n  cacache.verify.lastRun(cachePath).then(lastTime => {\n    console.log('cacache.verify was last called on' + lastTime)\n  })\n})\n"	"##### Example\n"
chileexpress	"var chileexpress = require('chileexpress');\n\nchileexpress(['600110073533']).then(r=>{\n\tconsole.log(r);\n}).catch(e => {\n\tconsole.log(e);\n})\n"	"##Uso\n"
chileexpress	"  {\n    \"info\": {\n      \"orden_de_transporte \": \"600110073533\",\n      \"producto \": \"Encomienda\",\n      \"servicio \": \"Dia Habil Siguiente\",\n      \"estado \": \"Pieza en ruta al  DESTINATARIO\"\n    },\n    \"entrega\": {\n      \"rut_receptor\": \"14111532-4\",\n      \"fecha_entrega\": \"30/07/2015\",\n      \"hora_entrega\": \"11:24\",\n      \"nombre_receptor\": \"ALEXIS ADASME\"\n    },\n    \"hitos\": [\n      {\n        \"fecha\": \"30/07/2015\",\n        \"hora\": \"11:24\",\n        \"actividad\": \"Pieza en ruta al  DESTINATARIO\"\n      },\n      {\n        \"fecha\": \"29/07/2015\",\n        \"hora\": \"08:42\",\n        \"actividad\": \"Pieza en tránsito al destino ANTOFAGASTA BAQUEDANO\"\n      },\n      {\n        \"fecha\": \"28/07/2015\",\n        \"hora\": \"18:33\",\n        \"actividad\": \"Pieza en tránsito al destino CENTRO DE DISTRIBUCIÓN SANTIAGO\"\n      },\n      {\n        \"fecha\": \"28/07/2015\",\n        \"hora\": \"17:35\",\n        \"actividad\": \"Pieza recibida en Chilexpress\"\n      }\n    ]\n  }\n\n"	"**Función principal:** Recibe un arreglo de códigos de seguimiento y retorna una promesa con un arreglo con la información para cada código de seguimiento\n**Params**\n- Códigos de seguimiento `Array<String>`\n**Returns**: \n- Resultados `Promise<Array<result>>`\n**Ejemplo de result:**\n"
chrono-node-albinodrought	"> var chrono = require('chrono-node')\n\n> chrono.parseDate('An appointment on Sep 12-13') \nFri Sep 12 2014 12:00:00 GMT-0500 (CDT)\n    \n> chrono.parse('An appointment on Sep 12-13');\n[ { index: 18,\n    text: 'Sep 12-13',\n    tags: { ENMonthNameMiddleEndianParser: true },\n    start: \n     { knownValues: [Object],\n       impliedValues: [Object] },\n    end: \n     { knownValues: [Object],\n       impliedValues: [Object] } } ]\n"	"## Usage\nSimply pass a string to function `chrono.parseDate` or `chrono.parse`. \n"
chrono-node-albinodrought	"\n> chrono.parseDate('Friday', new Date(2012,7,23)); \nFri Aug 24 2012 12:00:00 GMT+0700 (ICT)\n\n> chrono.parseDate('Friday', new Date(2012,7,1)); \nFri Aug 03 2012 12:00:00 GMT+0700 (ICT)\n"	"### Reference Date\nToday's \"Friday\" is different from last month's \"Friday\". \nThe meaning of the referenced dates depends on when they are mentioned. \nChrono lets you define a reference date using `chrono.parse(text, ref)` and `chrono.parseDate(text, ref)`.    \n"
chrono-node-albinodrought	"var results = chrono.parse('I have an appointment tomorrow from 10 to 11 AM')\n\nresults[0].index  // 15\nresults[0].text   // 'tomorrow from 10 to 11 AM'\nresults[0].ref    // Sat Dec 13 2014 21:50:14 GMT-0600 (CST)\n\nresults[0].start.date()  // Sun Dec 14 2014 10:00:00 GMT-0600 (CST)\nresults[0].end.date()    // Sun Dec 14 2014 11:00:00 GMT-0600 (CST)\n"	"### Detailed Parsed Results\nThe function `chrono.parse` returns detailed parsing results as objects of class `chrono.ParsedResult`. \n"
chrono-node-albinodrought	"// Remove the timezone offset of a parsed date and then create the Date object\n> var results = new chrono.parse('2016-03-08T01:16:07+02:00'); // Create new ParsedResult Object\n> results[0].start.assign('timezoneOffset', 0); // Change value in ParsedComponents Object 'start'\n> var d = results[0].start.date(); // Create a Date object\n> d.toString(); // Display resulting Date object\n'Tue Mar 08 2016 01:16:07 GMT+0000 (GMT)'\n"	"#### ParsedComponents\nA group of found date and time components (year, month, hour, etc). ParsedComponents objects consist of `knownValues` and `impliedValues`.\n* `assign(component, value)`  Set known value to the component\n* `imply(component, value)`   Set implied value to the component\n* `get(component)`            Get known or implied value for the component\n* `isCertain(component)`      return true if the value of the component is known.\n* `date()`                    Create a javascript Date\n"
chrono-node-albinodrought	"// 'strict' mode\nchrono.strict.parseDate('Today');       // null\nchrono.strict.parseDate('Friday');      // null\nchrono.strict.parseDate('2016-07-01');  // Fri Jul 01 2016 12:00:00 ...\nchrono.strict.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\n\n// 'casual' mode (default) \nchrono.parseDate('Today');              // Thu Jun 30 2016 12:00:00 ...\nchrono.casual.parseDate('Friday');      // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('Friday');      // Fri Jul 01 2016 12:00:00 ...\n"	"### Strict vs Casual \nChrono comes with `strict` mode that parse only formal date patterns. \n"
chrono-node-albinodrought	"var christmasParser = new chrono.Parser();\n\n// Provide search pattern\nchristmasParser.pattern = function () { return /Christmas/i } \n\n// This function will be called when matched pattern is found\nchristmasParser.extract = function(text, ref, match, opt) { \n    \n    // Return a parsed result, that is 25 December\n    return new chrono.ParsedResult({\n        ref: ref,\n        text: match[0],\n        index: match.index,\n        start: {    \n            day: 25, \n            month: 12, \n        }\n    });\n}\n\n// Create a new custom Chrono. The initial pipeline 'option' can also be specified as \n// - new chrono.Chrono(exports.options.strictOption())\n// - new chrono.Chrono(exports.options.casualOption())\nvar custom = new chrono.Chrono();\ncustom.parsers.push(christmasParser);\n\ncustom.parseDate(\"I'll arrive at 2.30AM on Christmas night\") \n// Wed Dec 25 2013 02:30:00 GMT+0900 (JST)\n\n"	"### Parser\nParser is a module for low-level pattern-based parsing. Ideally, each parser should be designed to handle a single specific date format. User can add new type of parsers for supporting new date formats or languages.\n"
chrono-node-albinodrought	"var guessPMRefiner = new chrono.Refiner();\nguessPMRefiner.refine = function(text, results, opt) {\n    // If there is no AM/PM (meridiem) specified, \n    //  let all time between 1:00 - 4:00 be PM (13.00 - 16.00)\n    results.forEach(function (result) {\n        if (!result.start.isCertain('meridiem') \n            &&  result.start.get('hour') >= 1 && result.start.get('hour') < 4) {\n            \n            result.start.assign('meridiem', 1);\n            result.start.assign('hour', result.start.get('hour') + 12);\n        }\n    });\n    return results;\n} \n\n// Create a new custom Chrono. The initial pipeline 'option' can also be specified as \n// - new chrono.Chrono(exports.options.strictOption())\n// - new chrono.Chrono(exports.options.casualOption())\nvar custom = new chrono.Chrono();\ncustom.refiners.push(guessPMRefiner);\n\n// This will be parsed as PM.\n// > Tue Dec 16 2014 14:30:00 GMT-0600 (CST) \ncustom.parseDate(\"This is at 2.30\");\n\n// Unless the 'AM' part is specified\n// > Tue Dec 16 2014 02:30:00 GMT-0600 (CST)\ncustom.parseDate(\"This is at 2.30 AM\");\n"	"### Refiner\nRefiner is a higher level module for improving or manipulating the results. User can add a new type of refiner to customize Chrono's results or to add some custom logic to Chrono.\n"
cordova-plugin-notch-fix	"/** \r\n* @name has\r\n* @returns Promise<boolean>\r\n*/\r\ncutout.has();\r\n"	"### has()\r\n\r\n"
crosstree	"const treeA = new CrossTree();\ntreeA.subpath([\"alice\", \"firstName\"]).setValue(\"Alice\");\ntreeA.subpath([\"alice\", \"lastName\"]).setValue(\"Bloggs\");\nlet aliceData = treeA.toData();\n"	"## Examples:\n- Use setValue on a tree path:\n"
crosstree	"{\n  _: {\n    alice: {\n      _: {\n        firstName: { v: \"Alice\", t: 1572130604728 },\n        lastName: { v: \"Bloggs\", t: 1572130604728 }\n      }\n    }\n  }\n}\n"	"`aliceData` ->\n"
crosstree	"const treeB = new CrossTree({ _: { bob: { _: { firstName: { v: \"Bob\", t: 1571241715839 } } } } });\ntreeB.mergeData(aliceData); // receive Alice's data\ntreeB.subpath([\"alice\", \"firstName\"]).getValue(); // -> Alice\nlet bobData = treeB.toData();\n"	"- Merge data with another replica:\n"
crosstree	"{\n  _: {\n    bob: {\n      _: {\n        firstName: { v: \"Bob\", t: 1571241715839 }\n      }\n    },\n    alice: {\n      _: {\n        firstName: { v: \"Alice\", t: 1572130604728 },\n        lastName: { v: \"Bloggs\", t: 1572130604728 }\n      }\n    }\n  }\n}\n"	"`bobData` ->\n"
crosstree	"\ntreeA.observeTree( (event) => {\n    const { change, before, after } = event;\n    sendToBob( change );\n    // change.data - new entry data\n    // change.path - path of changed entry\n});\n"	"- Send changes by observing tree:\n"
crosstree	"{ v: \"My Repo\"\n  _: {\n   \"README.md\": { v: \"blob:1234\", t: 1571200000000  },\n   \"package.json\": { v: \"blob:9876\", t: 1572300000000 },\n   \"src\": {\n      v:\"dir\", t: 1573400000000,\n      _:{\n          \"index.ts\": { v: \"text:hello\", t: 1574500000000 }\n      }\n   }\n}}\n"	"## Use Cases\n- File Structure\n"
crosstree	"{ _:{\n  \"6fa459ea\": {\n    _:{\n      \"name\": { v: \"Alice\", t: 1571200000000 },\n      \"type\": { v: \"admin\", t: 1571200000000 },\n    }\n  },\n  \"ee8a3ca4\": {\n    _:{\n      \"name\": { v: \"Bob\", t: 1574500000000 },\n      \"type\": { v: \"guest\", t: 1574500000000 },\n    }\n  },\n}}\n"	"- Records\n"
crosstree	"{ v: \"Sheet 1\"\n  _: {\n   \"A1\": { v: \"Column 1\", t: 1571200000000 },\n   \"A2\": { v: \"613423\", t: 1572300000000 },\n   \"A3\": { v: \"875243\", t: 1572300000000 },\n}}\n"	"- Spreadsheet\n"
css-classes	"const cssClasses = require(\"css-classes\");\n"	"## Usage\n"
css-classes	"    const arr = [\".a {} .b {}\", \".a {} .c {}\"];\n    cssClasses(arr) // => [\"a\", \"b\", \"c\"]\n    cssClasses(arr, false) // => [\"a\", \"b\", \"c\"]\n    \n    const text = \".a {} .b {} .a {} .c {}\";\n    cssClasses(text) // => [\"a\", \"b\", \"c\"]\n    cssClasses(text, false) // => [\"a\", \"b\", \"c\"]\n"	"### Unique\n"
css-classes	"    const arr = [\".a {} .b {}\", \".a {} .c {}\"];\n    cssClasses(arr, true) // => [\"a\", \"b\", \"a\", \"c\"]\n    \n    const text = \".a {} .b {} .a {} .c {}\";\n    cssClasses(text, true) // => [\"a\", \"b\", \"a\", \"c\"]\n"	"### Include duplicates\n"
csv-iterator	"var createCSVIterator = require('csv-iterator')\n\nvar iterator = createCSVIterator({path: 'input.csv', from: 10, to: 20})\n"	"[![Build Status](https://travis-ci.org/mirkokiefer/csv-iterator.png?branch=master)](https://travis-ci.org/mirkokiefer/csv-iterator)\n[![NPM](https://nodei.co/npm/csv-iterator.png)](https://nodei.co/npm/csv-iterator/)\nA ligthweight async csv-iterator for Node.js.\nExample that creates an iterator from a file to iterate over rows 10 to 20:\n"
cubx-grunt-webpackage-scaffold	"grunt.loadNpmTasks('cubx-grunt-webpackage-scaffold');\n"	"Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n"
custom-jszip	"var zip = new JSZip();\n\nzip.file(\"Hello.txt\", \"Hello World\\n\");\n\nvar img = zip.folder(\"images\");\nimg.file(\"smile.gif\", imgData, {base64: true});\n\nzip.generateAsync({type:\"blob\"}).then(function(content) {\n    // see FileSaver.js\n    saveAs(content, \"example.zip\");\n});\n\n/*\nResults in a zip containing\nHello.txt\nimages/\n    smile.gif\n*/\n"	"=====\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/jszip.svg)](https://saucelabs.com/u/jszip)\nA library for creating, reading and editing .zip files with JavaScript, with a\nlovely and simple API.\nSee https://stuk.github.io/jszip for all the documentation.\n"
cvss	"var cvss = require('cvss');\n\nvar score = cvss.getScore('CVSS:3.0/AV:P/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L');\n\nconsole.log(score) // => 6.2\n\nvar rating = cvss.getRating(score);\n\nconsole.log(rating) // => Medium\n"	"## Usage\n"
cvss	"{\n    score: getBaseScore(input),\n    rating: getRating(getBaseScore(input))\n}\n"	"### #getBase [String or Object input], [Object options (optional)]\nReturns an object with the base score and its rating. Equivalent to\n"
cvss	"{\n    score: getEnvironmentalScore(input),\n    rating: getRating(getEnvironmentalScore(input))\n}\n"	"### #getEnvironmental [String or Object input], [Object options (optional)]\nReturns an object with the environmental score and its rating. Equivalent to\n"
cvss	"{\n    score: getTemporalScore(input),\n    rating: getRating(getTemporalScore(input))\n}\n"	"### #getTemporal [String or Object input], [Object options (optional)]\nReturns an object with the environmental score and its rating. Equivalent to\n"
cvss	"{\n    base: getBase(input),\n    temporal: getTemporal(input),\n    environmental: getEnvironmental(input)\n}\n"	"### #getAll [String or Object input], [Object options (optional)]\nReturns object with the score and rating for all three scores:\n"
days-calendar	"import DaysCalendar from 'days-calendar';\n\nnew Vue({\n  el: '#your-dom-element',\n   components: {\n      Calendar: DaysCalendar\n   }\n})\n"	"#### Base\n"
days-calendar	"renderDay(day){\n  console.log(day);\n  return day;\n}\n\n/* Day object:\n{ number: (Number of that day), date: (Moment Date Object), class: [] } */\n"	"#### renderDay (optional)\nIf you pass this props to Days Calendar, it will pass day object to the function before render the content.\nThis function should return a day object array.\n"
days-calendar	"renderDays(year, month, days){\n  return new Promise((resolve, reject) => {\n     //Do something\n     resolve(days);\n  });\n}\n"	"#### renderDays (optional)\nIf you pass this props to Days Calendar, it will pass the array of day object to the function before render the content.\nThis function should return promise which resolve days array or error.\n"
days-calendar	"onClick(day){\n  console.log('This day is:', day);\n}\n"	"#### onClick (optional)\nIf you pass this props to Days Calendar, it will pass the day object to the function before render the content.\nIt will allow you control the behavior after click on any day.\n"
democracyos-toggle	"var Toggle = require('toggle');\n\nvar toggle = new Toggle();\ndocument.body.appendChild(toggle.el);\n\ntoggle.value(); // false\n\ntoggle.value(true);\ntoggle.value(); // true\n\ntoggle.toggle();\ntoggle.value(); // false\n"	"## Example\n    \n"
dotenv-utils	"const {boolean} = require(\"dotenv-utils\")\n\nboolean(\"true\") // true\nboolean(\"TRUE\") // true\nboolean(\"false\") // false\nboolean(\"foo\") // false\nboolean(\"\") // false\nboolean(undefined) // false\n"	"### `boolean`\nConverts a string representation (case-insensitive) of a boolean to an actual boolean.\n"
dotenv-utils	"const {number} = require(\"dotenv-utils\")\n\nnumber(\"123\") // 123\nnumber(\"  123   \") // 123\nnumber(\"foo\") // 0\nnumber(undefined) // 0\n"	"### `number`\nConverts a string representation of a number to an actual number. Basically like `Number(x)`, but will return a `0` instead of `NaN` when string cannot be converted to a number.\n"
dotenv-utils	"const {string} = require(\"dotenv-utils\")\n\nstring(\"foo\") // foo\nstring(\"  foo   \") // \"foo\"\nstring(\"\") // \"\"\nstring(undefined) // \"\"\n"	"### `string`\nTrims the supplied string. If provided a falsy value, returns `\"\"`. This is mainly useful when used in conjunction with the [`conform`](#conform) helper.\n"
dotenv-utils	"const {array} = require(\"dotenv-utils\")\n\narray(\"foo, bar, baz\") // [\"foo\", \"bar\", \"baz\"]\narray(\"foo,   bar,    baz\") // [\"foo\", \"bar\", \"baz\"]\narray(\",,,\") // []\narray(\"\") // []\narray(undefined) // []\n"	"### `array`\nConverts a string of comma-separated values (`\"foo, bar, baz\"`) to an array. Any extra whitespace will be trimmed and empty strings discarded.\n"
dotenv-utils	"const {object} = require(\"dotenv-utils\")\n\nobject(\"foo: bar, baz: quux\") // {foo: \"bar\", baz: \"quux\"}\nobject(\"foo:    bar   ,baz:quux\") // {foo: \"bar\", baz: \"quux\"}\nobject(\":,foo:\") // {foo: \"\"}\nobject(\"::,\") // {}\nobject(\"\") // {}\nobject(undefined) // {}\n"	"### `object`\nConverts a string of comma-separated tuples (`\"foo: bar, baz: quux\"`) to an object. Any extra whitespace from either key or value will be discarded, as are tuples with falsy keys.\n"
dotenv-utils	"// Make sure you have loaded the env vars somehow,\n// either inline or using `dotenv`...\n\nconst {conform, boolean, array, string} = require(\"dotenv-utils\")\n\n// Specify a schema using the conversion functions\nconst schema = {\n  MINIFY: boolean,\n  DEFAULT_LOCALE: string,\n  SUPPORTED_LOCALES: array,\n}\n\n// Drop `process.env` into `conform`\nconst config = conform(process.env, schema)\n\n// `config` is now:\n// {\n//   MINIFY: false,\n//   DEFAULT_LOCALE: \"en-GB\",\n//   SUPPORTED_LOCALES: [\"en-GB\", \"cs-CZ\", \"pl-PL\"],\n// }\n\nmodule.exports = config\n"	"You can do this:\n"
ember-cli-deploy-github-status	"ENV.github = {\n  token: '<your-github-token>',\n  userOrOrganization: '<user-name>'\n  repo: '<my-ember-app-repo>',\n  publicURL: '<url-where-assets-will-be-viewed-from>',\n  commitUser: '<who-made-the-commit',\n  commitSha: '<sha-for-specific-commit>'\n}\n"	"- Get a github api [token](https://github.com/settings/tokens) make sure the `repo:status` scope is selected\n- Place the following configuration into `config/deploy.js`\n"
ember-query-layer	"import { query } from 'ember-query-layer';\nexport default Route.extend({\n  model: query`\n    query PostsRoute {\n      post {\n        comments {\n          author\n        }\n      }\n    }\n  `\n});\n"	"## Planned Usage\nWAIT! Using `model()` isn't really ideal, since it doesn't always get\ncalled. Was there a new hook called `data()` or something? Or could we\nreopen link-to somehow and check whether the target route has a\nquery-layer model hook?\nThis doesn't work yet! But practicing some README-driven development,\nhere's what I'm thinking:\n"
ember-query-layer	"export default Route.extend({\n  model() {\n    return this.store.findAll('post', {\n      include: 'comments,comments.author'\n    });\n  }\n});\n"	"This will have a similar effect to (although without the confusing\nsemantics of reload, backgroundReload, or async relationships. A single\npromise is returned, which resolves with all the data you requested.\nNote - you don't need to specify scalar fields (only relationships), because they're already\nspecified in your DS.Model, and REST endpoints usually return the whole\nrecord anyway)\n"
ember-query-layer	"import { Route } from '@ember/routing';\nimport { query } from 'ember-query-layer';\n\nexport default Route.extend({\n  model: query`\n    query PostRoute($post_id: ID) {\n      post(id: $post_id)\n    }\n  `\n});\n"	"You can use \nEquivalent to `store.findRecord()`:\n"
execsyncs	"var execsyncs = require(\"execsyncs\");\nvar ls = \"\" + execsyncs(\"ls\");\nconsole.log(ls);\n"	"===============\n[![Build Status](https://travis-ci.org/yosuke-furukawa/execsyncs.svg?branch=master)](https://travis-ci.org/yosuke-furukawa/execsyncs)\nexecSync for node v0.10 and v0.11.\nIf your node version is v0.11, execsyncs uses core library (child_process.execSync).\nHowever, if your node version is v0.10, execsyncs uses own native module (execsync.cc).\nHow to use\n================\n"
expensify	"var Expensify = require('expensify');\n\nvar expensify = new Expensify({\n  expensifyPartnerName: <YOUR EXPENSIFY_PARTNER_NAME>,\n  expensifyPartnerPassword: <YOUR EXPENSIFY_PARTNER_PASSWORD>,\n  expensifyAesKey: <YOUR EXPENSIFY_AES_KEY>,\n  expensifyAesIv: <YOUR EXPENSIFY_AES_IV>\n});\n"	"## Example\nGenerate an Expensify SSO for user 'testuser@test.com'.\n"
expensify	"expensify.authenticate({\n  userSecret: 'MyGreatSecret'\n}, function(e, sso) {\n  console.log(sso);\n});\n"	"Create and store a user id and secret for the the user you'd like to connect\n"
expensify	"expensify.authorizeUrl({\n  sso: '675sd98769sd69sd',\n  userId: 'testuser@test.com',\n  exitTo: 'http://mysite.com/expensify/redirect'\n}, function(e, url) {\n  console.log(url);\n});\n"	"Get an formatted Authorize URL\n"
expensify	"expensify.createDistanceTransaction({\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Transaction created');\n});\n"	"Create an expense transaction using the sso created above.\n"
expensify	"expensify.createDistanceTransaction({\n  created: '2015-04-07',\n  distance: 2.3,\n  units: 'Mi',\n  comment: 'A trip to the store',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Distance Transaction created');\n});\n"	"Create a separate distanceTransaction for that user.\n"
expensify	"expensify.uploadReceipt({\n  file: 'R0lGODlhEAAQAKUAAAAAABbkKBfhKRXlJxfiKBjgKRndKhrbKxzYKxbjKBneKhrcKhvZKxzXLB7VLRjfKRzYLB3WLBrbKh7ULR/SLh3VLR/TLSDQLiHOLyLLMCTJMB/RLiHPLyLMLyPKMCTIMSbFMifDMyXGMSjBMym/NCfCMyq9NCu7NSXGMifDMim+NCq8NSu5NSu6Nf///////////////////////////////////////////////////////////////////////yH5BAEKAD8ALAAAAAAQABAAAAZlwJ9wSCwafwDAsZgMCJJL5IBQMBwQSiMgIVAsGA1HlvkwACAR6BEgYQAmFLW2UbFcMBnNmLnhdDwfICF7REkfIgAjJIRDSSAlACYnjEgoKSMqKywslAAlJCYtm5RCSaOkhahRRkEAOw==',\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Receipt uploaded');\n});\n"	"Upload a receipt\n"
expensify	"expensify.fetchReceipt({\n  location: 'http://we.are.expensify.com/assets/img/icon-rounded.png',\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Receipt fetched');\n});\n\n"	"Fetch a receipt from a URL\n"
fis-parser-jade	"//file : path/to/project/fis-conf.js\r\n\r\n//使用fis-parser-jade插件编译jade文件\r\nfis.config.set('modules.parser.jade', 'jade');\r\n//jade文件经过编译后输出为html文件\r\nfis.config.set('roadmap.ext.jade', 'html');\r\n"	"### 启用插件\r\n\r\n"
fis-parser-jade	"var jadeConf = {\r\n\tfilters : {\r\n\t\tjadesrc : require('jade-highlighter')\r\n\t},\r\n  pretty  : true\r\n};\r\n\r\nfis.config.set('settings.parser.jade', jadeConf);\r\n"	"### 添加自定义filter与jade编译设置\r\n\r\n"
fl-backbone-rest	"var Backbone = require('backbone');\nvar RestController = require('backbone-rest');\nvar ensureLoggedIn = require('connect-ensure-login');\n\nvar customAuthorization = function(req, res, next) {\n  if (!req.user.canAccessTask(req)) {\n    return res.status(401).send('you cannot access this task');\n  }\n  return next();\n};\n\nnew RestController(app, {\n  auth: [ensureLoggedIn('/login'), customAuthorization],\n  model_type: Task,\n  route: '/tasks'\n});\n"	"#### Examples (JavaScript)\n"
gatsby-source-duodealer	"plugins: [\n  /*\n   * Gatsby's data processing layer begins with “source”\n   * plugins. Here the site sources its data from Duo Dealer.\n   */\n  {\n    resolve: \"gatsby-source-duodealer\",\n    options: {\n      // The domain name of your Duo Dealer shop. This is required.\n      // Example: 'gatsby-source-duodealer-test-shop' if your Duo Dealer address is\n      // 'gatsby-source-duodealer-test-shop.myduodealer.com'.\n      shopName: \"gatsby-source-duodealer-test-shop\",\n\n      // An API access token to your Duo Dealer shop. This is required.\n      // You can generate an access token in the \"Manage private apps\" section\n      // of your shop's Apps settings. In the Storefront API section, be sure\n      // to select \"Allow this app to access your storefront data using the\n      // Storefront API\".\n      // See: https://help.duodealer.com/api/custom-storefronts/storefront-api/getting-started#authentication\n      accessToken: \"example-wou7evoh0eexuf6chooz2jai2qui9pae4tieph1sei4deiboj\",\n\n      // Set verbose to true to display a verbose output on `npm run develop`\n      // or `npm run build`. This prints which nodes are being fetched and how\n      // much time was required to fetch and process the data.\n      // Defaults to true.\n      verbose: true,\n    },\n  },\n]\n"	"## How to use\nEnsure you have an access token for the [Duo Dealer Storefront API][duodealer-storefront-api]. The token should have the following permissions:\n- Read products, variants, and collections\n- Read product tags\n- Read content like articles, blogs, and comments\nThen in your `gatsby-config.js` add the following config to enable this plugin:\n"
gatsby-source-duodealer	"const path = require(\"path\")\n\nexports.createPages = async ({ graphql, boundActionCreators }) => {\n  const { createPage } = boundActionCreators\n\n  const pages = await graphql(`\n    {\n      allDuoDealerProduct {\n        edges {\n          node {\n            id\n            handle\n          }\n        }\n      }\n    }\n  `)\n\n  pages.data.allDuoDealerProduct.edges.forEach(edge => {\n    createPage({\n      path: `/${edge.node.handle}`,\n      component: path.resolve(\"./src/templates/product.js\"),\n      context: {\n        id: edge.node.id,\n      },\n    })\n  })\n}\n"	"## Site's `gatsby-node.js` example\n"
gcloud-monitor	"const monitor = require('gcloud-monitor')({\n  project: '<google-cloud-project-name>',\n  resource: {\n    // optional, defaults to {type: 'global'}\n    // more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/MonitoredResource\n  },\n  auth: {\n    // optional, if using on GCE\n    // more info: https://github.com/google/google-api-nodejs-client#authorizing-and-authenticating\n  },\n  // optional: default report throttle time\n  timeout: 1000\n})\n\n/**\n * create a gauge\n * more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricDescriptor\n * @param  {String} metricType\n * @param  {Object} [opts] metric params\n * @param  {Object} [opts.throttle] // report throttle time\n * @param  {Object} [opts.description]\n * @param  {Object} [opts.displayName]\n * @param  {Object} [opts.labels] label descriptors\n * @param  {Object} [opts.metricDomain] default: 'custom.googleapis.com'\n * @param  {Object} [opts.unit]\n * @param  {Object} [opts.valueType] default: 'INT64'\n * @return {Promise<Gauge,Error>} resolves gauge instance\n */\nmonitor.createGauge('connections', {\n  displayName: 'Connections',\n  description: 'Active socket connection count',\n  labels: [{\n    key: 'foo',\n    description: 'foo label description',\n    valueType: 'INT64'\n  }],\n  unit: 'connections',\n  valueType: 'INT64'\n}).then((gauge) => {\n  // use gauge...\n})\n"	"#### Create a Gauge Metric\n"
gcloud-monitor	"/**\n * report a metric value\n * @param  {*} value\n * @param  {Date} [time]\n * @param  {Object} [labels]\n * @return {Promise}\n */\ngauge.report(1, new Date(), {\n  foo: 1\n}).then((data) => {\n  console.log('Response data', data)\n})\n"	"#### Report Gauge Metric Data\n"
gcloud-monitor	"/**\n * delete the cumulative metric\n * @return {Promise}\n */\ngauge.delete().then(function (data) {\n  console.log('Response data', data)\n})\n"	"#### Delete a Gauge Metric\n"
gcloud-monitor	"const monitor = require('gcloud-monitor')({\n  project: '<google-cloud-project-name>',\n  auth: {/*auth-json*/} // optional, if using on GCE\n})\n\n/**\n * create a cumulative metric\n * more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricDescriptor\n * @param  {String} metricType\n * @param  {Object} [opts] metric params\n * @param  {Object} [opts.description]\n * @param  {Object} [opts.displayName]\n * @param  {Object} [opts.labels] label descriptors\n * @param  {Object} [opts.metricDomain] default: 'custom.googleapis.com'\n * @param  {Object} [opts.unit]\n * @param  {Object} [opts.valueType] default: INT64\n * @return {Promise<Model,Error>} resolves Cumulative instance\n */\nmonitor.createCumulative('requestsPerSecond', {\n  displayName: 'Requests per Second',\n  description: 'Active socket connection count',\n  labels: [{\n    key: 'foo',\n    description: 'foo label description',\n    valueType: 'INT64'\n  }],\n  unit: 'req/s',\n  valueType: 'INT64'\n}).then((cumulative) => {\n  // use cumulative...\n})\n"	"#### Create a Cumulative Metric\n"
gcloud-monitor	"/**\n * report a metric value\n * @param  {*} value\n * @param  {Object|Date} [interval|endTime]\n * @param  {Object} [interval.startTime] default: last `interval.startTime` or `createCumulative` time\n * @param  {Object} [interval.endTime]\n * @param  {Object} [labels]\n * @return {Promise}\n */\ncumulative.report(1, {\n  startTime: startTime,\n  endTime: new Date()\n}, {\n  foo: 1\n}).then((data) => {\n  console.log('Response data', data)\n})\n"	"#### Report Cumulative Metric Data\n"
gcloud-monitor	"/**\n * delete the cumulative metric\n * @return {Promise}\n */\ncumulative.delete().then(function (data) {\n  console.log('Response data', data)\n})\n"	"#### Delete a Cumulative Metric\n"
git-check	"var hasGit = require('git-check');\n if (!hasGit) {\n        throw new Error('Git is not installed');\n   }\n"	"## Usage\n"
glob-cp	"\nvar cp = require('glob-cp');\n\n// async\nvar src = __dirname + '/fixtures/:module/public';\nvar dest = __dirname + '/public/:module';\nvar options = {recursive: true, force: true};\ncp(src, dest, options, function(err) {\n    if (err) console.error(err);\n});\n\n"	"# use\n"
glob-cp	"//or sync version\ncp.sync('fixtures/:module/public', 'public/:module');\n\n"	"# use\n"
glob-cp	"// options with the following default values:\nvar options = {\n\n  // recusively copy files\n  recursive: false,\n\n  // remove destination before operation\n  force: false\n\n};\n"	"# options\n"
gmaps-signature	"// Load the module\nvar GS = require('gmaps-signature');\n\n// Add your Google Maps key\nGS.GOOGLE_API_KEY = 'MY KEY';\n// Or for Google Maps API for Work\nGS.GMAPS_CLIENT_ID = 'MY CLIENT ID';\nGS.GMAPS_PRIVATE_KEY = 'MY PRIVATE KEY';\n\n// and then you can start signing urls...\nvar url = GS.sign('https://maps.googleapis.com/maps/api/geocode/json?address=New+York');\n"	"## Usage\n"
grunt-cdnify_v2	"cdnify: {\n  someTarget: {\n    options: {\n      base: '//cdn.example.com/stuff/'\n    },\n    files: [{\n      expand: true,\n      cwd: 'app',\n      src: '**/*.{css,html}',\n      dest: 'dist'\n    }]\n  }\n}\n"	"### base\nFor the most common use case, just set a `base` string for your URLs – e.g., `'//cdn.example.com/'`.\nThe cdnify task will automatically search for all **local** URLs in your files, and prefix them with this string.\n(It will automatically avoid double-slashes.)\nExample:\n"
grunt-cdnify_v2	"cdnify: {\n  someTarget: {\n    options: {\n      rewriter: function (url) {\n        if (url.indexOf('data:') === 0) {\n          return url;            // leave data URIs untouched\n        } else {\n          return url + '?12345'; // add query string to all other URLs\n        }\n      }\n    },\n    files: [{\n      expand: true,\n      cwd: 'app',\n      src: '**/*.{css,html}',\n      dest: 'dist'\n    }]\n  }\n}\n"	"### rewriter\nFor more control, you can specify a custom `rewriter` function instead. In this case,\nthe task will search for **all** URLs (not just local ones) and run your function on each one.\nYour function should return the new value.\nExample:\n"
grunt-cdnify_v2	"{\n  'img[data-src]': 'src',\n  'img[src]': 'src',\n  'link[rel=\"]': 'href',\n  'link[rel=\"shortcut icon\"]': 'href',\n  'link[rel=icon]': 'href',\n  'link[rel=stylesheet]': 'href',\n  'script[src]': 'src',\n  'source[src]': 'src',\n  'video[poster]': 'poster'\n}\n"	"### html (boolean/object)\nWhether/how to modify HTML. Defaults to `true`, which will update HTML according to this standard config:\n"
grunt-cdnify_v2	"options: {\n  html: {\n    'img[ng-src]': 'ng-src', // cdnify angular images\n    'script[src]': false     // don't cdnify script tags\n  }\n}\n"	"That is, any elements matching the CSS selector `img[src]` will have their `src` attributes cdnified, etc.\nTo customise this config, you can set the `html` option to an object of custom `selector:attribute` pairs.\nThese will be added to the standard set shown above – if you want to **not** use one of the standard pairs,\nyou have to explicitly override it with `false`.\nFor example:\n"
grunt-rm	"rm: {\n  foo: 'js/*/**',\n  bar: [\n    'css/reset.css',\n    'css/style.css'\n  ]\n}\n"	"## Config\n"
grunt-sk-imgsize	"grunt.loadNpmTasks('grunt-inline-imgsize');\n"	"Once that's done, add this line to your project's Gruntfile:\n"
grunt-sk-imgsize	"grunt.initConfig({\n  inlineImgSize: {\n  }\n})\n"	"### Overview\nIn your project's Gruntfile, add a section named `inlineImgSize` to the data object passed into `grunt.initConfig()`.\n"
grunt-sk-imgsize	"grunt.initConfig({\n  inlineImgSize: {\n    files: {\n      src: ['index.html', 'contact.html']\n    }\n  }\n})\n"	"#### Basic Image Size Inlining\n"
grunt-sk-imgsize	"grunt.initConfig({\n  inlineImgSize: {\n    options: {\n    },\n    files: [{\n      expand: true,\n      cwd: 'src',\n      src: ['*.html'],\n      dest: 'dest/'\n    }]\n  }\n})\n"	"#### Custom Options\n"
grunt-thrall	"// gruntfile.js\nmodule.exports = function(grunt) {\n\tvar thrall = require('grunt-thrall');\n\t\n\tthrall.init({\n\t\t/* see config */\t\n\t});\t\n};\n"	""
grunt-thrall	"thrall.init({dir: __dirname + 'myTasks' /* ,... */ });\n"	"### Required _string_: `dir`\n"
grunt-thrall	"thrall.init({basePath: __dirname /* ,... */ });\n"	"### Required _string_: `basePath`\n"
grunt-thrall	"thrall.init({grunt: grunt /* ,... */ });\n"	"### Required _object_: `grunt`\n"
grunt-thrall	"thrall.init({name: 'myProject' /* ,... */ });\n"	"### _string_: `name`\n"
grunt-thrall	"// pseudo-code\nvar config = _.merge(config.getDefaults(), grunt.config(config.name));\n"	"Defaults to `config.pkg.name` project name from `package.json`\nThis is also the key for custom configuration that is merged with the defaults\n"
grunt-thrall	"thrall.init({loadDevDependencies: false /* ,... */ });\n"	"### _boolean_: `loadDevDependencies`\n"
grunt-thrall	"thrall.init({loadDependencies: true /* ,... */ });\n"	"### _boolean_: `loadDependencies`\n"
grunt-thrall	"thrall.init({\n\tmodule: {\n\t\tmyHelper: ['factory', require('./helpers/myHelper')]\n\t}\n\t/* ,... */ \n});\n"	"### _object_: `module`\n"
grunt-thrall	"thrall.init({\n\tgetDefaults: function(/* di here */) {\n\t\treturn {\n\t\t\tfoo: 'bar'\n\t\t}\n\t}\n\t/* ,... */ \n});\n"	"### _function_: `getDefaults`\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function(/* di here */) {\n\treturn {};\n};\n"	"### Naming\n"
grunt-thrall	"module.exports = function() {\n\treturn {\n\t\tdescription: [\n\t\t\t'this is the bar tasks',\n\t\t\t'it will foo.'\n\t\t]\n\t\t/* ... */\n\t};\n};\n"	"### _string/array_: `description`\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: [\n\t\t\t'jshint:src',\n\t\t\t'mochaTest'\n\t\t]\n\t};\n};\n"	"### _array_: `run`\nSubtasks to run by this task.\n"
grunt-thrall	"module.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: [\n\t\t\t'other:task',\n\t\t\t{\n\t\t\t\tif: 'coverage.enabled',\n\t\t\t\ttask: ['coverage']\n\t\t\t},\n\t\t\t{\n\t\t\t\tif: [\n\t\t\t\t\t(null != 1),\n\t\t\t\t\t'foo.bar'\n\t\t\t\t],\n\t\t\t\ttask: 'report',\n\t\t\t\telse: 'say:goodbye'\n\t\t\t}\n\t\t]\n\t};\n};\n"	"#### runIf blocks\nA runIf block can add tasks to the cue based on grunt configuration.\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\tcoverage: 'coverage.enabled'\n\t\t}\n\t};\n};\n"	"### _object_: `options`\nMap CLI options, environment variables and grunt modifiers to grunt config.\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\t'demo-port': {\n\t\t\t\tenv: 'DEMO_PORT',\n\t\t\t\talias: 'port',\n\t\t\t\tkey: 'foo.demoPort'\n\t\t\t}\n\t\t}\n\t};\n};\n"	"`grunt foo:bar --coverage` will set the `grunt.config('coverage.enabled')` to true.\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\tcoverage: {\n\t\t\t\tgrunt: ':coverage',\n\t\t\t\tkey: 'coverage.enabled'\n\t\t\t}\n\t\t}\n\t};\n};\n"	"either of \n - `grunt foo:bar --demo-port=7000`\n - `grunt foo:bar --demo=7000`\n - `DEMO_PORT=7000 grunt foo:bar`\nwill set the `grunt.config('foo.demoPort')` to 7000.\n"
grunt-thrall	"// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: ['foo', 'bar'],\n\t\trunFilter: function(tasks, args) {\n\t\t\tif (args[0] === 'baz') {\n\t\t\t\ttasks.shift();\n\t\t\t}\n\t\t\treturn tasks;\n\t\t}\n\t};\n};\n"	"### _function_: `runFilter`\nFilter that may manipulate the tasks cue before execution.\n"
grunt-thrall	"// config/jshint/src.js\nmodule.exports = function(/* di here */) {\n\treturn {\n\t\toptions: {\n\t\t\tignores: ['**/*.coffee'],\n\t\t\tjshintrc: true,\n\t\t},\n\t\tsrc: [\n\t\t\t'<%= my.src.files.js %>'\n\t\t]\n\t};\n};\n"	"every file in `config.dir`/`config/` is expected to export a factory function, returning \na configuration object. The name has to match the path that this configuration will \nbe placed at, in the grunt config.\nFactories are being invoked using node-di, see [DI](#DI) for further informations.\n"
grunt-thrall	"grunt.initConfig({\n\tjshint: {\n\t\tsrc: {\n\t\t\toptions: {\n\t\t\t\tignores: ['**/*.coffee'],\n\t\t\t\tjshintrc: true,\n\t\t\t},\n\t\t\tsrc: [\n\t\t\t\t'<%= my.src.files.js %>'\n\t\t\t]\n\t\t}\n\t}\n});\n"	"This is similar to the following standard configuration, only that it's\nsplit in to a lot of small files, with is more easy to maintain for big projects. \n"
grunt-thrall	"/* ... */\ngetDefaults: function(merged) {\n\tmerged(function(mergedConfig) {\n\t\tmergedConfig.foo = 'baz';\n\t});\n\treturn {foo: 'bar'};\n}\n"	"#### merged callback\n"
gulp-es6-node-module	"gulp.task('compileES5', function(){\n  return gulp.src('lib/**/*.js')\n    .pipe(nodePackage())\n    .pipe(getDependencies({\n      includeSeed: true\n    }))\n    .pipe(toCJS())\n    .pipe(gulp.dest('dist/es5'));\n});\n"	"Basic usage:\n"
gulp-sloc2	"var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['scripts/*.js'])\r\n    .pipe(sloc());\r\n});\r\n"	"\r\nThen, add it to your `gulpfile.js`:\r\n\r\n"
gulp-sloc2	"var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['lib/**/*.js'])\r\n    .pipe(sloc({\r\n      reportType: 'json'\r\n    }))\r\n    .pipe(gulp.dest('./reports/'));\r\n});\r\n"	"#### options.reportType\r\nType: `String`\r\nDefault: `stdout`\r\n\r\nIt will generate a JSON file with the SLOC analysis results and sends it further downstream. Use with the `reportFile` option if you want to customize the file name. You may want to pipe to the `gulp.dest()` method to write it out to specified folder. Example:\r\n\r\n"
gulp-sloc2	"{\"total\":138,\"source\":100,\"comment\":5,\"single\":5,\"block\":0,\"empty\":33,\"file\":2}\r\n"	"\r\nWould output the following in the file `./reports/sloc.json`:\r\n\r\n"
gulp-sloc2	"var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['./test/**/*.js'])\r\n    .pipe(sloc({\r\n      reportType: 'json',\r\n      reportFile: 'testSloc.json'\r\n    }))\r\n    .pipe(gulp.dest('./reports/'));\r\n});\r\n"	"#### options.reportFile\r\nType: `String`\r\nDefault: `sloc.json`\r\n\r\n The name of the file which would contain you'd like to output the JSON file. Use with the `json` as `reportType`. Ignored if used with the `stdout` report type. Example:\r\n\r\n"
habrok	"const Habrok = require('habrok');\n\nconst habrok = new Habrok();\n\nhabrok.request({\n  method: 'GET',\n  uri: 'https://api.github.com/repositories'\n})\n.then(console.log);\n"	"### Example\n"
habrok	"Habrok([configuration])\n"	"#### Definition\n"
habrok	"const Habrok = require('habrok');\n\nconst habrok = new Habrok();\n"	"#### Examples\nConstruct a default client:\n"
habrok	"const Habrok = require('habrok');\n\nconst habrok = new Habrok({ retryMinDelay: 250 });\n"	"Construct a client with a minimum retry delay of 250 milliseconds:\n"
habrok	"const Habrok = require('habrok');\n\nconst habrok = new Habrok({ disableCustomHeaders: true });\n"	"Construct a client that does not send Habrok-generated headers:\n"
habrok	"habrok.request(req[, options])\n"	"#### Definition\n"
habrok	"habrok.request({\n  method: 'GET',\n  uri: 'https://api.viki.ng/longships'\n})\n"	"#### Examples\nSend a `GET` request:\n"
habrok	"habrok.request({\n  method: 'POST',\n  uri: 'https://api.viki.ng/longships',\n  json: {\n    name: 'Oseberg'\n  }\n})\n"	"Send a `POST` request:\n"
head-require	"head.require(\n\t\"the/path/to/foojs\",\n\t\"the/path/to/bar.js\",\n\t\"the/path/to/baz.js\"\n\t\"the/path/to/initialize.js\"\n);\n"	"\"scripts/main.js\" like this : \n"
head-require	"grunt.initConfig({\n\theadRequire : {\n\t\tdist : {\n\t\t\toptions : {},\n\t\t\tfiles : { \"the/path/to/dest.js\" : \"the/path/to/main.js\" }\n\t\t}\n\t}\n});\n"	"### Grunt Task to Compile\nExample :\n"
html-inline-assets-loader	"const configureHtmlLoader = () => {\n  return {\n    test: /\\.(html|njk|nunjucks)$/,\n    use: [\n      resolve('html-loader'),\n      // 自动处理html中的相对路径引用 css/js/html文件\n      resolve('html-inline-assets-loader'),\n      {\n        loader: resolve('nunjucks-html-loader'),\n        options: {\n          // Other super important. This will be the base\n          // directory in which webpack is going to find\n          // the layout and any other file index.njk is calling.\n          searchPaths: ['./src'],\n        },\n      },\n    ],\n  };\n};\n"	"# useage\n"
id-pool	"const pool = new IdPool()\npool.on('release', id => {\n  console.log('release', id)\n})\n\nconst first = pool.reserve()\nconst second = pool.reserve()\n\nsetImmediate(function () {\n  pool.release(first)\n  pool.release(second)\n})\n"	"## Usage\n"
ip-slider	"function yourFunction(event) {\n  console.log(event.detail.value);\n}\n"	"This **event** is a **CustomEvent**:\n"
ip-slider	"function yourFunction(event) {\n  console.log(event.detail.srcEvent);\n}\n"	"To get the real event from input, get `srcEvent`:\n"
ip-slider	"const ipSlider = document.querySelector('ip-slider');\n\nconsole.log(ipSlider.value);\nconsole.log(ipSlider.min);\nconsole.log(ipSlider.max);\nconsole.log(ipSlider.step);\nconsole.log(ipSlider.disabled);\n"	"Another option to get data:\n"
irc-bot-maker	"var IRCBot = require(\"irc-bot-maker\");\r\nvar myBot = new IRCBot(\"myBot\");\r\n\r\nvar examplePlugin = require(\"./examplePlugin\");\r\nmyBot.use(examplePlugin());\r\n\r\nmyBot.connect(\"myServer.com\", {\r\n\tchannels: [\"#myChannel1\", \"#myChannel2\"]\r\n});\r\n"	"## Usage\r\nTo create a simple bot that uses the \"examplePlugin\" plugin:\r\n"
irc-bot-maker	"module.exports = function() {\r\n\treturn {\r\n\t\t_plugin: \"examplePlugin\",\r\n\t\tping: {\r\n\t\t\tmodifier: \"!\",\r\n\t\t\tignorePm: false,\r\n\t\t\tcallback: function(bot, args) {\r\n\t\t\t\tbot.send(\"pong\");\r\n\t\t\t}\r\n\t\t},\r\n\t\techo: {\r\n\t\t\tmodifier: \"!\",\r\n\t\t\tignorePm: true,\r\n\t\t\tcallback: function(bot, args) {\r\n\t\t\t\tbot.send(args.join(\" \"));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\n"	"You can .use() new plugins even after connecting so order doesn't matter.  \r\n\r\nHere is the \"examplePlugin\" that has defines a \"ping\" and an \"echo\" command:\r\n"
irc-bot-maker	"var IRCBot = require(\"irc-bot-maker\");\r\nvar myBot = new IRCBot(\"myBot\");\r\n"	"### IRCBot(nick)\r\nThe bot constructor takes the bot's nickname (required). To create a new instance simply:\r\n"
irc-bot-maker	"var examplePlugin = require(\"./examplePlugin\");\r\nmyBot.use(examplePlugin());\r\n"	"### .use(plugin)\r\nTell the bot to use a plugin. The plugin param is the returned object from a plugin containing its commands. If you want to use a plugin with a file name of \"examplePlugin.js\":\r\n"
irc-bot-maker	"myBot.unuse(\"examplePlugin\");\r\n"	"### .unuse(plugin)\r\nTell bot to stop using a plugin. The string param is the name of the plugin that is defined by its _plugin property.\r\n"
irc-bot-maker	"myBot.connect(\"myServer.com\", {\r\n\tchannels: [\"#myChannel1\", \"#myChannel2\"]\r\n});\r\n"	"### .connect(server, options)\r\nConnect to a server. [The possible options that can be passed into the options object can be found here.](https://node-irc.readthedocs.org/en/latest/API.html#client)\r\nIf you wanted to connect to the server myServer.com to channels myChannel1 and myChannel2:\r\n"
irc-bot-maker	"myBot.send(\"This is a message.\", true);\r\n"	"### .send(message[, ignorePm[, to]])\r\nSends a message to the current channel. The current channel would be the one the last message came from. Optionally you can only send it when it isn't a private message.\r\n"
irc-bot-maker	"myBot.send(\"This is a message.\", false, [\"user1\", \"#channel1\", \"user2\", \"#channel2\"]);\r\n"	"This will not send the message if the last message was a PM to the bot.  \r\nThe third param is an array that manually defines the message recipients. Channel names start with a # and are otherwise considered users.\r\n"
irc-bot-maker	"ping: {\r\n\tmodifier: \"!\",\r\n\tcallback: function(bot, args) {\r\n\t\tbot.send(\"pong\");\r\n\t}\r\n}\r\n"	"### modifier\r\nThe modifier is what must be before the actual command name for the callback to be called.\r\n"
irc-bot-maker	"ping: {\r\n\tmodifier: \"\",\r\n\tcallback: function(bot, args) {\r\n\t\tbot.send(\"pong\");\r\n\t}\r\n}\r\n"	"This will listen for the \"!ping\" command. Modifier are not restricted to a single character.\r\n"
irc-bot-maker	"ping: {\r\n\tmodifier: \"!?$\",\r\n\tcallback: function(bot, args) {\r\n\t\tbot.send(\"pong\");\r\n\t}\r\n}\r\n"	"This will listen for just a \"ping\" command.\r\n"
is-json-object	"const isJSON = require('is-json-object')\n\nclass Foo {  }\n\nisJSON({ a: 1, b: 2 }) // true\nisJSON(new Foo) // false\nisJSON('test test test') // true\n"	"## Usage\n"
is-kotlin-keyword	"// load the module\nvar isKotlinKeyword = require('index.js');\n\n// check a keyword\nisKotlinKeyword(\"while\"); // true\n"	"## Use\n"
jackeytest	"module: {\n  rules: [\n    {\n      parser: {\n        amd: false\n      }\n    }\n  ]\n}\n"	"### Webpack Configuration\nUsing Webpack you may encounter the following error: \"Module not found: Error:\nCannot resolve module\", most certainly you should disable AMD loader. Add/merge\nthe following section to your webpack config:\n"
jackeytest	"var Jackeytest = require('jackeytest');\n\nvar api = new Jackeytest.JackeytestApi()\n\nvar callback = function(error, data, response) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napi.getHaha(callback);\n\n"	"## Getting Started\nPlease follow the [installation](#installation) instruction and execute the following JS code:\n"
js-avl-tree	"/**\n * 二叉平衡树\n * @param {Function} compartor 关键字的比较器\n * @param {Boolean}  ifMerge   是否将插入的数据合并到节点\n */\nfunction AVLTree(compartor, ifMerge)\n"	"## AVLTree\n"
js-avl-tree	"/**\n * 插入节点\n * @param  {[type]} key  节点的key\n * @param  {[type]} data 节点的数据\n * @return {Boolean}     是否将插入的数据合并到节点\n */\nfunction AVLNode(key, data, ifMerge)\n"	"## AVLNode\n"
js-avl-tree	"/**\n * 插入节点\n * @param  {[type]} key  节点的key\n * @param  {[type]} data 节点的数据\n * @return {Boolean}     插入是否成功\n */\n_proto.insert = function(key, data)\n"	"## insert\n"
js-avl-tree	"/**\n * 删除节点\n * @param  {[type]}   key     需要删除的节点的key\n * @param  {Boolean}  ifAll   是否删除所有符合的结点（默认只删除第一个查找到的结果）\n * @return {Array|AVLNode}    被删除后的点\n */\n_proto.delete = function(key, ifAll) \n"	"## delete\n"
js-avl-tree	"/**\n * 查找节点\n * @param  {[type]}   key     需要查找的节点的key\n * @param  {Boolean}  ifAll   是否返回所有结果（默认只返回第一个查找到的结果）\n * @return {Array|AVLNode}    查找结果\n */\n_proto.search = function(key, ifAll)\n"	"## search\n"
jsbean	"    const Bean = require('bean')\n    \n    const Character = Object.create({\n      whoami() {\n        return `a bat called ${this.name || '...'}`\n      },\n    })\n\n    const FlyingThing = Object.create({\n      canFly: true,\n      fly() {\n        return 'flap, flap ...'\n      }\n    })\n\n    const Duck = Bean.roast(\n      function Duck(name) {\n        this.name = name\n        this.specie = 'bird'\n      },\n      Character,\n      FlyingThing\n    )\n\n    const Bat = Bean.roast(\n      function Bat(name) {\n        this.name = name\n        this.specie = 'mammal'\n      },\n      Character,\n      FlyingThing\n    )\n\n    const Dog = Bean.roast(\n      function Dog(name) {\n        this.name = name\n        this.specie = 'mammal'\n      },\n      Character\n    )\n\n    const daffyDuck = Duck('Daffy Duck')\n"	"## Basic Usage\n`Bean.roast` returns a function that is used as a factory of Javascript objects.\nIt takes as first parameter an optinal constructor and a series of object that will be composed into the final prototype and descriptors.\n"
koco-toastr	"paths: {\n  ...\n  'bootstrap-toastr': 'bower_components/koco-toastr/src/koco-toastr-ui',\n  'toastr': 'bower_components/toastr/toastr',\n  ...\n}\n"	"## Usage with KOCO\nThis is a shared module that is used in many other modules. It includes the toastr library as a bower dependency. The convention is to configure an alias in the `require.configs.js` with the name `bootstrap-toastr` like so:\n"
koot-redux	"    import { createReduxModuleStore, applyMiddleware } from 'koot-redux'\n    import { reduxForCreateStore } from 'koot'\n    import rootModule from './root'\n\n    const middlewares = [\n        ...reduxForCreateStore.middlewares\n    ]\n\n    export default () => {\n\n        const {\n            initialState\n        } = reduxForCreateStore\n\n\n        if (__CLIENT__ && __DEV__) {\n            return createReduxModuleStore(\n                rootModule,\n                initialState,\n                require('redux-devtools-extension').composeWithDevTools(applyMiddleware(...middlewares))\n            )\n        }\n\n        return createReduxModuleStore(\n            rootModule,\n            initialState\n        )\n\n    }\n"	"## 快速使用\n> 利用koot-cli 创建的模板项目，可按照如下修改使用。\n修改 File: /src/store/index.js\n"
koot-redux	"    import { reduxForCreateStore } from 'koot'\n\n    export default {\n        state: {\n\n            ...reduxForCreateStore.reducers\n        },\n        reducers: {\n            ['SOME_REDUCER_FUNCTION']() {\n\n            }\n        },\n        actions: {\n            ['SOME_ACTION_FUNCTION']() {\n\n            }\n        },\n        modules: {\n            // 此处可扩展子集的 module 模块\n        }\n    }\n"	"添加 File: /src/store/root.js \n"
koot-redux	"    const module = {\n        state: {\n            // 在此处定义默认的state\n            // 程序将在创建时将此处定义好的值初始化为默认值\n            userinfo: {\n                username: 'liudehua',\n                password: '123456'\n            }\n        },\n        reducers: {\n            // reducer 为一个 funciton\n            // reducer的调用名称 = funciton的名称\n            ['SOME_REDUCER_FUNCTION'](state, payload){\n\n            }\n        },\n        actions: {\n            // action 为一个 funciton\n            // action的调用名称 = funciton的名称\n            ['SOME_ACTION_FUNCTION']({\n                commit,\n                state,\n                rootState,\n                dispatch\n            }, payload){\n                // commit 用来提交 reducer\n                // eg: commit('SOME_REDUCER_FUNCTION', payload)\n\n                // state 用来获取当前模块的局部 state\n                // eg: state.userinfo.username\n\n                // rootState 整个状态树的根层，你可以再此拿到整个状态树\n                // eg: rootState.App.test\n\n                // dispatch 可以继续派发其他的 action 操作\n                // eg: dispatch('OTHER_ACTION_FUNCTION')\n            }\n        },\n        modules: {\n            // 此处可扩展子集的 module 模块\n            // 子级可以同样扩展自己的子级\n            App: {\n                state: {\n                    test: 1\n                },\n                reducers: {},\n                actions: {},\n                modules: {}\n            }\n        }\n    }\n"	"## Module\n在 koot-redux 中，\n* 一个完整的 store 树就是以个层层嵌套的 module 树，\n* 每个 module 管理自己的 state, action, reducer\n* reducer 必须是同步的\n* action 是必须存在的逻辑，你必须 dipatch 一个 action, 且在 action 内 commit 一个 reducer\nmodule.js\n"
koot-redux	"    // 派发 action\n    this.props.dispatch('SOME_ACTION_NAME')\n    \n    // or\n    this.props.dispatch('SOME_ACTION_NAME', payload)\n"	"### 派发 action\n"
koot-redux	"    // commit 用来提交 reducer\n    // eg: commit('SOME_REDUCER_FUNCTION', payload)\n\n    // state 用来获取当前模块的局部 state\n    // eg: state.userinfo.username\n\n    // rootState 整个状态树的根层，你可以再此拿到整个状态树\n    // eg: rootState.App.test\n\n    // dispatch 可以继续派发其他的 action 操作\n    // eg: dispatch('OTHER_ACTION_FUNCTION')\n\n    ['SOME_ACTION_NAME']({commit, state, rootState, dispatch}, payload){\n        commit('SOME_REDUCER_NAME', payload)\n    }\n"	"### action函数及参数\n"
ksys-express-http-proxy	"proxy(host, options);\n"	"## Usage\n"
ksys-express-http-proxy	"var proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com'));\n"	"To proxy URLS starting with '/proxy' to the host 'www.google.com':\n"
ksys-express-http-proxy	"var proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com', {\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n"	"#### forwardPath\nThe ```forwardPath``` option allows you to modify the path prior to proxying the request.\n"
ksys-express-http-proxy	"app.use(proxy('httpbin.org', {\n  forwardPathAsync: function() {\n    return new Promise(function(resolve, reject) {\n      // ...\n      // eventually\n      resolve( /* your resolved forwardPath as string */ )\n    });\n  }\n}));\n"	"#### forwardPathAsync\nThe ```forwardPathAsync``` options allows you to modify the path asyncronously prior to proxying the request, using Promises.\n"
ksys-express-http-proxy	"app.use('/proxy', proxy('www.google.com', {\n  filter: function(req, res) {\n     return req.method == 'GET';\n  },\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n"	"#### filter\nThe ```filter``` option can be used to limit what requests are proxied. For example, if you only want to proxy get request\n"
ksys-express-http-proxy	"app.use('/proxy', proxy('www.google.com', {\n  intercept: function(rsp, data, req, res, callback) {\n    // rsp - original response from the target\n    data = JSON.parse(data.toString('utf8'));\n    callback(null, JSON.stringify(data));\n  }\n}));\n"	"#### intercept\nYou can intercept the response before sending it back to the client.\n"
ksys-express-http-proxy	"app.use('/proxy', proxy('www.google.com', {\n  decorateRequest: function(proxyReq, originalReq) {\n    // you can update headers\n    proxyReq.headers['Content-Type'] = 'text/html';\n    // you can change the method\n    proxyReq.method = 'GET';\n    // you can munge the bodyContent.\n    proxyReq.bodyContent = proxyReq.bodyContent.replace(/losing/, 'winning!');\n    return proxyReq;\n  }\n}));\n\n"	"#### decorateRequest\nYou can change the request options before it is sent to the target.\n"
ksys-express-http-proxy	"app.use('/proxy', proxy('www.google.com', {\n  reqAsBuffer: true\n}));\n"	"#### reqAsBuffer\nNote: this is an experimental feature.  ymmv\nThe ```reqAsBuffer``` option allows you to ensure the req body is encoded as a Node\n```Buffer``` when sending a proxied request.   Any value for this is truthy.\nThis defaults to to false in order to preserve legacy behavior. Note that\nthe value of ```reqBodyEnconding``` is used as the encoding when coercing strings\n(and stringified JSON) to Buffer.\n"
ksys-express-http-proxy	"app.use('/', proxy('httpbin.org', {\n  timeout: 2000  // in milliseconds, two seconds\n}));\n"	"#### timeout\nBy default, node does not express a timeout on connections.   Use timeout option to impose a specific timeout.    Timed-out requests will respond with 504 status code and a X-Timeout-Reason header.\n"
ksys-express-http-proxy	"var corporateProxyServer = process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n\nif (corporateProxyServer) {\n  corporateProxyAgent = new HttpsProxyAgent(corporateProxyServer);\n}\n"	"### Q: Can it support https proxy?\nThe library will use https if the provided path has 'https://' or ':443'.   You can use decorateRequest to ammend any auth or challenge headers required to succeed https.\nHere is an older answer about using the https-proxy-agent package.   It may be useful if the included functionality in ```http-express-proxy``` does not solve your use case.\nA:  Yes, you can use the 'https-proxy-agent' package. Something like this:\n"
ksys-express-http-proxy	"  req.agent = corporateProxyAgent;\n"	"Then inside the decorateRequest method, add the agent to the request:\n"
list-runner	"import { CellSingly, CellDoubly, StemSingly, StemDoubly } from 'list-runner';\r\n"	"\r\n**Import**\r\n\r\n_importing the commonly needed classes_\r\n"
list-runner	"import { SENTINEL, CELL, SINGLY, DOUBLY } from 'list-runner';\r\n"	"\r\n_importing the constants_\r\n"
list-runner	"import { initializeStem, findForward, findBackward, runForward, runBackward, countForward, countBackward } from 'list-runner';\r\n"	"\r\n_importing the sidekick functions_\r\n"
list-runner	"import { SentinelSingly, SentinelDoubly } from 'list-runner';\r\n"	"\r\n_importing less commonly needed classes_\r\n"
list-runner	"const cell = new CellDoubly();    \r\nconst stem = new StemDoubly(cell);\r\n"	"\r\n**Instantiate**\r\n\r\n_solo instantiation_\r\n\r\n"
list-runner	"const cell1 = new CellDoubly();    \r\nconst cell2 = new CellDoubly();    \r\nconst cell3 = new CellDoubly();    \r\nconst stemCells = [cell1, cell2, cell3];    \r\nconst structureType = DOUBLY; // imported constant    \r\nconst stem = initializeStem(stemCells, structureType);\r\n"	"\r\n_connective instantiation_\r\n\r\n"
list-runner	"// assume the following are not strings\r\nconst baseline = 'some arbitrary cell on the stem'; // substitute a cell on the stem\r\nconst cell = 'some new cell'; // substitute a newly instantiated cell\r\nconst cells = 'an array of cells'; // substitute an array of unlinked cells\r\n\r\n/* CELL OPERATIONS */\r\nconst nextCell = cell.getNext();\r\nconst prevCell = cell.getPrev(); // only DOUBLY data-structure\r\n\r\n/* STEM OPERATIONS */\r\nconst head = stem.getHead();\r\nconst tail = stem.getTail(); // only DOUBLY data-structure\r\ninsert(cell, baseline); // returns true || false based on success\r\nextract(baseline); // returns extracted cell || false based on success\r\nunshift(cell); // returns true || false based on success\r\nshift(); // returns extracted cell || false based on success\r\npush(cell); // only DOUBLY data-structure / returns true || false based on success\r\npop(); // only DOUBLY data-structure / returns extracted cell || false based on success\r\nreplace(cell, baseline); // returns true || false based on success\r\ndelete(baseline); // returns true || false based on success\r\n"	"\r\n_code examples: stem and cell classes_\r\n\r\n"
list-runner	"// assume the following are not strings\r\nconst comparator = 'a callback function that returns true when the right cell is found'; // receives each cell\r\nconst callBackParams = 'any kind of parameters that you want to pass to the callBack function';\r\nconst callBack = 'a custom callback function that will receive each cell from a loop and also callBackParams'; // receives each cell and callBackParams\r\n\r\n/* SIDEKICK FUNCTIONS */\r\ninterlink(cells);\r\nconst foundCell1 = findForward(baseline, comparator);\r\nconst foundCell2 = findBackward(baseline, comparator);\r\n// lastCellInLoop1 will be cell.type === SENTINEL if it loops to the edge of the stem (by not triggering a custom short-circuit condition)\r\nconst lastCellInLoop1 = runForward(baseline, callBack, callBackParams);\r\nconst lastCellInLoop2 = runBackward(baseline, callBack, callBackParams);\r\nconst totalCount1 = countForward(baseline);\r\nconst totalCount2 = countBackward(baseline);\r\n\r\n/* findForward / findBackward comparator callback examples */\r\n\r\n// standard\r\nexport const findComparator1 = (cell) => {\r\n  return cell.id === 'KD6-3.7';\r\n};\r\n\r\n// curried\r\nexport const findComparator2 = (id) => {\r\n    return (cell) => {\r\n        return cell.id === id;\r\n    };\r\n};\r\n\r\nconst myComparator = findComparator2('KD6-3.7');\r\nconst foundCell3 = findForward(baseline, myComparator);\r\n\r\n/* runForward / runBackward callback examples */\r\n\r\n// standard\r\nexport const runCallBack1 = (cell, callBackParams) => {\r\n    // do stuff\r\n    const continueLoop = cell.id !== id;\r\n    return continueLoop;\r\n};\r\n\r\n// curried\r\nexport const runCallBack2 = (id) => {\r\n    return (cell, callBackParams) => {\r\n      // do stuff\r\n      const continueLoop = cell.id !== id;\r\n      return continueLoop;\r\n    };\r\n};\r\n\r\nconst myCallBack = runCallBack2('KD6-3.7', 'any other arbitrary parameters');\r\n// lastCellInLoop3 will be cell.type === SENTINEL if it loops to the edge of the stem (by not triggering a custom short-circuit condition)\r\nconst lastCellInLoop3 = runForward(baseline, myCallBack, callBackParams);\r\n"	"\r\n_code examples: sidekick functions_\r\n\r\n"
map-pickas	"const pickAs = require('map-pickas');\r\n// pickAs(<map>, <key(s)>, [begin=0], [end], [target=new Map()])\r\n// -> <value> (for single key) | <target> (for multiple keys)\r\n\r\nvar m = new Map([['i', 9], ['n', 14], ['c', 3]]);\r\npickAs(m, 'n');\r\n// 14\r\npickAs(m, ['n', 'i']);\r\n// Map {'n'=>14, 'i'=>9}\r\npickAs(m, ['n', 'i', 'c'], 1);\r\n// Map {'i'=>9, 'c'=>3}\r\npickAs(m, ['n', 'i', 'c'], 1, 2);\r\n// Map {'i'=>9}\r\npickAs(m, ['n', 'i', 'c'], 1, 2, new Map([['e', 5]]));\r\n// Map {'e'=>5, 'i'=>9}\r\n"	"\r\n> NOTE: [map-pickas](https://www.npmjs.com/package/map-pickas) was renamed to [@extra-map/pick-as](https://www.npmjs.com/package/@extra-map/pick-as).\r\n[![NPM](https://nodei.co/npm/map-pickas.png)](https://nodei.co/npm/map-pickas/)\r\n\r\nFilter [map] with specified key(s), like [_.pick()].\r\n\r\n"
memory-scheduler	"import  MS from 'memory-scheduler';\n\nconst DAY_IN_MINISECONDS = 24 * 60 * 60 * 1000;\n\nconst today = Math.round(new Date().getTime() / DAY_IN_MINISECONDS);\n\nconst yesterday = today-1;\n\nconst ms = new MS([1, 2, 3, 8, 17], [-3, -1, 1]);\n\nconst record = ms.getInitialRecord(yesterday);\nconst updatedRecord = ms.calculate(1, record, today);\n\n"	"## Example\n"
mochito	"var mochito = require('mochito');\n\ndescribe('mochito', function() {\n  it('allows mocking to be performed with no set-up required', function() {\n    var mock = mochito.mock({\n      doSomething: function() {}\n    });\n\n    mock.doSomething('x', 'y');\n    mock.doSomething('z', 'y');\n\n    mochito.verify(mock, mochito.once()).doSomething('x', 'y');\n    mochito.verify(mock, mochito.once()).doSomething('z', 'y');\n    mochito.verify(mock, mochito.times(2)).doSomething(mochito.anything(), 'y');\n  });\n});\n"	"## Usage\nUsing _mochito_ is simple, for example:\n"
mochito	"mochito.installTo(global);\n"	"## Global Functions\nIf you really want the JsHamcrest & JsMockito functions to be available\nglobally, you can simply write:\n"
mongo-live	"var MongoLive = require('mongo-live');\nvar live = new MongoLive({\n  host: '127.0.0.1',\n  port: 27017,\n  database: 'blog'\n});\n\nvar posts = live\n.query('posts')\n.select('title body comments')\n.exec(function (error, stream) {\n\n  stream.on('data', function (data) {\n\n    if (error) {\n      // handle error\n      return;\n    }\n      \n    if ('insert' === data.operation) {\n      console.log('inserted', data);\n    }\n\n    if ('update' === data.operation) {\n      console.log('updated', data);\n    }\n\n    if ('remove' === data.operation) {\n      console.log('removed', data);\n    }\n\n    console.log('======== result ======>', data);\n\n  });\n\n});\n\n"	"## Usage\n"
mongo-live	"var posts = live\n.query('posts')\n.select('title body')\n.exec();\n\nposts.on('insert', function(data){\n  console.log('inserted', data);\n});\n\nposts.on('update', function(data){\n  console.log('updated', data);\n});\n\nposts.on('remove', function(data){\n  console.log('removed', data);\n});\n\nposts.on('data', function(data){\n  if ('insert' === data.operation) {\n    console.log('inserted', data);\n  }\n\n  if ('update' === data.operation) {\n    console.log('updated', data);\n  }\n\n  if ('remove' === data.operation) {\n    console.log('removed', data);\n  }\n});\n"	"You can also listen to events like this:\n"
mongo-live	"var Person = mongoose.model('Person');\n\nPerson.find({ active: true })\n.cache(50000) // cache for 50 seconds\n.exec(function (err, docs) { /* ... */\n  \n  if (err) throw error;\n\n  console.log(docs.ttl) // time left for expiration in ms\n  console.log(docs.stored); // timestamp this query was cached\n  console.log(docs);\n\n});\n\n"	"Then later any `find` query will be cached for 60 seconds.\nYou can also enable caching programatically by using the `cache` method directly from the query instance:\n"
mongodb-js-repo-list	"mongodb-js-repo-list <organization> -t <oauth token> [options]\n"	"## Usage\n"
mongodb-js-repo-list	"mongodb-js-repo-list mongodb-js -t <oauth token> --format table --grep mongo\n"	"## Example\n"
multiplexing-log4js	"log4js.configure({\r\n    appenders: {\r\n        file: MultiplexingFileAppender.createConfig(filename, pattern, listener),\r\n        server: MultiplexingSocketServerAppender.createConfig(port)\r\n    },\r\n    categories: {\r\n        default: { appenders: [\"file\"], level: \"all\" }\r\n    }\r\n})\r\n"	"\r\nA multiplexing log4js logger component\r\n\r\nYou can send logs over socket, and controll the appender's state, and event trigger listeners.\r\n\r\nExample:\r\n\r\nserver side:\r\n\r\n"
multiplexing-log4js	"log4js.configure({\r\n    appenders: {\r\n        socket: MultiplexingSocketAppender.createConfig(\"127.0.0.1\", 1234),\r\n    },\r\n    categories: {\r\n        default: { appenders: [\"socket\"], level: \"all\" }\r\n    }\r\n})\r\nconst logger = log4js.getLogger(\"test\")\r\nlogger.info(\"test info\") // normal logging, will be writed to file as server side\r\nlogger.log(\"CMD\", \"hold\") // set MultiplexingFileAppender state to \"hold\", and it won't roll new file.\r\nlogger.log(\"CMD\", \"release\") // relase hold\r\nlogger.log(\"EVENT\", \"something\") // fire the listener at server side\r\n"	"\r\nclient side:\r\n\r\n"
new-rutracker-api	"var RutrackerApi = require('new-rutracker-api');\n"	"## Использование\nВ первую очередь необходимо скопировать папку с New Rutracker API в ваш проект. Далее, подключите модуль в нужном вам JS-файле:\n"
new-rutracker-api	"var username = 'username',\n    password = 'password';\n\n// Вариант №1: при вызове конструктора\nvar rutracker = new RutrackerApi({\n    username: username,\n    password: password\n});\n\n// Вариант №2: с помощью метода 'login'\nvar rutracker = new RutrackerApi();\nrutracker.login(username, password);\n"	"Следующий этап — авторизация приложения. Сделать это можно непосредственно при вызове конструктора, либо позже — с помощью метода объекта ```login```.\n"
new-rutracker-api	"var query = \"YOUR QUERY HERE\",\n    callback = console.log.bind(console);\n\nrutracker.search(query, callback);\n"	"Помните, что для синхронизации вы можете использовать событие ```login```. После того, как приложение получило токен, мы можем начать искать раздачи. Поиск осуществляется через метод ```search```:\n"
new-rutracker-api	"var query = \"YOUR QUERY HERE\",\n    options = {\n      forums: [1000, 1001], // массив id форумов\n      sortBy: 'seeds', // см. ниже\n      sortOrder: 'desc' // или 'asc'\n    },\n    callback = console.log.bind(console);\n\nrutracker.search(query, options, callback);\n"	"Дополнительно можно задать параметры поиска в объекте ```options```:\n"
new-rutracker-api	"[\n  {\n    state: 'проверено',\n    id: 'XXXXXXXX'\n    category: 'CATEGORY_NAME',\n    title: 'TITLE',\n    author: 'AUTHOR_NAME',\n    size: '1.07 GB',\n    seeds: '7123',\n    leechs: '275',\n    url: 'rutracker.org/forum/viewtopic.php?t=XXXXXX'\n  }, ...\n]\n"	"Возможна сортировка по следующим полям:\n- ```created``` -- зарегистрирован\n- ```name``` -- название темы\n- ```downloads``` -- количество скачиваний\n- ```seeds``` -- количество сидов\n- ```leeches``` -- количество личей\n- ```size``` -- размер\n- ```updated``` -- последнее сообщение\nВ callback будет передан объект вида:\n"
ngx-clarity-datetime	"  (function (global) {\r\n      System.config({\r\n          paths: {\r\n              'npm:': 'node_modules/'\r\n          },\r\n          map: {\r\n              // Other components are here...\r\n\r\n              'ng-pick-datetime': 'npm:ng-pick-datetime',\r\n          },\r\n          packages: {\r\n              // Other components are here...\r\n\r\n            // the picker\r\n              'ng-pick-datetime': {\r\n                  main: 'picker.bundle.js',\r\n                  defaultExtension: 'js'\r\n              },\r\n          }\r\n      });\r\n  })(this);\r\n"	" 4. If you are using __systemjs__ package loader add the following ng-pick-datetime properties to the __System.config__:\r\n"
ngx-clarity-datetime	"    import {BrowserModule} from '@angular/platform-browser';\r\n    import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\n    \r\n    @NgModule({\r\n        imports: [\r\n            BrowserModule,\r\n            BrowserAnimationsModule,\r\n            //...\r\n        ],\r\n        //...\r\n    })\r\n    export class YourAppModule { }\r\n"	"\r\n"
ngx-clarity-datetime	"export class MyModel {\r\n    \r\n    en: any;\r\n    \r\n    ngOnInit() {\r\n        this.en = {\r\n            firstDayOfWeek: 0,\r\n            dayNames: [\"Sunday\", \"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n            dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n            monthNames: [ \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\" ],\r\n            monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\r\n        };\r\n    }\r\n}\r\n"	"Localization for different languages and formats is defined by binding the locale settings object to the locale property. Following is the default values for English.\r\n\r\n"
ngx-clarity-datetime	"export class MyModel {\r\n    \r\n    es: any;\r\n    esLocale = require('date-fns/locale/es')\r\n    \r\n    ngOnInit() {\r\n        this.es = {\r\n\t\t\t firstDayOfWeek: 1,\r\n\t\t     dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\" ],\r\n\t\t     dayNamesShort: [ \"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\" ],\r\n\t\t     monthNames: [ \"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\" ],\r\n\t\t     monthNamesShort: [ \"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\" ],\r\n\t\t     dateFns: esLocale\r\n        };\r\n    }\r\n}\r\n"	"\r\nIf you want the formatted date time to be localized as well, you need to npm install [date-fns](https://date-fns.org/).\r\n\r\n\r\n"
node-blte	"// Import module, naturally...\nconst BLTEReader = require('node-blte');\n\n// Register encryption keys (for encrypted blocks).\nBLTEReader.registerDecryptionKeys({\n    '213D67C1543A63A9': '1F8D467F5D6D411F8A548B6329A5087E',\n    '2BB68ACDC6254F79': '76583BDACD5257A3F73D1598A2CA2D99'\n});\n\nlet key = 'a19e2d57adf9830d989e3dad7dd56cec';\nlet buffer = obtainBufferSomehow();\n\n// Create a new BLTEReader from an existing buffer (or Bufo instance).\nlet reader = new BLTEReader(buffer, key);\n\n// `reader` can now be used just like a normal Bufo instance, and will automatically\n// decompress and decrypt blocks (using given keys) as needed.\n\n// If you need all blocks to be pre-processed (buffer transfer, etc), call `readAllBlocks()` first.\n"	"## Usage\n"
panda-portfolio	"// For npm<5.2.0\nsudo npm install -g panda-portfolio\n\n// For npm>=5.2.0\nnpx panda-portfolio <command>\n"	"## Installation\n"
panda-portfolio	"panda init\n"	"## Creating the config file\nplease make sure that you have the profile photo as well as resume file in the same directory\n"
panda-portfolio	"panda config.json\n"	"## Creating the index page\n"
panda-portfolio	"{\n    \"theme\":\"(dark or light)\",\n    \"name\":\"YOUR-NAME\",\n    \"profilePhoto\":\"PICTURE-LINK\",\n    \"resumeLink\":\"RESUME-LINK\",\n    \"about\":[\n        \"Paragraph1\",\n        \"Paragraph2\",\n        \"Paragraph3\",\n        \"So on..\"\n    ],\n    \"links\":{\n        \"github\":\"YOUR-GITHUB-PROFILE\",\n        \"linkedin\":\"YOUR-LINKEDIN-PROFILE\",\n        \"medium\":\"YOUR-MEDIUM-PROFILE\",\n        \"facebook\":\"YOUR-FACEBOOK-PROFILE\",\n        \"instagram\":\"YOUR-INSTAGRAM-PROFILE\"\n    }\n}\n"	"## Alternate Method\n- Create a FILENAME.json file within the directory\n- Paste the following content.\n"
parse-processes	"var processes = require('parse-processes');\n\nprocesses(function(err, result){\n  result.forEach(function(p){\n    console.log(p.id, p.tty, p.time, p.cmd);\n  });\n});\n"	"## Example\n"
parse-tx-xdr-to-json-response	"const { parseOperations } = require('parse-tx-xdr-to-json-response');\n const envelope_xdr = \"AAAAAEEPRPOcFZIwowt0GootrwjGX+aNqP5zG+kbuu4YXVLYAAAnEAAAAEUAAAACAAAAAAAAAAAAAAABAAAAAQAAAAB6LHmPFqLd3d8SbTZuAJD6B83V4P4Uw9gRyDwpdgjsEwAAAAYAAAABVVNEAAAAAABBD0TznBWSMKMLdBqKLa8Ixl/mjaj+cxvpG7ruGF1S2H//////////AAAAAAAAAAIYXVLYAAAAQKzoZwsMKh/yh5eLQD+xu4VzwgAZrg/ynqUGAJcb1oSNEVe1RI9r+k7H+O/SJvamFXx0yvEx2ohSuTRKxU7usQR2COwTAAAAQHklUcmcSvJxX13PddLcedVMPcxSeLpUddoBzJInZ2XKz2dbPe+Oz18PZ1Pbgoy75IBvHnRUX5NK+bpw5OYLUQY=\";\nlet oprations = parseOperations({\n    txEnvelopeXdr: envelope_xdr\n});\nconsole.log(oprations);\n"	"### Example\n"
pathfind	"pathfind(['a', 'b', 'c'], 'sub_b');\n// => 'a/sub_b'\n"	"### `pathfind(<string[]> paths, <string> target) => Promise`\nAsynchronously find a `target` path in a list of `paths`.\n"
pg-tsquery	"const tsquery = require('pg-tsquery')(/* options can be passed to override the defaults */);\n\npool.query('SELECT * FROM tabby WHERE to_tsvector(col) @@ to_tsquery($1)', [tsquery(str)])\n"	"### Usage\n"
piece-table	"const PieceTable = require(\"piece-table\");\n\nconst document = new PieceTable(\"This is a document with some text.\");\n\ndocument.insert(\"This is some more text to insert at offset 33.\", 33);\n\n// Delete the previously inserted sentence\ndocument.delete(79, 46);\n\nvar sequence = document.getSequence();\n// sequence == \"This is a document with some text.\"\n\nvar subString = document.stringAt(9, 8);\n// subString == \"document\"\n\n// PieceTable is an iterable:\nfor (let character of document) {\n    console.log(character);\n    // 'T', 'h', 'i', 's', ...\n}\n"	"## Usage\n"
plainify-loader	"import json from \"json!plainify!./file.json\";\n// => returns file.json content as JSON parsed and plainified object\n"	"## Usage\n"
plainify-loader	"import json from \"json!plainify!yaml!./file.yml\";\n// => returns file.yml content as YAML parsed and plainified object\n"	"or you can use it with `yaml-loader`\n"
plugin-container	"import { PluginContainer } from 'plugin-container';\nconst plugins = new PluginContainer();\nplugins.install({\n  name: 'secondPlugin',\n  priority: 2,\n  execute(input) {\n    return `avacadabra${input}flumflumblablasrpic`;\n  },\n});\nplugins.install({\n  name: 'first plugin',\n  priority: 1,\n  execute(input) {\n    return input.replace(/blabla/gi, 'loremipsum');\n  },\n});\n\nconst output = plugins.executeAll('hello world blabla world');\nconsole.log(output)\n// the output is the transformation, in other, of all the plugins, in this case:\n// 'avacadabrahello world loremipsum worldflumflumloremipsumsrpic'\n"	"# Usage\n"
prometheus-log-client	"const PromLog = require('prometheus-log-client')\nconst promLog = new PromLog(6754)\n\npromLog.listen()\n\npromLog.createCounter(\n    /^(WARN|ERROR)/, // regex to match again\n    matches => { // how to process the matches\n        return {\n            name: 'fail_log_lines',\n            help: 'Count of total error and warn log lines',\n            labels: {\n                level: matches[1].toLowerCase()\n            }\n        }\n    }\n)\n\npromLog.watch('./test.log', '\\n', (err) => {\n    console.warn(err)\n})\n"	"## How to use\nInstall from npm:\n"
react-connex	"import ConnexProvider from 'react-connex';\n\n<ConnexProvider\n  loading=\"Loading...\"\n  error={err => `Connection error: ${err}`}>\n  <App />\n</ConnexProvider>\n"	"## Basic Usage\nAdd the `ConnexProvider to your root React Component;\n"
react-connex	"import { withConnex } from 'react-connex';\n\nclass MyComponent {\n  render() {\n    const { connex } = this.props;\n    const status = connex.thor.status;\n\n    return status.progress;\n  }\n}\n\nexport default withConnex(MyComponent);\n"	"Then in the component where you want to use Connex:\n"
react-connex	"import { withConnex } from 'react-connex';\n\nclass MyComponent {\n  render() {\n    const { getNetwork } = this.props;\n    getNetwork().then(network => {\n      return `${network.id} and ${network.name}`\n    });\n  }\n}\n\nexport default withConnex(MyComponent);\n"	"You can use the injected `getNetwork` property to get network details:\n"
react-google-map-image	"// Using ES5\nvar ReactGoogleMapImage = require('react-google-map-image'); \n\n// Using ES6\nimport ReactGoogleMapImage from 'react-google-map-image';\n\n// Example Usage\nconst googleMapApiConfig = { \n\tcenter: '32 wulemotu ajoke street akoka', \n\tsize: '500x240', \n\tzoom: '15',\n\tkey: {{ google-api-key }}, \n\tmaptype: 'roadmap'\n}\n<ReactGoogleMapImage \n    config={googleMapApiConfig}\n    wrapperStyle={{ width: '100%' }}\n    style={{ width: '100px', height: 'auto', border: '1px solid #ccc'}}\n/>\n"	"## Usage\nThis component is super easy to you\n"
react-native-document-scanner	"import React,{ Component } from 'react';\nimport { View, Image } from 'react-native';\n\nimport DocumentScanner from 'react-native-document-scanner';\n\nclass YourComponent extends Component {\n  render() {\n    return (\n      <View>\n        <DocumentScanner\n          useBase64\n          onPictureTaken={data => this.setState({\n            image: data.croppedImage,\n            initialImage: data.initialImage,\n            rectangleCoordinates: data.rectangleCoordinates,\n          })}\n          overlayColor=\"rgba(255,130,0, 0.7)\"\n          enableTorch={false}\n          brightness={0.3}\n          saturation={1}\n          contrast={1.1}\n          quality={0.5}\n          onRectangleDetect={({ stableCounter, lastDetectionType }) => this.setState({ stableCounter, lastDetectionType })}\n          detectionCountBeforeCapture={5}\n          detectionRefreshRateInMS={50}\n        />\n        <Image source={{ uri: `data:image/jpeg;base64,${this.state.image}`}} resizeMode=\"contain\" />\n      </View>\n    );\n  }\n}\n\n"	"## Usage\n"
react-native-document-scanner	"<DocumentScanner ref={(ref) => this.scanner = ref} />\n"	"## Manual capture\n- First get component ref\n"
react-native-document-scanner	"this.scanner.capture();\n"	"- Then call :\n"
react-native-security-keyboard	"import SecurityKeyboard from 'react-native-security-keyboard'\n"	"## Usage\nImport ``react-native-security-keyboard`` and wrap your content inside\nit:\n"
react-native-sms-x	"import SendSMS from 'react-native-sms-x';\n// you can put any number as Id to identify which message being process\nSendSMS.send(123, \"+959254687254\", \"Hey.., this is me!\\nGood to see you. Have a nice day.\", (msg)=>{ alert(msg) });\n"	"***\n**SendSMS**\n> ##### A react-native api to send SMS messages. It works only for android. This component used android native api to send sms and response a callback to react-native. This react-native component doesn't link to the mobile default messenger view. It will programmatically send the message to a phone number which is provided as a parameter and will response a callback with a string indicating message was sent or failure or no service.\n*usage*\n"
react-native-sms-x	"import React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ToastAndroid\n} from 'react-native';\nimport SendSMS from 'react-native-sms-x';\n\nexport default class RNSMS extends Component {\n  sendSMSFunction() {\n    SendSMS.send(123, \"+95912345678\", \"Hey.., this is me!\\nGood to see you. Have a nice day.\",\n      (msg)=>{\n        ToastAndroid.show(msg, ToastAndroid.SHORT);\n      }\n    );\n  }\n  render() {\n    return (\n      <View style={styles.container}>        \n        <TouchableOpacity style={styles.button} onPress={this.sendSMSFunction.bind(this)}>\n          <Text>Send SMS</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },  \n  button: {\n    padding: 10,\n    borderWidth: .5,\n    borderColor: '#bbb',\n    margin: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nAppRegistry.registerComponent('RNSMS', () => RNSMS);\n"	"**Example**\n"
react-native-update-avocados	"import RNUpdateAvocados from 'react-native-update-avocados';\n\n// \nRNUpdateAvocados;\n"	"## Usage\n"
react-slick-cong	"var React = require('react');\nvar Slider = require('react-slick');\n\nclass SimpleSlider extends React.Component {\n  render: function () {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n      </Slider>\n    );\n  }\n}\n"	"### Example\n"
react-slick-cong	"class LeftNavButton extends React.Component {\n  render() {\n    return <button {...this.props}>Next</button>\n  }\n}\n"	"### Custom next/prev arrows\nTo customize the next/prev arrow elements, simply create new React components and set them\nas the values of nextArrow and prevArrow.\n"
react-slick-cong	"window.matchMedia = window.matchMedia || function() {\n    return {\n        matches : false,\n        addListener : function() {},\n        removeListener: function() {}\n    };\n};\n\n"	"To fix this issue add below snippet in test-setup.js\n"
rebas	"/**\n * @file app.js 应用启动脚本\n */\nvar app = require('rebas');\n\n// 加载路由配置\napp.load(require('./lib/config'));\n\n// 启动服务\napp.start();\n"	"## Usage\n"
rebas	"var app = require('rebas');\n\n// 获取 `config/app.json` 中的配置信息\napp.get('app');\n"	"#### get(name)\n获取存储在 `配置文件夹` 下的 `JSON` 配置信息，`配置文件夹` 的默认路径为 `config`\n* **name** `{string}` 配置文件名称，不包含 `.json` 后缀名\n* _return_ `{*}` 配置信息\n例如需要获取 `config/app.json` 文件中的配置信息可以通过如下方式获得：\n"
rebas	"{\n    // 是否将日志输出到标准输出(stdout)\n    console: false,\n    // 日志等级\n    level: 'INFO',\n    // 日志类型，默认为按时间分割的日志文件\n    type: 'dateFile',\n    // 日志默认存储在 `log` 目录下，名为 `rebas.log`\n    filename: 'log/rebas.log',\n    // 日志以小时级别切分\n    patter: '-MM-dd-hh',\n    alwaysIncludePattern: false,\n    // 日志输出格式\n    layout: {\n        type: 'pattern',\n        pattern: '[%d] [%x{pid}] [%p] - %m',\n        tokens: {\n            pid: process.pid\n        }\n    }\n}\n"	"#### log\n日志配置文件 `log.json` ，`rebas` 使用 [log4js-node](https://github.com/nomiddlename/log4js-node) 提供日志服务，相关配置信息更详细的说明请参考 [log4js-node 的配置说明](https://github.com/nomiddlename/log4js-node/wiki/Appenders)，默认的配置信息如下：\n"
regexp-clone	"const regexpClone = require('regexp-clone');\n\nconst a = /somethin/misguy;\nconsole.log(a.global); // true\nconsole.log(a.ignoreCase); // true\nconsole.log(a.multiline); // true\nconsole.log(a.dotAll); // true\nconsole.log(a.unicode); // true\nconsole.log(a.sticky); // true\n\nconst b = regexpClone(a);\nconsole.log(b.global); // true\nconsole.log(b.ignoreCase); // true\nconsole.log(b.multiline); // true\nconsole.log(b.dotAll); // true\nconsole.log(b.unicode); // true\nconsole.log(b.sticky); // true\n\nconst c = /hi/g;\nc.test('this string hi there');\nassert.strictEqual(c.lastIndex, 3);\n\nconst d = regexpClone(c);\nassert.strictEqual(d.lastIndex, 3);\nd.test('this string hi there');\nassert.strictEqual(d.lastIndex, 14);\nassert.strictEqual(c.lastIndex, 3);\n"	"==============\nClones RegExps with flag and `lastIndex` preservation.\n"
reiconify-cli	"module.exports = {\n  template: Function,\n  baseTemplate: Function,\n  filenameTemplate: Function,\n  defaultProps: {},\n  baseClassName: 'Icon',\n  baseDefaultProps: {\n    viewBox: '0 0 24 24',\n  },\n  svgoPlugins: [\n    {\n      removeAttrs: {attrs: ['fill', 'svg:(viewBox)']},\n    },\n  ],\n}\n"	"## Configuration File\nAdd `reiconify.config.js`(optional) to your project:\n"
reiconify-cli	"import * as Icons from 'my-icons'\n\n<Icons.Check />\n<Icons.ThumbUp size={20} fill={'#rgb'} />\n"	"Import icons:\n"
reiconify-cli	"import {transform} from 'reiconify'\n\nconst code = transform(svg)\n"	"## API Usage\n"
replace-constructor	"const replace = require('replace-constructor')\r\n\r\nclass Original {\r\n  constructor(x, y) {\r\n    // ..\r\n  }\r\n}\r\n\r\nconst Wrapped = replace(Original, function(x, y){\r\n  Original.call(this, x, y)\r\n})\r\n"	"\r\n"
replace-in	"const replace = require('replace-in')\r\n\r\n// let's create some phrases to replace it in our file.\r\nconst phrase1 = {\r\n  // regex\r\n  regex:/old/ig,\r\n  // replace\r\n  replace:'new'\r\n}\r\n\r\n// and we have to replace more.\r\nconst phrase1 = {\r\n  // regex\r\n  regex:'second',\r\n  // replace\r\n  replace:'third'\r\n}\r\n\r\nreplace('/path1/path2/fileName', [phrase1, phrase1], (err, report) => {\r\n  //\r\n  [\r\n    {\r\n      isChanged: true,\r\n      regex:/old/ig,\r\n      replace:'new'\r\n    },\r\n    {\r\n      isChanged: false, // not found so it wasn't changed\r\n      regex:'second',\r\n      replace:'third'\r\n    },\r\n   ]\r\n  //\r\n});\r\n"	"\r\n"
replace-in	"replace('/path1/path2/fileName', [ph0, ph1, p2, ph3], (err, report) => {\r\n  if(report[2].isChanged){\r\n    console.log('p2 was found and changed');\r\n  } else {\r\n    console.log('not found');\r\n  }\r\n});\r\n"	"Or you can check specific phrase result.\r\n\r\n"
resolve-bin	"var resolveBin = require('resolve-bin');\n\n// package.json: \"bin\": \"bin/tap.js\"\nresolveBin('tap', function (err, bin) {\n  if (err) return console.error(err);\n  console.log(bin);  \n});\n\n// => [..]/resolve-bin/node_modules/tap/bin/tap.js\n"	"Resolves the full path to the bin file of a given package by inspecting the `\"bin\"` field in its package.json.\n"
resolve-subscribe-mqtt	"import createClientAdapter from 'resolve-subscribe-mqtt';\n\n(async () => {\n  const adapter = createClientAdapter({ origin, rootPath, url, appId, onEvent })\n  \n  await adapter.init()\n})() \n"	"#### Client Side\n"
resolve-subscribe-mqtt	"import createServerAdapter from 'resolve-subscribe-mqtt';\n\n(async () => {\n  const adapter = createServerAdapter({ server, getRootBasedUrl, pubsubManager, appId })\n  \n  await adapter.init()\n})() \n"	"#### Server Side\n"
rtpengine-client	"const Client = require('rtpengine-client').Client ;\nconst client = new Client() ;\n\nclient.ping(22222, '39.194.250.246')\n  .then((res) => {\n    console.log(`received ${JSON.stringify(res)}`); // {result: 'pong'}\n  })\n  .catch((err) => {\n    console.log(`Error: ${err}`);\n  }\n}\n"	"## Usage\n"
rtpengine-client	"client = new Client() ;  // listen on any port and default address\n// or..\nclient = new Client(9055);    // listen on a specific port\n// or..\nclient = new Client(9055, '192.168.1.10'); // listen on a specific port and address\n// or..\nclient = new Client({port: 9055, host: '192.168.1.10'}); // listen on a specific port and address\n// or..\nclient = new Client({timeout: 1500}); // wait a max of 1500 ms for each command reply, throw error on timeout\n// or..\nclient = new Client({rejectOnFailure: true}); \n// reject promise on any command if response from rtpengine has error \n// default behavior is to resolve with any response from rtpengine, even errors\n"	"## Constructing a client \n"
rx.observable.combine-template	"import combineTemplate from 'rx.observable.combine-template';\nimport * as Rx from 'rx';\n\nlet subject1 = new Rx.Subject();\nlet subject2 = new Rx.Subject();\n\ncombineTemplate({\n  foo : 'bar',\n  baz : {\n    foo : ['bar', subject1 'qux']\n  },\n  qux : {\n    foo : {\n     foo : 'bar'\n     baz : subject2\n    }\n  }\n}).subscribe((value)=> {\n  console.log(value);\n  /* === output ===\n  {\n    foo : 'bar',\n    baz : {\n      foo : ['bar', 'BAZ' 'qux']\n    },\n    qux : {\n      foo : {\n       foo : 'bar'\n       baz : 'QUX'\n      }\n    }\n  }\n  */\n});\n\nsubject1.onNext('BAZ');\nsubject2.onNext('QUX');\n"	"### Basics\n"
rx.observable.combine-template	"componentWillMount() {\n  combineTemplate({\n    items : store.itemsObservable$,\n    count : store.itemsObservable$.map((items) => items.length)\n  }).subscribe(this.setState.bind(this));\n}\n"	"### with React\nState is updated automatically receives a value from the observables.\n"
savey-wavey	"{\n  \"commands\": [\n    {\n      \"files\": \"src/**/*.js\",\n      \"baseDir\": \"src\",\n      \"command\": \"./node_modules/.bin/babel ${filePath} --out-file libs/${fileDirRelativeToBase}/${fileBase}.js\"\n    }\n  ],\n  \"config\": <optional configuration options>\n}\n"	"## Usage\nCreate an `.on-save.json` file at the root of you project.\nFor example, if you want to babelify every `.js` file from `src` to `lib`:\n"
savey-wavey	"{\n  commands: [<your command definitions>],\n  config: {\n    showSuccess: true;\n    autohideSuccess: true;\n    autohideSuccessTimeout: 1200;\n  }\n}\n"	"### Configuration Options\n"
search_by_tags	"const { searchByTags } = require('search_by_tags');\n// Parse your query url to this => ['eq:a|b', 'eq:c', 'not:d']\n// Meaning:\n// - tag must contain `c`\n// - tag must contains `a` or `b`\n// - tag must NOT contains `d`\nconst res = searchByTags(['eq:a|b', 'eq:c', 'not:d']);\n// req.eqAnd = ['c']\n// req.eqOr = ['a', 'b']\n// req.notEqAnd = ['d']\n"	"## How to use\n"
search_by_tags	"{\n  eqAnd: ['a'],\n  eqOr: ['b','c'],\n  notEqAnd: ['d']\n}\n"	"## Example\n- From input url like `https://api.example.com?tags=eq:a&tags=eq:b|c&tags=not:d`\n- To output:\n"
shift-refactor	"const { RefactorSession } = require('shift-refactor');\nconst { parseScript } = require('shift-parser');\n\nconst ast = parseScript(javaScriptSource);\n\nconst refactor = new RefactorSession(ast);\n"	"## Usage\nStart by instantiating a RefactorSession with a Shift-format JavaScript AST.\n"
shift-refactor	"const refactor = new RefactorSession(ast, { autoCleanup: false });\n\n// lots of work\n\nrefactor.cleanup();\n"	"By default the RefactorSession cleans up after all major tree-modifying actions. This can be a serious\nperformance drain when you are running lots of small changes on a big tree.\nYou can pass `{ autoCleanup: false }` to the constructor to turn this off and then manually call `.cleanup()` at a time you choose.\n"
shift-refactor	"refactor.rename(`IdentifierExpression[name=\"oldName\"]`, 'newName');\n"	"### .rename(query | nodes, newName)\nRenames nodes to `newName`\n"
shift-refactor	"function oldName(){}\noldName();\n"	"From\n"
shift-refactor	"function newName(){}\nnewName();\n"	"To \n"
shift-refactor	"refactor.delete(`FunctionDeclaration[name.name=\"newName\"]`);\n"	"### delete\nDeletes nodes\n"
shift-refactor	"function newName(){}\nnewName();\n"	"From\n"
shift-refactor	"// To\nnewName();\n"	"To \n"
shift-refactor	"refactor.replace(`IdentifierExpression[name.name=\"someVar\"]`, `console.log(\"Hi\")`);\n"	"### .replace(query | nodes, source | nodes | callback(node))\nReplaces nodes with the passed program or nodes. If this is passed a callback then the callback will be \nexecuted with the node passed as a parameter and the return value being the replacement value.\n"
shift-refactor	"someVar;\n"	"From\n"
shift-refactor	"console.log(\"Hi\");\n"	"To \n"
shift-refactor	"this.replaceRecursive(\n  `ComputedMemberExpression[expression.type=\"LiteralStringExpression\"]`, \n  node => {\n      return new Shift.StaticMemberExpression({\n        object: node.object,\n        property: node.expression.value\n      });\n    }\n);\n"	"### .replaceRecursive(query, source | nodes | callback(node))\nSame as .replace() except will be continually called until `query` returns no more nodes. Useful for sweeping refactors of a consistent format.\n"
shift-refactor	"object[\"property1\"][\"property2\"];\n"	"From\n"
shift-refactor	"object.property1.property2;\n"	"To \n"
shift-refactor	"refactor.insertBefore(\n  `ExpressionStatement[expression.type=\"CallExpression\"]`, \n  node => `console.log(\"Calling ${node.expression.callee.name}()\")`\n);\n"	"### .insertBefore(query | nodes, source | callback(node))\nInserts statements before target statement. Callback can return source or Shift nodes.\n"
shift-refactor	"function someFunc(){}\nsomeFunc();\notherFunc();\n"	"From\n"
shift-refactor	"function someFunc(){}\nconsole.log(\"Calling someFunc()\");\nsomeFunc();\nconsole.log(\"Calling otherFunc()\");\notherFunc();\n"	"To \n"
shift-refactor	"refactor.insertAfter(\n  `ExpressionStatement[expression.type=\"CallExpression\"]`, \n  node => `console.log(\"Called ${node.expression.callee.name}()\")`\n);\n"	"### .insertAfter(query | nodes, source | callback(node))\nSame as insertBefore except it inserts after the target statements.\n"
shift-refactor	"function someFunc(){}\nsomeFunc();\notherFunc();\n"	"From\n"
shift-refactor	"function someFunc(){}\nsomeFunc();\nconsole.log(\"Called someFunc()\");\notherFunc();\nconsole.log(\"Called otherFunc()\");\n"	"To \n"
shift-refactor	"const loc = window[\"document\"][\"location\"];\n"	"### .convertComputedToStatic()\nTransforms computed properties and the like to static properties. Meant to be used near the end of a refactor session to clean up the resulting code\nFrom\n"
shift-refactor	"const loc = window.document.location;\n"	"To \n"
shift-refactor	"if (!0 || !1) {}\n"	"### .expandBoolean()\nTurns !0 and !1 into their respective boolean values;\nFrom\n"
shift-refactor	"if (true || false) {}\n"	"To \n"
shift-refactor	"const arst=1, aryl=2; \nvar aiai; \nfunction foie() {\n  const arst=2;\n  arst++;\n}\nfoie();\n"	"### .normalizeIdentifiers() \nTurns every identifier into a simple identifier unique for the entire program. This greatly simplifies query-ability and \nalso normalizes code that dynamically updates variable names over time.\nFrom\n"
shift-refactor	"const c=1, d=2; \nvar a; \nfunction b() {\n  const e=2;\n  e++\n}\nb();\n"	"To \n"
shift-refactor	"var a=['\\x74\\x61\\x72\\x67\\x65\\x74','\\x73\\x65\\x74\\x54\\x61\\x72\\x67\\x65\\x74','\\x77\\x6f\\x72\\x6c\\x64','\\x67\\x72\\x65\\x65\\x74','\\x72\\x65\\x61\\x64\\x65\\x72'];var b=function(c,d){c=c-0x0;var e=a[c];return e;};(function(){class c{constructor(d){this[b('0x0')]=d;}['\\x67\\x72\\x65\\x65\\x74'](){console['\\x6c\\x6f\\x67']('\\x48\\x65\\x6c\\x6c\\x6f\\x20'+this[b('0x0')]);}[b('0x1')](e){this['\\x74\\x61\\x72\\x67\\x65\\x74']=e;}}const f=new c(b('0x2'));f[b('0x3')]();f[b('0x1')](b('0x4'));f[b('0x3')]();}());\n"	"## Example\nAssuming an input file named `obfuscated.js` containing this:\n"
shift-refactor	"const { RefactorSession } = require('shift-refactor');\nconst { parseScript } = require('shift-parser');\nconst Shift = require('shift-ast');\n\nconst fileContents = require('fs').readFileSync('./original-obfuscated.js', 'utf8');\n\nconst tree = parseScript(fileContents);\n\nconst refactor = new RefactorSession(tree);\n\nconst strings = refactor.query(`Script > :first-child ArrayExpression > .elements`);\n\nconst destringifyDeclarator = refactor.query(`VariableDeclarator[binding.name=\"b\"][init.params.items.length=2]`);\n\nrefactor.rename(destringifyDeclarator, 'destringify');\n\nconst destringifyOffset = refactor.queryFrom(destringifyDeclarator, `BinaryExpression > LiteralNumericExpression`);\n\nconst findIndex = (c, d) => c - destringifyOffset[0].value;\n\nrefactor.replace(\n  `CallExpression[callee.name=\"destringify\"]`, \n  node => new Shift.LiteralStringExpression({value: strings[findIndex(node.arguments[0].value)].value})\n)\n\nrefactor.delete(`[binding.name=\"a\"]`)\nrefactor.delete(`[binding.name=\"destringify\"]`)\n\nrefactor.convertComputedToStatic();\n\nconsole.log(refactor.print());\n"	"You can use the following program to deobfuscate it:\n"
shift-refactor	"(function () {\n  class c {\n    constructor(d) {\n      this.target = d;\n    }\n    greet() {\n      console.log(\"Hello \" + this.target);\n    }\n    setTarget(e) {\n      this.target = e;\n    }\n  }\n  const f = new c(\"world\");\n  f.greet();\n  f.setTarget(\"reader\");\n  f.greet();\n}());\n"	"resulting in:\n"
shim-require	"const shimRequire = require('shim-require');\nshimRequire((content, filename) => {\n  // return modified content\n  return `console.log(\"loading ${filename}\");\\n${content}`;\n});\n\nrequire('foo'); // `loading /path/to/foo`\n"	"Pre-process javascript files as they get `require`d\n"
shim-require	"shimRequire(content => content.replace(/foo/g, 'bar'), 'json');\nrequire('foo.json'); // { \"a\": \"bar\" }\n"	"Can also modify json files\n"
shitpost-generator	"new Box([\n    [yellow.x, yellow.y], [red.x, red.y], // here you provide the rest of the points\n    [blue.x, blue.y], [green.x, green.y]              // for each point of the box\n])\n"	"# Points\n* The image need points in which it will follow to draw on top of the background\n* Each Box object have a `points` parameter which is an Array of arrays\n![points](https://i.imgur.com/m4ruZah.png)\nFor example, yellow, you need to provide X and Y of it:\n"
showdown-target-blank	"var converter = new Showdown.converter({extensions: ['targetblank']}),\n    input = 'This is a [link](http://www.example.com)',\n    html = converter.makeHtml(input);\n    console.log(html);\n"	"## Example\n"
simple-os-platform	"// ES6/ES7/ESNext\r\nimport { getOS, isMac, isNotMac } from 'simple-os-platform'\r\n\r\ngetOS(); // returns your Operating System Eg. Mac, Windows etc (see list below)\r\nisMac(); // returns true if your operating system is a Mac\r\nisNotMac(); // returns false if your operating system is a Mac\r\n\r\n// CommonJS\r\nvar simpleOSPlatform = require('simple-os-platform');\r\n\r\nsimpleOSPlatform.getOS(); // returns your Operating System Eg. Mac, Windows etc (see list below)\r\nsimpleOSPlatform.isMac(); // returns true if your operating system is a Mac\r\nsimpleOSPlatform.isNotMac(); // returns false if your operating system is a Mac\r\n"	"## Usage\r\n\r\nHere's an example of a component that renders a shortcut phrase based off the user's operating system:\r\n\r\n"
simple-toaster	"import SimpleToaster from \"simple-toaster\"\n\nSimpleToaster('success', 'Hello Toaster!')\n"	"SimpleToaster is primarily ES6 module. See it in action:\n"
simple-toaster	"window.toaster = SimpleToaster\n\nwindow.toaster(\n  'error',    // Toaster style type. Pre-defined: error, warning or success\n  'message',  // Message\n  false       // Timeout in ms (default: 5000)\n)\n\n"	"Parameters:\n"
simple-toaster	"@import ~simple-toaster/src/simple-toaster // or 'simple-toaster/dist/simple-toaster.min.css'\n"	"Import the style\n"
soc-core	"import soc from 'soc-core';\n"	"##### Add some javascript\nUse the features of webpack to start quickly with your file. The idea is that you import the soc-core javascript files which were also bundled in advance. This is quite simple and only requires the following line\n"
soc-core	"var extractText = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        app: './src/javascripts/test',\n        css: './src/stylesheets/test.scss'\n    },\n\n    output: {\n        filename: './dist/[name].bundle.js'\n    },\n    devtool: 'source-map',\n    module: {\n        loaders: [{\n            test: /\\.scss$/,\n            loader: extractText.extract('css-loader!sass-loader?sourceMap')\n        }]\n    },\n\n    plugins: [\n        new extractText({\n            filename: 'dist/test.css',\n            disable: false,\n            allChunks: true\n        }),\n    ]\n};\n"	"##### Setup webpack\nCreate a webpack.config.js file in the root of your project and paste in the following contents\n"
soc-core	"\"scripts\": {\n    \"start\": \"webpack-dev-server --watch --progress --inline --open\",\n    \"build\": \"webpack --progress\"\n},\n"	"This is a basic setup of webpack, it tells webpack to look at 2 entries (app and css) at their corresponding paths and put them in /dist/app.bundle.js and /dist/css.bundle.js respectively. The modules define loaders and how to process files with the .scss extension. In this case it will first be compiled using the sass-loader, then the css will interpret url(..) and import statements and embed the results into the css.bundle.js file found in the dist folder. Finally this is extracted back out using the extract text plugin to a test.css file (which is setup in the plugins array)\nTo start the build simply run 'webpack' in a terminal window on the root of your project (requires webpack to be installed globally and sufficient rights). Another option is to set the scripts of your packages.json file to the following:\n"
split-if-boxed-bug-x	"import splitIfBoxedBug from 'split-if-boxed-bug-x';\n\n// No boxed bug\nconsole.log(splitIfBoxedBug('abc')); // 'abc'\n\n// Boxed bug\nconsole.log(splitIfBoxedBug('abc')); // ['a', 'b', 'c']\n"	"### `module.exports(value)` ⇒ <code>\\*</code> ⏏\nThis method tests if a value is a string with the boxed bug; splits to an\narray for iteration; otherwise returns the original value.\n**Kind**: Exported function  \n**Returns**: <code>\\*</code> - An array or characters if value was a string with the boxed bug;\notherwise the value.\n| Param | Type            | Description             |\n| ----- | --------------- | ----------------------- |\n| value | <code>\\*</code> | The value to be tested. |\n**Example**\n"
stats-filelist	"var filelist = require('stats-filelist');\n\n// Asynchronous method:\nfilelist.get(['dir-1', 'dir-2'], function(list) {\n  console.log(list);\n}, /\\.js$/i); // Get JavaScript files.\n// `extension` property also can be used.\n\n// Synchronous method:\nvar list = filelist.getSync(['dir-1', 'dir-2'],\n  function(stats) { return stats.size > 1024; }); // Get 1KB+ files.\nconsole.log(list);\n"	"[![npm](https://img.shields.io/npm/v/stats-filelist.svg)](https://www.npmjs.com/package/stats-filelist) [![GitHub issues](https://img.shields.io/github/issues/anseki/stats-filelist.svg)](https://github.com/anseki/stats-filelist/issues) [![dependencies](https://img.shields.io/badge/dependencies-No%20dependency-brightgreen.svg)](package.json) [![license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE-MIT)\nGet a list of files and directories with `Stats` of each item. And filter the list with evaluating path, path pattern, type, size, modified time, and more.\nBy default, statsFilelist gets all files and directories under specific directories recursively, and it returns an Array that includes the expanded [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) objects of each item.  \nThat expanded `fs.Stats` object has additional properties such as `fullPath`, `extension`, etc.. (See [`Stats` object](#stats-object).)  \nThe got `Stats` objects will be useful more than the path list because you are supposed to do something with those files or directories after getting those.\nIt returns the filtered list if you want. That filter evaluates that `Stats` object by using flexible ways such as RegExp, callback, etc..  \nAnd also, the filter can control the behavior of statsFilelist. For example, it make statsFilelist stop getting files any more when the file you want was found out.\n"
stats-filelist	"filelist.get(path, callback[, options])\n"	"### `get`, `getSync`\n"
stats-filelist	"filelist.get(path, callback[, filter[, recursive]])\n"	"### `get`, `getSync`\n"
stats-filelist	"list = filelist.getSync(path[, options])\n"	"### `get`, `getSync`\n"
stats-filelist	"list = filelist.getSync(path[, filter[, recursive]])\n"	"### `get`, `getSync`\n"
stats-filelist	"console.log('File name: ' + list[3].name + ' Updated: ' + list[3].mtime);\n"	"`get` is asynchronous method, and `getSync` is synchronous method.\n`path` argument is a string as the path of target directory, or an Array that includes those of multiple target directories. The default value of `path` argument is `.` (i.e. current working directory).\n`callback` argument that is specified to `get` method is a function that is called with `list` Array when processing finished. That is same as `list` Array that is returned by `getSync` method.\nBy default, the `list` Array includes [`Stats` object](#stats-object)s. Also, what it includes can be specified via [`listOf`](#listof) option.\nFor example:\n"
stats-filelist	"filelist.get(path, callback, wanted);\n"	"`options` argument is an Object that has `filter` property, and more. (See [Options](#options).)  \n`filter` and `recursive` arguments are same as [`filter`](#filter) and [`recursive`](#options-recursive) option.  \nFor example, the following 2 codes work same:\n"
stats-filelist	"filelist.get(path, callback, { filter: wanted });\n"	"`options` argument is an Object that has `filter` property, and more. (See [Options](#options).)  \n`filter` and `recursive` arguments are same as [`filter`](#filter) and [`recursive`](#options-recursive) option.  \nFor example, the following 2 codes work same:\n"
stats-filelist	"list = filelist.getSync('./media', /\\.png$/i);\n"	"#### RegExp\nIf the full path of the current item matches this RegExp, that item is included to the list.\nFor example, the PNG files are listed ([`extension`](#extension) property of [`Stats` object](#stats-object) also can be used.):\n"
stats-filelist	"list = filelist.getSync('./repo',\n  /^(?!.*[\\/\\\\](?:debug\\.log|package\\.json)$).+$/);\n"	"For example, the files and directories except `debug.log` and `package.json` are listed:\n"
stats-filelist	"list = filelist.getSync('./project', /^(?!.*[\\/\\\\]\\.[^\\/\\\\]*$).+$/);\n"	"For example, the files and directories except files starting with a dot are listed:\n"
stats-filelist	"list = filelist.getSync('./websites', /[\\/\\\\]css[\\/\\\\]/i);\n"	"For example, the files and directories under `css` directories are listed:\n"
stats-filelist	"list = filelist.getSync('./dev', '/node_modules/');\n"	"#### string\nIf the full path of the current item includes this string, that item is included to the list.  \n`/` and `\\` are replaced to the platform-specific file separator before this is used. In Windows, the string comparisons are case-insensitive (e.g. it  considers that `file.txt` is included in `FooFile.TXT`).\nFor example, the files and directories under `node_modules` directories are listed:\n"
stats-filelist	"list = filelist.getSync('./project', '/.');\n"	"For example, the files and directories starting with a dot are listed:\n"
stats-filelist	"include = filter(stats)\n"	"##### When it returns a boolean\n"
stats-filelist	"list = filelist.getSync(null, function(stats) {\n  return stats.isDirectory(); // Use `stats.isFile()` if you want files.\n});\n"	"If this function returns a `true`, the current item is included to the list. If it returns a `false`, the current item is not included to the list.\nFor example, the directories are listed:\n"
stats-filelist	"list = filelist.getSync('./docs', function(stats) {\n  return stats.mtime > yesterday;\n});\n"	"For example, the files and directories that were modified recently are listed:\n"
stats-filelist	"list = filelist.getSync('./public_html', function(stats) {\n  return stats.name === 'index.html';\n});\n"	"For example, the `index.html` files are listed:\n"
stats-filelist	"object = filter(stats)\n"	"##### When it returns an Object\n"
stats-filelist	"list = filelist.getSync(null, function(stats) {\n  return {\n    include: stats.isFile()\n  };\n});\n"	"###### `include`\nIf `true` is specified to this property, the current item is included to the list. If `false` is specified to it, the current item is not included to the list.\nFor example, the files are listed:\n"
stats-filelist	"list = filelist.getSync('./websites', function(stats) {\n  return stats.name === 'public_html' ? {\n      include: true,\n      exit: true\n    } : false; // Others are not listed.\n});\n"	"###### `exit`\nIf `true` is specified to this property, statsFilelist exits from current directory after processing of current item, and the remaining items in current directory are not processed.  \n*Note that the \"current directory\" means the parent directory of current item, it is not the directory current item points.*  \nThis is used to finish the method fast.\nFor example, it does not have to look for the file any more in that directory if it found out `public_html`, because any more `public_html` are clearly not existing under that directory tree:\n"
stats-filelist	"list = filelist.getSync('./project', function(stats) {\n  return stats.name === 'foo.py' ? {\n      include: true,\n      stop: true\n    } : false; // Others are not listed.\n});\n"	"###### `stop`\nIf `true` is specified to this property, statsFilelist stops getting the items after processing of current item, and it returns the list that includes the items that were added until now, and the all remaining items are not processed.  \nThis is used to finish the method fast when you want to find out an only one file in the target path.\nFor example, it does not have to look for the file any more if it found out `foo.py`, because any more `foo.py` are clearly not existing under that project directory tree:\n"
stats-filelist	"list = filelist.getSync('./websites', function(stats) {\n  return stats.name === 'node_modules' ? {\n      include: false,\n      recursive: false\n    } : true; // Others are listed.\n});\n"	"###### <a name=\"filter-recursive\"></a>`recursive`\n*This is not [`recursive`](#options-recursive) option.*\nThis property overrides [`recursive`](#options-recursive) option temporarily.  \nWhen the current item is directory, if `true` is specified to this property, statsFilelist gets the items in that directory even if `false` is specified to `recursive` option. If `false` is specified to it, statsFilelist does not get the items in that directory even if `true` is specified to `recursive` option.  \nThis is used to finish the method fast.\nFor example, it does not have to list the files and directories in `node_modules` directory:\n"
stats-filelist	"list = filelist.getSync(null, { listOf: 'fullPath' });\n"	"### `listOf`\n*Type:* string  \n*Default:* `undefined`\nBy default, statsFilelist returns the list of [`Stats` object](#stats-object)s. If the name of property or method of `Stats` object is specified to this option, it returns the list of those values. That is value that was returned by specific method if the name of method is specified.\nFor example, the list of full paths of each file and directory is returned:\n"
stats-filelist	"[\n  '/path/to/file-1',\n  '/path/to/file-2',\n  '/path/to/dir-1',\n  '/path/to/file-3'\n]\n"	"`list`:\n"
stats-filelist	"list = filelist.getSync(null, { listOf: 'name' });\n"	"For example, the list of names of each file and directory is returned:\n"
stats-filelist	"[\n  'file-1',\n  'file-2',\n  'dir-1',\n  'file-3'\n]\n"	"`list`:\n"
stats-filelist	"list = filelist.getSync(null, { listOf: 'isFile' });\n"	"For example, the list of booleans to indicate whether it is file (return value of `isFile` method) of each item is returned:\n"
stats-filelist	"[\n  true,\n  true,\n  false,\n  true\n]\n"	"`list`:\n"
swordjs	"{\n    oneVersePerLine: false,\n    footnotes: false,\n    crossReferences: false,\n    headings: false,\n    wordsOfChristInRed: false,\n    intro: false, //show book or chapter introductions\n}\n"	"#### renderText(inPassage, inOptions, inCallback) ####\n```inPassage``` is a passage in a bible like ```Gen 1``` or ```Romans 3```. ```inOptions``` is an Object and optional. It can contain the following porperties (default values):\n"
swordjs	"{\n    text: \"...\", //the rendered text (HTML),\n    footnotes: {\n        \"Gen.1.1\": [{note: \"/*Note text*/\", n: \"1\"}, {...}],\n        \"Gen.1.4\": [{note: \"/*Note text*/\", n: \"2\"}, {...}],\n        ...\n    }\n}\n"	"The callback will return an object as second argument:\nExample:\n"
swordjs	"{\n    osisRef: \"Matt.1.1\",\n    book: \"Matt\",\n    bookNum: 39,\n    chapter: 1\n    verse: 1 //this can also be NaN if you pass a passage the has no verse in it like \"Matt 1\".\n}\n"	"#### verseKey.parse(inPassage, inV11n) ####\nTakes a passage (e.g. Matt 1:1) as argument an returns an object like this:\n"
tcomb-react-bootstrap	"/** @jsx React.DOM */\n// development\nvar Alert = require('tcomb-react-bootstrap/Alert');\n// production\n// var Alert = require('react-bootstrap/Alert');\n\nvar good = (\n  <Alert bsStyle=\"warning\">\n    <strong>Holy guacamole!</strong>\n  </Alert>\n); // => ok!\n\nvar bad = (\n  <Alert bsStyle=\"warn\"> // <-- should be \"warning\"\n    <strong>Holy guacamole!</strong>\n  </Alert>\n); // => fail! debugger kicks in\n"	"# Usage\n"
timeandreturn	"// ...\nlet a = foo();\nlet b = bar();\nreturn foobar(a, b);\n"	"# Usage\nSay you have a section of code\n"
timeandreturn	"const timeAndReturn = require('timeandreturn').timeAndReturn;\n\n// ...\nreturn timeAndReturn((elapsedTime) => {\n    // Do something with elapsedTime\n}, () => {\n    let a = foo();\n    let b = bar();\n    return foobar(a, b);\n});\n"	"You want to know how long these three lines of code take to run. You can wrap this block of code with `timeAndReturn`.\n"
timeandreturn	"const logTimeAndReturn = require('timeandreturn').logTimeAndReturn;\n\n// ...\n// Prints: \"() => { let a = foo(); let b = bar(); return f ...\" ran for 0.00014059999999881256 seconds\nreturn logTimeAndReturn(() => {\n    let a = foo();\n    let b = bar();\n    return foobar(a, b);\n});\n"	"The return value of `foobar` is returned by `timeAndReturn`, so the logic of the program is unchanged, but `elapsedTime` is captured.\nIf you only want to log `elapsedTime`, a `logTimeAndReturn` variant is provided.\n"
timeandreturn	"const logTimeAndReturn = require('timeandreturn').logTimeAndReturn;\n\n// ...\n// Prints: \"async () => { let a = foo(); let b = bar(); aw ...\" ran for 1.000469800000079 seconds\nreturn logTimeAndReturn(async () => {\n    let a = foo();\n    let b = bar();\n    await waitFor1Second();\n    return foobar(a, b);\n});\n"	"## Async\nIf `block` returns a `Promise`, `callback` is called when that `Promise` resolves.\n"
tinydoc-theme-gitbooks	"exports.plugins = [\n  require('tinydoc-theme-gitbooks')()\n];\n\n// you should probably turn on the collapsible sidebar setting:\nexports.collapsibleSidebar = true;\n\n// and restrict the sidebar resizing:\nexports.resizableSidebar = false;\n"	"And in your `tinydoc.conf.js`:\n"
typeface-baloo-tamma	"// Load Baloo Tamma typeface\nrequire('typeface-baloo-tamma')\n"	"## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n"
typeface-diplomata	"// Load Diplomata typeface\nrequire('typeface-diplomata')\n"	"## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n"
typeface-love-ya-like-a-sister	"// Load Love Ya Like A Sister typeface\nrequire('typeface-love-ya-like-a-sister')\n"	"## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n"
typeface-meddon	"// Load Meddon typeface\nrequire('typeface-meddon')\n"	"## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n"
virtual-webtorrent	"const hyperx = require('hyperx')\nconst vdom = require('virtual-dom')\nconst hx = hyperx(vdom.h)\nconst createWebTorrent = require('virtual-webtorrent')\n\nconst tree = hx`\n  <section>\n    ${createWebTorrent({ torrent: torrent })}\n  </section>\n`\ndocument.body.appendChild(vdom.create(tree))\n"	"## Usage\n"
vndb	"const VNDB = require('vndb');\n\n(async () => {\n  try {\n    const vndb = await VNDB.start();\n    console.log('Connected!');\n  } catch (e) {\n    console.log('Something happened when connecting to VNDB API');\n  }\n})();\n"	"## Usage\n`VNDB` exposes an object that contains only a single function `.start([host], [port])`. This is an asynchronous function that tries to connect to VNDB API.\n"
vndb	"const vndb = await VNDB.start('myvndb.com', 1234);\n"	"You can pass in host/port optionally. This is not required 99% of the times, unless VNDB changes host/port.\n"
vndb	"const vndb = await VNDB.start();\nconst res0 = await vndb.write('login {\"protocol\":1,\"client\":\"VNDB-Reborn-Tester\",\"clientver\":\"0.0.1\"}');\nconst res1 = await vndb.write('dbstats');\nconst res2 = await vndb.write('get vn basic,anime (id = 17)');\n"	"The start function itself returns an object that contains the socket and 2 convenient methods to interact with it.\n* `vndb.write(message)`\nWrite a raw message to VNDB API. Specification should follow [https://vndb.org/d11]([https://vndb.org/d11]). This function will add terminator and queue the message accordingly, as one socket can only send/receive one message at a time.\n"
vndb	"const vndb = await VNDB.start();\nconst res0 = await vndb.write('login {\"protocol\":1,\"client\":\"VNDB-Reborn-Tester\",\"clientver\":\"0.0.1\"}');\nawait vndb.end();\n"	"* `vndb.end()`\nEnd the socket connection. Can be await-ed if you want to make sure that it really ends.\n"
vue-analytics-fb	"import Vue from 'Vue'\nimport VueFacebookPixel from 'vue-analytics-fb'\n\nVue.use(VueFacebookPixel)\n"	"### Preparations\n"
vue-analytics-fb	"/**\n * Init facebook tracking pixel\n * @param  {String} appId\n * @param  {object} [data={}]\n */\nVue.analytics.fbq.init('YOUR_FACEBOOK_CODE', {\n  em: 'user@mail.com'\n})\n"	"### Calling API\nTo start using this script you will have to call `init(...)` first.\n"
vue-analytics-fb	"/**\n * Event tracking\n * @param  {String} name\n * @param  {object} [data={}]\n */\nVue.analytics.fbq.event('ViewContent', {\n  content_name: 'Really Fast Running Shoes'\n})\n"	"Make sure `init(...)` is called only once.\nThen you will have full access to the `event(...)` method.\n"
vue-for-echarts	"// 图表容器宽度\r\nwidth: {\r\n  type: String,\r\n  required: true,\r\n},\r\n// 图表容器高度\r\nheight: {\r\n  type: String,\r\n  required: true,\r\n},\r\n// 图表容器 ID（可选）\r\nid: {\r\n  type: String,\r\n},\r\n// echarts 图表具体配置项和数据\r\noptions: {\r\n  type: Object,\r\n  required: true,\r\n},\r\n// 是否在组件挂载时立即渲染\r\nrenderOnMounted: {\r\n  type: Boolean,\r\n  default: true,\r\n},\r\n// 是否自动 resize\r\nautoResize: {\r\n  type: Boolean,\r\n  default: true,\r\n},\r\n"	"#### props\r\n"
vue-network-status	"import {NetworkInfo, OnlineStatus} from 'vue-network-status';\n"	"## Usage\nImport the desired components\n"
vue-network-status	"export default {\n  name: 'app',\n  components: {\n    NetworkInfo,\n    OnlineStatus,\n    HelloWorld,\n  },\n};\n"	"Register them in your component\n"
vue-phone-number-input-countrylist	"import VuePhoneNumberInput from 'vue-phone-number-input';\nimport 'vue-phone-number-input/dist/vue-phone-number-input.css';\n\nVue.component('vue-phone-number-input', VuePhoneNumberInput);\n"	"### ES6 Modules / CommonJS\n"
vue-photo-carousel-preview	"{\r\n    test: /vue-preview.src.*?js$/,\r\n    loader: 'babel'\r\n}\r\n"	"## Usage\r\n\r\n使用须知：\r\n\r\n* 插件目前仅支持vue2.0以上版本\r\n* img标签上的class不能去掉\r\n\r\n如果你是使用vue-cli生成的项目，你需要修改`webpack.base.conf.js`文件中的loaders，添加一个loader。\r\n原因：插件编写中使用了es6的语法，需要进行代码编译\r\n"
vue-photo-carousel-preview	"import vuePhotoCarouselPreview from 'vue-photo-carousel-preview'\r\nVue.use(vuePhotoCarouselPreview)\r\n"	"### Install plugin\r\n\r\n"
vue-simple-uploader	"import Vue from 'vue'\nimport uploader from 'vue-simple-uploader'\nimport App from './App.vue'\n\nVue.use(uploader)\n\n/* eslint-disable no-new */\nnew Vue({\n  render(createElement) {\n    return createElement(App)\n  }\n}).$mount('#app')\n"	"### init\n"
vue-simple-uploader	"const uploaderInstance = this.$refs.uploader.uploader\n// now you can call all uploader methods\n// https://github.com/simple-uploader/Uploader#methods\nuploaderInstance.cancel()\n"	"#### Get `Uploader` instance\nYou can get it like this:\n"
watchpush	"{\n    \"name\": \"Name of your project\",\n    \"hook_port\":4000, // Port at which webhook sends request\n    \"secret\":\"Secret token registered at github webhook\",\n    \"preProcesses\":[ // Processes that need to run before starting app\n        \"git pull\",\n        \"install module\"\n    ],\n    \"runScript\":\"Final command that lifts/run/start your application\"\n}\n"	"## Configuration\n`watchpush.json` file is required in the root directory of your application\nIt contains following configurations\n"
watchpush	"{\n    \"name\": \"Simple node project\",\n    \"hook_port\":4000,\n    \"secret\":\"qwerty\",\n    \"preProcesses\":[\n        \"git pull origin master\",\n        \"npm install\"\n    ],\n    \"runScript\":\"node index.js\"\n}\n"	"### For a node app\n"
watchpush	"{\n    \"name\": \"Simple react project\",\n    \"hook_port\":4000,\n    \"secret\":\"qwerty\",\n    \"preProcesses\":[\n        \"git pull origin master\",\n        \"npm install\",\n        \"npm run build\"\n    ],\n    \"runScript\":\"serve ./public\"\n}\n"	"### For a react app\n"
watchpush	"{\n    \"name\": \"Simple python project\",\n    \"hook_port\":4000,\n    \"secret\":\"qwerty\",\n    \"preProcesses\":[\n        \"git pull origin master\",\n        \"pip install -r requirements.txt\"\n    ],\n    \"runScript\":\"python app.py\"\n}\n"	"### For a python app\n"
wdjf-file-loader	"import img from './file.png'\n"	"<h2 align=\"center\"><a href=\"https://webpack.js.org/concepts/loaders\">Usage</a></h2>\nBy default the filename of the resulting file is the MD5 hash of the file's contents with the original extension of the required resource.\n"
wdjf-file-loader	"module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {}  \n          }\n        ]\n      }\n    ]\n  }\n}\n"	"**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[path][name].[ext]'\n  }  \n}\n"	"#### `{String}`\n**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name (file) {\n      if (env === 'development') {\n        return '[path][name].[ext]'\n      }\n\n      return '[hash].[ext]'\n    }\n  }  \n}\n"	"#### `{Function}`\n**webpack.config.js**\n"
wdjf-file-loader	"import img from './customer01/file.png'\n"	"### `regExp`\nDefines a `regExp` to match some parts of the file path. These capture groups can be reused in the `name` property using `[N]` placeholder. Note that `[0]` will be replaced by the entire tested string, whereas `[1]` will contain the first capturing parenthesis of your regex and so on...\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    regExp: /\\/([a-z0-9]+)\\/[a-z0-9]+\\.png$/,\n    name: '[1]-[name].[ext]'\n  }  \n}\n"	"**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[path][name].[ext]',\n    context: ''\n  }  \n}\n"	"### `context`\n**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[path][name].[ext]',\n    publicPath: 'assets/'\n  }  \n}\n"	"### `publicPath`\n**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[path][name].[ext]',\n    outputPath: 'images/'\n  }  \n}\n"	"### `outputPath`\n**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    useRelativePath: process.env.NODE_ENV === \"production\"\n  }\n}\n"	"### `useRelativePath`\n`useRelativePath` should be `true` if you wish to generate a relative URL to the for each file context.\n"
wdjf-file-loader	"import img from './file.png'\n"	"### `emitFile`\nBy default a file is emitted, however this can be disabled if required (e.g. for server side packages).\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    emitFile: false\n  }  \n}\n"	"### `emitFile`\nBy default a file is emitted, however this can be disabled if required (e.g. for server side packages).\n"
wdjf-file-loader	"import png from 'image.png'\n"	"<h2 align=\"center\">Examples</h2>\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: 'dirname/[hash].[ext]'\n  }  \n}\n"	"**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[sha512:hash:base64:7].[ext]'\n  }  \n}\n"	"**webpack.config.js**\n"
wdjf-file-loader	"import png from 'path/to/file.png'\n"	"**webpack.config.js**\n"
wdjf-file-loader	"{\n  loader: 'file-loader',\n  options: {\n    name: '[path][name].[ext]?[hash]'\n  }  \n}\n"	"**webpack.config.js**\n"
webp-middleware	"var http = require('http');\nvar express = require('express');\nvar webp = require('webp-middleware');\n\nvar app = express();\n\napp.use(webp(__dirname + '/public', { ... }));\napp.use(express.static(__dirname + '/public'));\n"	"## Usage\n"
wechat-corp-service-callback	"var wechat_cs = require('wechat-corp-service-callback');\n\nvar app_suite = function(req, res, next) {\n    var _config = {\n        token: sc.token,\n        encodingAESKey: sc.encodingAESKey,\n        suiteid: sc.suite_id,\n    };\n    var _route = function(message, req, res, next) {\n        \n        if (message.InfoType == 'suite_ticket') { //微信服务器发过来的票，每10分钟发一次\n            //更新到数据库\n            var suite_ticket = message.SuiteTicket;\n            var suite_ticket_tm = new Date(parseInt(message.TimeStamp) * 1000);\n            //将最新的ticket放到数据库中, 调用用户自己定义的 save_ticket(callback) 方法。\n             save_ticket(function(err, ret) {\n                res.reply('success');\n            });\n        } else if (message.InfoType == 'change_auth') { //变更授权的通知\n            //更新到数据库\n            res.reply('success');\n\n        } else if (message.InfoType == 'cancel_auth') { //取消授权的通知\n            //更新到数据库\n            res.reply('success');\n        } else {\n            res.reply('success');\n        };\n    }\n    if (req.method == 'POST') {\n        wechat_cs(_config, _route)(req, res, next);\n    } else if (req.method == 'GET') {\n        res.send('这个接口不适合GET');\n    };\n}\n\napp.get(__base_path + '/app_suite_callback', app_suite);\napp.post(__base_path + '/app_suite_callback', app_suite);\n"	"### 用法\n其中的token，encodingAESKey，suite_id可以在套件的信息配置界面获取。\n"
windows-1256	"var windows1256 = require('windows-1256');\n"	"In [Node.js](https://nodejs.org/), [io.js](https://iojs.org/), [Narwhal](http://narwhaljs.org/), and [RingoJS](http://ringojs.org/):\n"
windows-1256	"load('windows1256.js');\n"	"In [Rhino](https://www.mozilla.org/rhino/):\n"
windows-1256	"require(\n  {\n    'paths': {\n      'windows-1256': 'path/to/windows-1256'\n    }\n  },\n  ['windows-1256'],\n  function(windows1256) {\n    console.log(windows1256);\n  }\n);\n"	"Using an AMD loader like [RequireJS](http://requirejs.org/):\n"
windows-1256	"const encodedData = windows1256.encode(text);\n"	"### `windows1256.encode(input, options)`\nThis function takes a plain text string (the `input` parameter) and encodes it according to windows-1256. The return value is a ‘byte string’, i.e. a string of which each item represents an octet as per windows-1256.\n"
windows-1256	"const encodedData = windows1256.encode(text, {\n  'mode': 'html'\n});\n// If `text` contains a symbol that cannot be represented in windows-1256,\n// instead of throwing an error, it will return an HTML entity for the symbol.\n"	"The optional `options` object and its `mode` property can be used to set the [error mode](https://encoding.spec.whatwg.org/#error-mode). For encoding, the error mode can be `'fatal'` (the default) or `'html'`.\n"
windows-1256	"const text = windows1256.decode(encodedData);\n"	"### `windows1256.decode(input, options)`\nThis function takes a byte string (the `input` parameter) and decodes it according to windows-1256.\n"
windows-1256	"const text = windows1256.decode(encodedData, {\n  'mode': 'fatal'\n});\n// If `encodedData` contains an invalid byte for the windows-1256 encoding,\n// instead of replacing it with U+FFFD in the output, an error is thrown.\n"	"The optional `options` object and its `mode` property can be used to set the [error mode](https://encoding.spec.whatwg.org/#error-mode). For decoding, the error mode can be `'replacement'` (the default) or `'fatal'`.\n"
ws-engine-request	"#!/usr/bin/env node\n\n'use strict';\n\nvar wer = require('ws-engine-request');\n\nwer.server({\n    port: 5000\n}, (messageData, callback) => {\n    let error = null;\n    let data = {\n        id: 1,\n        title: 'A Random Title'\n    };\n    let message = null;\n    callback(error, data, message);\n});\n"	"### Single Task Server Example\n"
ws-engine-request	"#!/usr/bin/env node\n\n'use strict';\n\nvar restify = require('restify');\nvar wer = require('ws-engine-request');\n\nlet server = restify.createServer({name: 'Restify Example - WebSocket Engine Connection'});\n\nserver.use(restify.acceptParser(server.acceptable));\nserver.use(restify.queryParser());\nserver.use(restify.bodyParser());\n\nserver.get('/engine', wer.request('ws://localhost:5000', null, null), wer.format);\n\nserver.listen(8080, () => {\n    console.log('%s listening at %s', server.name, server.url);\n});\n"	"### Restify Example\n"
wywordcloud	"import wywordcloud from 'wywordcloud';\nvar wc = new wywordcloud(document.getElementById('container'))\nwc.setOption({\n    tooltip: {\n        show: true\n    },\n    list: [['谈笑风生', 80], ['谈笑风生', 80], ['谈笑风生', 70], ['谈笑风生', 70], ['谈笑风生', 60], ['谈笑风生', 60]],\n    color: '#15a4fa'\n})\n"	"## Usage\n"
y-prompt	"\tconst Prompt=require('y-prompt');\r\n\t// use predefined types\r\n\tPrompt.baseTypes();\r\n\t// --- prompt your questions\r\n\tPrompt.prompter()\r\n\t// prepare your questions\r\n\t.log(datas=>'\\n--------- Start prompt ---------\\n')\r\n\t.ask('yn','response','do you say yes or no ?',{defaultValue:'n'})\r\n\t.log(datas=>'\\n--------- End prompt ('+datas.response+') ---------\\n')\r\n\t// launch the prompt\r\n\t.start()\r\n\t.then(function(datas){\r\n\t\t// process the result\r\n\t\tvar answer=['Yes','No'][datas.response?1:0];\r\n\t\tconsole.log('\\n- anwser='+answer+'\\n- data='+data);\r\n\r\n\t\t// **** if y displays :\r\n\t\t//- anwser=Yes\r\n\t\t//- data={response:true}\r\n\r\n\t\t// **** if n displays :\r\n\t\t//- anwser=No\r\n\t\t//- data={response:false}\r\n\r\n\t\tprocess.exit();\r\n\t});\r\n"	"\r\n<br/>\r\n\r\nAsk your questions and process the result:\r\n\r\n"
y-prompt	"\t// ...\r\n\t// use predefined types\r\n\tPrompt.baseTypes();\r\n"	"### <a name=\"tg_basetypes\"></a> Base types.\r\n\r\nOn your first uses, you may want to use 'y-prompt' [base types](YPrompt.baseTypes.js) instead before defining your owns (in this case go directly to [Make a prompter](#tg_prompt)), or you may simply use them whith yours.<br/>\r\n\r\n"
y-prompt	"\t/**\r\n\tAdd a new question type.\r\n\t@param {string} name : the type name.\r\n\t@param {function(inpt,onError,params)} check : return true if input is valid, else call onError.<br/>\r\n\t- {string} input : the current entry value<br/>\r\n\t- {function(message)} onError : Call to send an error message when the input is invalid.<br/>\r\n\t- {object} params : The parameters you may add to a quetion.<br/>\r\n\t@param {function(input,params)} transform : return the data corresponding to 'input'.\r\n\t- {string} input : the current entry value<br/>\r\n\t- {object} params : The parameters you may add to a quetion.<br/>\r\n\t@param {string} [parentType] : inherits its behaviour from a parent type if 'parentType' is defined. The parent will check and transform the data before passing it to the child method\r\n\t@param {any} [defaultValue] : defines a default value. Its use is deprecated since it remove the possibility to make the answer mandatory.\r\n\t*/\r\n\tPrompt.addType(name,check,transform,parentType,defaultValue);\r\n"	"### <a name=\"tg_deftypes\"></a> Define types.\r\n\r\ndefine a new type with **Prompt.addType**:\r\n\r\n"
y-prompt	"\t// ...\r\n\t/**\r\n\tgets a 'y' (for Yes) or 'n' (for No) answer as a boolean\r\n\t*/\r\n\tPrompt.addType('yn',\r\n\t\tfunction(inpt,onerr,params){//check\r\n\t\t\tif(['n','y'].indexOf(inpt.toLowerCase())>-1){\r\n\t\t\t\treturn 1;\r\n\t\t\t}else{\r\n\t\t\t\tonerr(`'${inpt}' is not a valid answer, accepted are 'y' for yes or 'n' for no.`);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tfunction(inpt){return !!(['n','y'].indexOf(inpt.toLowerCase()));}//transform gets boolean\r\n\t);\r\n"	"\r\n<br/>\r\n\r\nExemple from **[base types](YPrompt.baseTypes.js)** :\r\n\r\n"
y-prompt	"\t// ...\r\n\tPrompt.config.style.varName='green';\r\n"	"## <a name=\"tg_config\"></a>Configuration.\r\n\r\nYou can change the appearance of the prompt by changing the configuration styles for \t\t\t**varName,type,value,defaultValue,error**.\r\n\r\n"
y-prompt	"\t// ... dont forget to init types before\r\n\t// ...\r\n\tvar prompter=Prompt.prompter();\r\n\r\n"	"## <a name=\"tg_prompt\"></a>Make a prompter.\r\n\r\nThe first step is to create a new prompter.\r\n\r\n"
y-prompt	"\t/**\r\n\tLog a message between quesions.\r\n\t@param {string} message : will be logged to the console in time.\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.log(message);\r\n"	"#### <a name=\"tg_log\"></a> prompter.log\r\n\r\nLog a message between quesions.\r\n\r\n"
y-prompt	"\t/**\r\n\tAsk a question.\r\n\t@param {string} type : the name of the type used for the question.\r\n\t@param {string} varName : the name of the data property to witch the result will be assigned.\r\n\t@param {string} message : the question you want to ask.\r\n\t@param {object} [params] : specific questions parameters.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.ask(type,varName,message,params);\r\n"	"#### <a name=\"tg_ask\"></a> prompter.ask\r\n\r\nAsk a question.\r\n\r\n"
y-prompt	"\t/**\r\n\tadds a conditionnal prompter.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askIf(varName,condition,collector);\r\n"	"#### <a name=\"tg_askIf\"></a> prompter.askIf\r\n\r\nadds a conditionnal prompter.\r\n\r\n"
y-prompt	"\t/**\r\n\tadds a conditionnal prompter if preceeding conditions are not ok.<br/>\r\n\tcan be only called after askIf or elseIf.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.elseIf(varName,condition,collector);\r\n"	"#### <a name=\"tg_elseIf\"></a> prompter.elseIf\r\n\r\nadds a conditionnal prompter if preceeding conditions are not ok.\r\n\r\n"
y-prompt	"\t/**\r\n\tadds a prompter if preceeding conditions are not ok.<br/>\r\n\tcan be only called after askIf or elseIf.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.else(varName,collector);\r\n"	"#### <a name=\"tg_else\"></a> prompter.else\r\n\r\nadds a prompter if preceeding conditions are not ok.\r\n\r\n"
y-prompt	"\t/**\r\n\tCalls for collector while condition is ok. Creates an array of objects.<br/>\r\n\t@param {string} varName : data property to witch the  the resulting array will be assigned.<br/>\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector eatch time condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askWhile(varName,condition,collector);\r\n"	"#### <a name=\"tg_askWhile\"></a> prompter.askWhile\r\n\r\nCalls for prompters while condition is ok.\r\n\r\n"
y-prompt	"/**\r\n\tCalls for collector 'nbLoop' times. Creates an array of objects.<br/>\r\n\t@param {string} varName : data property to witch the  the resulting array will be assigned.<br/>\r\n\t@param {number>0|function} nbLoop : is or returns the size of the resulting array.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector 'nbLoop' times.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askLoop(varName,nbLoop,collector);\r\n"	"#### <a name=\"tg_askLoop\"></a> prompter.askLoop\r\n\r\nCalls for prompters a number of times.\r\n\r\n"
y-prompt	"\t/**\r\n\tStarts the prompt session.<br/>\r\n\tDoes not return a prompter. 'start' is the final action, call it only when all questions are prepared.\r\n\t@return {Promise} a promise flushed with the resulting datas when all questions are answered.\r\n\t*/\r\n\tprompter.start().then(datas=>{/* proceed result */})\r\n"	"#### <a name=\"tg_start\"></a> prompter.start\r\n\r\n"
yamoo9-unique-id	"var uniqueID = require('yamoo9-unique-id');\n\nuniqueID(); // 함수 호출하면 고유 ID 코드가 출력\n"	"### 사용법\n"
yuanian-common-echartable	"import ReactComponent from 'react_component';\r\n"	"\r\n然后，在代码中调用：\r\n\r\n"
zprint-clj	"const printFile = require('zprint-clj');\nconst outputText = format(inputText, inputFilePath, opts);\n"	"### API\n"
