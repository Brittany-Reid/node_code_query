[
 {
  "package": "@1stg/tsconfig",
  "snippets": []
 },
 {
  "package": "@activecampaign/camp-border",
  "snippets": []
 },
 {
  "package": "@ag-grid-enterprise/range-selection",
  "snippets": []
 },
 {
  "package": "@alifd/theme-6060",
  "snippets": []
 },
 {
  "package": "@alifd/theme-6823",
  "snippets": []
 },
 {
  "package": "@angular/router",
  "snippets": []
 },
 {
  "package": "@atlaskit/contextual-survey",
  "snippets": []
 },
 {
  "package": "@auto-it/omit-release-notes",
  "snippets": []
 },
 {
  "package": "@aws-sdk/client-rds-data-browser",
  "snippets": [
   {
    "description": "### Import\nThe AWS SDK is modulized by clients and commands in CommonJS modules. To send a request, you only need to import the client(`RDSDataClient`) and the commands you need, for example `BatchExecuteStatementCommand`:\n",
    "snippet": "//JavaScript\nconst {\n  RDSDataClient,\n  BatchExecuteStatementCommand\n} = require(\"@aws-sdk/client-rds-data-browser\");\n"
   },
   {
    "description": "### Import\nThe AWS SDK is modulized by clients and commands in CommonJS modules. To send a request, you only need to import the client(`RDSDataClient`) and the commands you need, for example `BatchExecuteStatementCommand`:\n",
    "snippet": "//TypeScript\nimport {\n  RDSDataClient,\n  BatchExecuteStatementCommand\n} from \"@aws-sdk/client-rds-data-browser\";\n"
   },
   {
    "description": "### Usage\nTo send a request, you:\n- Initiate client with configuration (e.g. credentials, region). For more information you can refer to the [API reference][].\n- Initiate command with input parameters.\n- Call `send` operation on client with command object as input.\n- If you are using a custom http handler, you may call `destroy()` to close open connections.\n",
    "snippet": "const rDSData = new RDSDataClient({region: 'region'});\n//clients can be shared by different commands\nconst params = {\n  resourceArn: /**a string value*/,\n  secretArn: /**a string value*/,\n  sql: /**a string value*/,\n};\nconst batchExecuteStatementCommand = new BatchExecuteStatementCommand(params);\nrDSData.send(batchExecuteStatementCommand).then(data => {\n    // do something\n}).catch(error => {\n    // error handling\n})\n"
   },
   {
    "description": "In addition to using promises, there are 2 other ways to send a request:\n",
    "snippet": "// async/await\ntry {\n  const data = await rDSData.send(batchExecuteStatementCommand);\n  // do something\n} catch (error) {\n  // error handling\n}\n"
   },
   {
    "description": "In addition to using promises, there are 2 other ways to send a request:\n",
    "snippet": "// callback\nrDSData.send(batchExecuteStatementCommand, (err, data) => {\n  //do something\n});\n"
   },
   {
    "description": "The SDK can also send requests using the simplified callback style from version 2 of the SDK.\n",
    "snippet": "import * as AWS from \"@aws-sdk/client-rds-data-browser\";\nconst rDSData = new AWS.RDSData({ region: \"region\" });\nrDSData.batchExecuteStatement(params, (err, data) => {\n  //do something\n});\n"
   },
   {
    "description": "### Troubleshooting\nWhen the service returns an exception, the error will include the exception information, as well as response metadata (e.g. request id).\n",
    "snippet": "try {\n  const data = await rDSData.send(batchExecuteStatementCommand);\n  // do something\n} catch (error) {\n  const metadata = error.$metadata;\n  console.log(\n    `requestId: ${metadata.requestId}\ncfId: ${metadata.cfId}\nextendedRequestId: ${metadata.extendedRequestId}`\n  );\n  /*\nThe keys within exceptions are also parsed. You can access them by specifying exception names:\n    if(error.name === 'SomeServiceException') {\n        const value = error.specialKeyInException;\n    }\n*/\n}\n"
   }
  ]
 },
 {
  "package": "@axiomzen/cz-adaptor",
  "snippets": []
 },
 {
  "package": "@b-flower/bdm-mrocs-packager",
  "snippets": []
 },
 {
  "package": "@bitmade/dev-tools",
  "snippets": []
 },
 {
  "package": "@blueeast/react-native-web-maps",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import MapView from 'react-native-maps';\n"
   }
  ]
 },
 {
  "package": "@bouzuya/create-version-module",
  "snippets": []
 },
 {
  "package": "@bs1180/eve",
  "snippets": []
 },
 {
  "package": "@cassette/player",
  "snippets": []
 },
 {
  "package": "@chesszebra/zx-pagination",
  "snippets": []
 },
 {
  "package": "@cimpresscloud/ecs-publish",
  "snippets": []
 },
 {
  "package": "@cw-types/bluebird",
  "snippets": []
 },
 {
  "package": "@daas/model",
  "snippets": []
 },
 {
  "package": "@darklight721/reactstrap",
  "snippets": []
 },
 {
  "package": "@donotjs/donot-transform-rollup",
  "snippets": []
 },
 {
  "package": "@dvo/raven",
  "snippets": []
 },
 {
  "package": "@edpaget/kongfig",
  "snippets": []
 },
 {
  "package": "@egjs/jquery-transform",
  "snippets": []
 },
 {
  "package": "@enounca/socket.io",
  "snippets": [
   {
    "description": "## How to use\nThe following example attaches socket.io to a plain Node.JS\nHTTP server listening on port `3000`.\n",
    "snippet": "var server = require('http').createServer();\nvar io = require('socket.io')(server);\nio.on('connection', function(socket){\n  socket.on('event', function(data){});\n  socket.on('disconnect', function(){});\n});\nserver.listen(3000);\n"
   },
   {
    "description": "### Standalone\n",
    "snippet": "var io = require('socket.io')();\nio.on('connection', function(socket){});\nio.listen(3000);\n"
   },
   {
    "description": "### In conjunction with Express\nStarting with **3.0**, express applications have become request handler\nfunctions that you pass to `http` or `http` `Server` instances. You need\nto pass the `Server` to `socket.io`, and not the express application\nfunction.\n",
    "snippet": "var app = require('express')();\nvar server = require('http').createServer(app);\nvar io = require('socket.io')(server);\nio.on('connection', function(){ /* … */ });\nserver.listen(3000);\n"
   },
   {
    "description": "### In conjunction with Koa\nLike Express.JS, Koa works by exposing an application as a request\nhandler function, but only by calling the `callback` method.\n",
    "snippet": "var app = require('koa')();\nvar server = require('http').createServer(app.callback());\nvar io = require('socket.io')(server);\nio.on('connection', function(){ /* … */ });\nserver.listen(3000);\n"
   }
  ]
 },
 {
  "package": "@femessage/upload-to-ali",
  "snippets": [
   {
    "description": "### vue-cli3\nvue-cli3 offers an easy solution to replace [process.env](https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F), but it requires a pattern(VUE*APP*\\*) to inject in client side. So we need to use `dotenv-webpack`'s solution.\n",
    "snippet": "// vue.config.js\nconst Dotenv = require('dotenv-webpack')\nmodule.exports = {\n  configureWebpack: {\n    plugins: [new Dotenv()]\n  }\n}\n"
   }
  ]
 },
 {
  "package": "@flamelink/sdk-users-cf",
  "snippets": []
 },
 {
  "package": "@flykode/simplejs-format",
  "snippets": [
   {
    "description": "# simplejsformat\nA simple JS Format Package for Study purposes\n#Example\n",
    "snippet": "'use strict';\n\nconst sjsformat = require('@flykode/simplejs-format');\n\nlet currency001 = new sjsformat.FkNumbers();\n\nconsole.log(currency001.currencyFormat(1000));\n"
   }
  ]
 },
 {
  "package": "@gajus/babel-plugin-graphql-tag",
  "snippets": []
 },
 {
  "package": "@gngt/core",
  "snippets": []
 },
 {
  "package": "@gormed/chromeless",
  "snippets": [
   {
    "description": "## Usage\nUsing Chromeless is similar to other browser automation tools. For example:\n",
    "snippet": "const { Chromeless } = require('chromeless')\n\nasync function run() {\n  const chromeless = new Chromeless()\n\n  const screenshot = await chromeless\n    .goto('https://www.google.com')\n    .type('chromeless', 'input[name=\"q\"]')\n    .press(13)\n    .wait('#resultStats')\n    .screenshot()\n\n  console.log(screenshot) // prints local file path or S3 url\n\n  await chromeless.end()\n}\n\nrun().catch(console.error.bind(console))\n"
   },
   {
    "description": "### Proxy Usage\nFollow the setup instructions [here](serverless#installation).\nThen using Chromeless with the Proxy service is the same as running it locally with the exception of the `remote` option.\nAlternatively you can configure the Proxy service's endpoint with environment variables. [Here's how](serverless#using-the-proxy).\n",
    "snippet": "const chromeless = new Chromeless({\n  remote: {\n    endpointUrl: 'https://XXXXXXXXXX.execute-api.eu-west-1.amazonaws.com/dev',\n    apiKey: 'your-api-key-here',\n  },\n})\n"
   }
  ]
 },
 {
  "package": "@helios-interactive/garuda-js",
  "snippets": []
 },
 {
  "package": "@hydrofoil/hydrofoil-paper-shell",
  "snippets": []
 },
 {
  "package": "@infinitecsolutions/semantic-ui-less-module-loader",
  "snippets": [
   {
    "description": "### Configuration\nAdd to your root js component:\n",
    "snippet": "import 'semantic-ui-less/definitions/globals/reset.less';\nimport 'semantic-ui-less/definitions/globals/site.less';\n"
   }
  ]
 },
 {
  "package": "@inlight/react-native",
  "snippets": []
 },
 {
  "package": "@ionic-native-mocks/image-resizer",
  "snippets": []
 },
 {
  "package": "@ironfly/lru-diskcache",
  "snippets": [
   {
    "description": "# lru-diskcache\r\n\r\nModified from GitbookIO lru-diskcache to fix npm audit issues. Test coverage is low on this, recommend using the original lru-diskcache.\r\n\r\n[![Build Status](https://travis-ci.org/GitbookIO/lru-diskcache.svg?branch=master)](https://travis-ci.org/GitbookIO/lru-diskcache)\r\n\r\nA disk cache object that deletes the least-recently-used items. Based on [lru-cache](https://github.com/isaacs/node-lru-cache).\r\n\r\n### Usage\r\n\r\n",
    "snippet": "var LRU = require(\"lru-diskcache\")\r\n\r\nvar cache = LRU('./cache', {\r\n    max: 50\r\n});\r\n\r\ncache.init()\r\n\r\ncache.set(\"myfile.md\", \"A string content\")\r\ncache.get(\"file\").then(function() { ... }) // Buffer(\"A string content\")\r\n\r\n// with a buffer or stream\r\ncache.set(\"image.png\", new Buffer([ ... ]))\r\ncache.set(\"index.html\", request.get(\"https://www.google.fr\"))\r\n\r\ncache.reset()    // empty the cache\r\n"
   },
   {
    "description": "\r\nIf you put more stuff in it, then items will fall out.\r\n\r\nIf you try to put an oversized thing in it, then it'll fall out right away.\r\n\r\n### API\r\n\r\n",
    "snippet": "// Initialize the cache\r\ncache.init()\r\n\r\n// Get content as a buffer (return a promise)\r\ncache.get(key)\r\n\r\n// Get content as a string\r\ncache.get(key, { encoding: 'utf8' })\r\n\r\n// Get content as a stream (return a promise)\r\ncache.getStream(key)\r\n\r\n// Check if a key is in the cache, without updating the recent-ness or deleting it for being stale.\r\ncache.has(key)\r\n\r\n// Delete a key from the cache\r\ncache.del(key)\r\n\r\n// Return total length of objects in cache taking into account\r\ncache.size()\r\n\r\n// Manually iterates over the entire cache proactively pruning old entries\r\ncache.prune()\r\n"
   }
  ]
 },
 {
  "package": "@jamestalmage/babel-template",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import template from 'babel-template';\nimport generate from 'babel-generator';\nimport * as t from 'babel-types';\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier('myModule'),\n  SOURCE: t.stringLiteral('my-module')\n});\n\nconsole.log(generate(ast).code);\n"
   },
   {
    "description": "## Usage\n",
    "snippet": "var myModule = require('my-module');\n"
   }
  ]
 },
 {
  "package": "@jasonhk/eslint-config-types",
  "snippets": []
 },
 {
  "package": "@jrapp/server-base",
  "snippets": []
 },
 {
  "package": "@kingjs/linq.average",
  "snippets": [
   {
    "description": "## Usage\r\nCompute the average of `[-2, 0, 2]` like this:\r\n",
    "snippet": "var average = require('@kingjs/linq.average');\r\nvar sequence = require('@kingjs/enumerable.create');\r\n\r\naverage.call(sequence(-2, 0, 2));\r\n"
   }
  ]
 },
 {
  "package": "@lion/option",
  "snippets": [
   {
    "description": "## How to use\n### Installation\n",
    "snippet": "import '@lion/option/lion-option.js';\n"
   }
  ]
 },
 {
  "package": "@lugia/math",
  "snippets": []
 },
 {
  "package": "@madbean/server",
  "snippets": []
 },
 {
  "package": "@mapbox/github-release-tools",
  "snippets": []
 },
 {
  "package": "@meifacil/react-native-pdf-view",
  "snippets": [
   {
    "description": "\r\n\r\n### Example\r\n\r\n",
    "snippet": "'use strict';\r\n\r\nimport React,{\r\n    Component\r\n} from 'react';\r\n\r\nimport {\r\n    StyleSheet,\r\n    View\r\n} from 'react-native';\r\n\r\nimport PDFView from 'react-native-pdf-view';\r\n\r\nexport default class PDF extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n      <PDFView ref={(pdf)=>{this.pdfView = pdf;}}\r\n                         src={\"sdcard/pdffile.pdf\"}\r\n                         onLoadComplete = {(pageCount)=>{\r\n                            this.pdfView.setNativeProps({\r\n                                zoom: 1.5\r\n                            });\r\n                         }}\r\n                         style={styles.pdf}/>\r\n    }\r\n}\r\nvar styles = StyleSheet.create({\r\n    pdf: {\r\n        flex:1\r\n    }\r\n});\r\n"
   }
  ]
 },
 {
  "package": "@meniga/config",
  "snippets": [
   {
    "description": "### globalConfig\r\n> *globalConfig* is a wrapper for Config.get, and can be used like this:\r\n\r\n\r\nExample:\r\n\r\n",
    "snippet": "import { globalConfig } from '@meniga/config'\r\n\r\nconst _configItemsPerPage = globalConfig('transactions.itemsPerPage', 50)\r\n"
   },
   {
    "description": "### getBooleanConfigValue\r\n> *getBooleanConfigValue* makes sure that the value you get from the config is a boolean (e.g. if the config file itself has a string value 'true' you will get back a Boolean(true)). Example:\r\n\r\n",
    "snippet": "import { getBooleanConfigValue } from '@meniga/config'\r\n\r\nconst _configShowCurrentMonthInChart = getBooleanConfigValue('transactions.showCurrentMonthInChart', false)\r\n"
   },
   {
    "description": "### getIntConfigValue\r\n> *getIntConfigValue* makes sure that the value you get from the config is an integer (e.g. if the config file itself has a string value '10' you will get a Number(10) back). Example:\r\n\r\n",
    "snippet": "import { getIntConfigValue } from '@meniga/config'\r\n\r\nconst _configUndoCategoryChangeTimeout = getIntConfigValue('transactions.undoCategoryChangeTimeout', 3000)\r\n"
   }
  ]
 },
 {
  "package": "@mit-cave/core",
  "snippets": []
 },
 {
  "package": "@mogul/mogul-scripts",
  "snippets": []
 },
 {
  "package": "@mu-ui/mu-dialog",
  "snippets": [
   {
    "description": "### Usage\n",
    "snippet": "// plugin\nimport Dialog from '@mu-ui/mu-dialog'\n\nVue.use(Dialog)\n\nthis.$dialog({\n  title: 'Title',\n  message: 'Message...',\n  opacity: 0.5,\n  single: true,\n  highlight: '#fd0',\n  btns: ['No', 'Yes'],\n  confirm() {\n    console.log('click confirm btn')\n  },\n  cancel() {\n    console.log('click cancel btn')\n  }\n})\n\nor\n\n// component\nimport Dialog from '@mu-ui/mu-dialog'\n\nVue.component('mu-dialog', Dialog.Dialog)\n\n// use v-model to control whether or not visible\n<mu-dialog v-model=\"show\" @confirm=\"confirm\" @cancel=\"cancel\">\n  <div class=\"dialog-main\">\n    <p>1</p>\n    <p>2</p>\n    <p>3</p>\n  </div>\n</mu-dialog>\n"
   }
  ]
 },
 {
  "package": "@neon-exchange/nash-protocol-mobile",
  "snippets": []
 },
 {
  "package": "@neutrium/thermo.eos.iapws97",
  "snippets": []
 },
 {
  "package": "@ngard/tiny-chunk",
  "snippets": [
   {
    "description": "# tiny-chunk\n[![source](https://badgen.net/npm/v/@ngard/tiny-chunk)](https://www.npmjs.com/package/@ngard/tiny-chunk)\n[![bundle size](https://badgen.net/bundlephobia/minzip/@ngard/tiny-chunk)](https://bundlephobia.com/result?p=@ngard/tiny-chunk)\n[![build status](https://badgen.net/travis/NickGard/tiny-chunk)](https://travis-ci.org/NickGard/tiny-chunk)\n[![license](https://badgen.net/badge/license/MIT/blue)](https://badgen.net/badge/license/MIT/blue)\nA minimal-weight utility similar to `lodash.chunk`. For when every byte counts!\nThe only difference is that `tiny-chunk` has a minimum chunk size of `1` instead of `0`.\n<hr/>\nlodash.chunk [![bundle size](https://badgen.net/bundlephobia/minzip/lodash.chunk)](https://bundlephobia.com/result?p=lodash.chunk)\n<br/>\ntiny-chunk [![bundle size](https://badgen.net/bundlephobia/minzip/@ngard/tiny-chunk)](https://bundlephobia.com/result?p=@ngard/tiny-chunk)\n<hr/>\n## Syntax\n",
    "snippet": "chunk(/* array [, chunkSize] */)\n"
   },
   {
    "description": "## Return\nAn array of elements split into groups the length of `chunkSize`. If the array can't be split evenly, the final chunk will be the remaining elements.\n## Example\n",
    "snippet": "import { chunk } from '@ngard/tiny-chunk';\n\nconst value = chunk([1, 2, 3, 4, 5], 2);\n// value is [[1, 2], [3, 4], [5]]\n"
   }
  ]
 },
 {
  "package": "@nio/zenith-server",
  "snippets": []
 },
 {
  "package": "@nlabs/arkhamjs-example-react",
  "snippets": [
   {
    "description": "All `.css` imports will be run through postcss and cssnext, extracted and compiled during builds. CSS features included are nested classes and SASS-like variables. Styles must be imported either directly within the js file or via another stylesheet which has already been imported.\n",
    "snippet": "// JS\nimport `./component.css`;\n"
   }
  ]
 },
 {
  "package": "@oliverwoodings/react-pyramid",
  "snippets": []
 },
 {
  "package": "@open-age/send-it-client",
  "snippets": []
 },
 {
  "package": "@openfonts/carrois-gothic-sc_latin",
  "snippets": [
   {
    "description": "## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n",
    "snippet": "// Load Carrois Gothic SC typeface\nrequire('@openfonts/carrois-gothic-sc_latin')\n"
   }
  ]
 },
 {
  "package": "@opentelemetry/tracing",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "const opentelemetry = require('@opentelemetry/api');\nconst { BasicTracerProvider } = require('@opentelemetry/tracing');\n\n// To start a trace, you first need to initialize the Tracer provider.\n// NOTE: The default OpenTelemetry tracer provider does not record any tracing information.\n//       Registering a working tracer provider allows the API methods to record traces.\nnew BasicTracerProvider().register();\n\n// To create a span in a trace, we used the global singleton tracer to start a new span.\nconst span = opentelemetry.trace.getTracer('default').startSpan('foo');\n\n// Set a span attribute\nspan.setAttribute('key', 'value');\n\n// We must end the spans so they become available for exporting.\nspan.end();\n"
   }
  ]
 },
 {
  "package": "@ornikar/rollup-plugin-postcss",
  "snippets": [
   {
    "description": "## Usage\nYou are viewing the docs for `v2.0` which only support Rollup 1.0 or above.\n",
    "snippet": "// rollup.config.js\nimport postcss from 'rollup-plugin-postcss'\n\nexport default {\n  plugins: [\n    postcss({\n      plugins: []\n    })\n  ]\n}\n"
   },
   {
    "description": "Then you can use CSS files:\n",
    "snippet": "import './style.css'\n"
   },
   {
    "description": "Note that the generated CSS will be injected to `<head>` by default, and the CSS string is also available as default export unless `extract: true`:\n",
    "snippet": "// Inject to `<head>` and also available as `style`\nimport style from './style.css'\n"
   },
   {
    "description": "It will also automatically use local PostCSS config files.\n### Extract CSS\n",
    "snippet": "postcss({\n  extract: true\n})\n"
   },
   {
    "description": "### CSS modules\n",
    "snippet": "postcss({\n  modules: true,\n  // Or with custom options for `postcss-modules`\n  modules: {}\n})\n"
   },
   {
    "description": "### namedExports\nType: `boolean` `function`<br>\nDefault: `false`\nUse named exports alongside default export.\nYou can supply a function to control how exported named is generated:\n",
    "snippet": "namedExports(name) {\n  // Maybe you simply want to convert dash to underscore\n  return name.replace(/-/g, '_')\n}\n"
   },
   {
    "description": "The original will not be removed, it's still available on `default` export:\n",
    "snippet": "import style, { class$_$name, class$__$name, $switch$ } from './style.css'\nconsole.log(style['class-name'] === class$_$name) // true\nconsole.log(style['class--name'] === class$__$name) // true\nconsole.log(style['switch'] === $switch$) // true\n"
   },
   {
    "description": "#### config.ctx\nType: `object`\n[`ctx`](https://github.com/michael-ciniawsky/postcss-load-config#context) argument for PostCSS config file.\nNote: Every keys you pass to `config.ctx` will be available under `options` inside\nthe postcss config.\n",
    "snippet": "// rollup.config.js\npostcss({\n  config: {\n    ctx: {\n      foo: 'bar'\n    }\n  }\n})\n\n// postcss.config.js\nmodule.exports = context => {\n  console.log(context.options.foo) // 'bar'\n\n  return {}\n}\n"
   },
   {
    "description": "### loaders\nType: `Loader[]`\nAn array of custom loaders, check out our [sass-loader](./src/sass-loader.js) as example.\n",
    "snippet": "interface Loader {\n  name: string,\n  test: RegExp,\n  process: (this: Context, input: Payload) => Promise<Payload> | Payload\n}\n\ninterface Context {\n  /** Loader options */\n  options: any\n  /** Sourcemap */\n  sourceMap: any\n  /** Resource path */\n  id: string\n  /** Files to watch */\n  dependencies: Set<string>\n  /** Emit a waring */\n  warn: PluginContext.warn\n  /** https://rollupjs.org/guide/en#plugin-context */\n  plugin: PluginContext\n}\n\ninterface Payload {\n  /** File content */\n  code: string\n  /** Sourcemap */\n  map?: string | SourceMap\n}\n"
   }
  ]
 },
 {
  "package": "@react-ui-generator/serializers",
  "snippets": []
 },
 {
  "package": "@regexp-extra/flags",
  "snippets": [
   {
    "description": "Get [flags] of [RegExp], like `gi`.\r\n\r\n",
    "snippet": "const flags = require('@regexp-extra/flags');\r\n// -> flags\r\n\r\n\r\nflags(/EATME/g);\r\n// g\r\n\r\nflags(/DRINKME/im);\r\n// im\r\n"
   }
  ]
 },
 {
  "package": "@roocky/vue-shudan",
  "snippets": [
   {
    "description": "加载后直接调用即可：\n",
    "snippet": "import Goban from '@roocky/vue-shudan';\n"
   }
  ]
 },
 {
  "package": "@sbruton/bunyan-logstash",
  "snippets": []
 },
 {
  "package": "@seagull/ui",
  "snippets": []
 },
 {
  "package": "@sooran-common/sooran-stack",
  "snippets": []
 },
 {
  "package": "@soundstep/infuse",
  "snippets": [
   {
    "description": "## create injector\n",
    "snippet": "var injector = new infuse.Injector();\n"
   },
   {
    "description": "## create injector with node.js\n",
    "snippet": "var infuse = require('@soundstep/infuse');\nvar injector = new infuse.Injector();\n"
   },
   {
    "description": "## map value\n",
    "snippet": "injector.mapValue(\"name\", \"John\");\n"
   },
   {
    "description": "## remove mapping\n",
    "snippet": "injector.removeMapping(\"name\");\n"
   },
   {
    "description": "## test mapping\n",
    "snippet": "injector.hasMapping(\"name\");\n"
   },
   {
    "description": "## inject value\n",
    "snippet": "injector.inject(john);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function() {\n\tthis.name = null;\n}\n// instantiate Person class\nvar john = new Person();\n// inject values in the Person instance\ninjector.inject(john);\nalert(john.name); // will alert John\n"
   },
   {
    "description": "or\n",
    "snippet": "var john = injector.createInstance(Person);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function() {\n\tthis.name = null;\n}\n// instantiate Person class and inject values\nvar john = injector.createInstance(Person);\nalert(john.name); // will alert John\n"
   },
   {
    "description": "Full example with constructor:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// create person class\nvar Person = function(name) {\n\tthis.nameParam = name;\n}\n// instantiate Person class and inject values from the constructor\nvar john = injector.createInstance(Person);\nalert(john.nameParam); // will alert John\n"
   },
   {
    "description": "## specified inject value (minification)\nIt is also possible to specify the injected value using a static variable \"inject\", which would describe the arguments that should be sent into the instance.\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the name property\ninjector.mapValue(\"name\", \"John\");\n// person class\nvar Person = function(specifiedName) {\n\tthis.specifiedName = specifiedName;\n}\n// specify injected arguments\nPerson.inject = [\"name\"];\n// instantiate Person class and inject values from the constructor\nvar john = injector.createInstance(Person);\nalert(john.specifiedName); // will alert John\n"
   },
   {
    "description": "A strict mode can be enabled, the injector will throw an error if the \"inject\" property is missing when trying to instantiate a function.\n",
    "snippet": "var injector = new infuse.Injector();\ninjector.strictMode = true; // default is false\n"
   },
   {
    "description": "A strict mode for constructor injection only can also be specified, the injector will throw an error if the \"inject\" property is missing.  \nThe error will not be thrown if the dependencies are declared using properties (`obj.propName = null`) rather than constructor argument (`function Obj(propName) {`).  \nThis is a looser strict mode than `injector.strictMode`, which apply to both property and constructor injection.  \nthis option will be enough to mangle arguments while minifying javascript and have the dependency injection still working.\n",
    "snippet": "var injector = new infuse.Injector();\ninjector.strictModeConstructorInjection = true;  // default is false\n"
   },
   {
    "description": "## map class\n",
    "snippet": "injector.mapClass(\"model\", MyModel);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function() {\n\tthis.model = null;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.model); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.model); // contains another MyModel instance\n"
   },
   {
    "description": "Full example with constructor:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function(model) {\n\tthis.modelParam = model;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.modelParam); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.modelParam); // contains another MyModel instance\n"
   },
   {
    "description": "## map class as singleton\n",
    "snippet": "injector.mapClass(\"model\", MyModel, true);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function() {\n\tthis.model = null;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.model); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.model); // contains the same model instance as other1\nalert(other1.model === other2.model); // alert true\n"
   },
   {
    "description": "Full example with constructor:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// create class that will receive an instance of MyModel class\nvar OtherClass = function(model) {\n\tthis.modelParam = model;\n}\n// instantiate Person class and inject values\nvar other1 = injector.createInstance(OtherClass);\nalert(other1.modelParam); // contains a MyModel instance\nvar other2 = injector.createInstance(OtherClass);\nalert(other2.modelParam); // contains the same model instance as other1\nalert(other1.modelParam === other2.modelParam); // alert true\n"
   },
   {
    "description": "## get instance with mapping name\n",
    "snippet": "injector.mapClass(\"model\", MyModel);\nvar model = injector.getValue(\"model\");\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// get instance created\nvar model1 = injector.getValue(\"model\");\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValue(\"model\");\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert false\n"
   },
   {
    "description": "## get instance with mapping name as singleton\n",
    "snippet": "injector.mapClass(\"model\", MyModel, true);\nvar model = injector.getValue(\"model\");\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// get instance created\nvar model1 = injector.getValue(\"model\");\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValue(\"model\");\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert true\n"
   },
   {
    "description": "## get instance with class\n",
    "snippet": "injector.mapClass(\"model\", MyModel);\nvar model = injector.getValueFromClass(MyModel);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel);\n// get instance created\nvar model1 = injector.getValueFromClass(MyModel);\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValueFromClass(MyModel);\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert false\n"
   },
   {
    "description": "## get instance with class as singleton\n",
    "snippet": "injector.mapClass(\"model\", MyModel, true);\nvar model = injector.getValueFromClass(MyModel);\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// create model class\nvar MyModel = function() {\n\tthis.data = \"data\";\n}\n// map class to the model property\ninjector.mapClass(\"model\", MyModel, true);\n// get instance created\nvar model1 = injector.getValueFromClass(MyModel);\nalert(model1); // contains a MyModel instance\nvar model2 = injector.getValueFromClass(MyModel);\nalert(model2); // contains another MyModel instance\nalert(model1 === model2); // alert true\n"
   },
   {
    "description": "## create child injector (inherit the mapping from the parent injector)\n",
    "snippet": "var child = injector.createChild();\n"
   },
   {
    "description": "Full example:\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the name property on the parent injector\ninjector.mapValue(\"name\", \"John\");\n// create child injector\nvar child = injector.createChild();\n// map value to the type property on the child injector\nchild.mapValue(\"type\", \"male\");\n// create class that will receive the name and type value\nvar FooClass = function() {\n\tthis.name = null;\n\tthis.type = null;\n}\n// instance the class with the child injector\nvar fooChild = child.createInstance(FooClass);\nalert(fooChild.name); // will alert \"John\"\nalert(fooChild.type); // will alert \"male\"\nvar fooParent = injector.createInstance(FooClass);\nalert(fooParent.name); // will alert \"John\"\nalert(fooParent.type); // will alert null\n"
   },
   {
    "description": "## getValue vs createInstance\nThe method createInstance will always return a new instance.\nThe method getValue needs to have a mapping registered and might return the same instance depending if the class has been mapped as singleton.\n",
    "snippet": "// return a new instance every time\nvar instance1 = injector.createInstance(MyClass);\nvar instance2 = injector.createInstance(MyClass);\nvar instance3 = injector.createInstance(MyClass);\n\n// return a new instance every time\ninjector.mapClass(\"name\", MyClass);\nvar instance1 = injector.getValue(\"name\");\nvar instance2 = injector.getValue(\"name\");\nvar instance3 = injector.getValue(\"name\");\n\n// return a new instance every time\ninjector.mapClass(\"name\", MyClass);\nvar instance1 = injector.getValueFromClass(MyClass);\nvar instance2 = injector.getValueFromClass(MyClass);\nvar instance3 = injector.getValueFromClass(MyClass);\n\n// return the same instance every time\ninjector.mapClass(\"name\", MyClass, true); // mapped as singleton\nvar instance1 = injector.getValue(\"name\");\nvar instance2 = injector.getValue(\"name\");\nvar instance3 = injector.getValue(\"name\");\n\n// return the same instance every time\ninjector.mapClass(\"name\", MyClass, true); // mapped as singleton\nvar instance1 = injector.getValueFromClass(MyClass);\nvar instance2 = injector.getValueFromClass(MyClass);\nvar instance3 = injector.getValueFromClass(MyClass);\n"
   },
   {
    "description": "## post construct\nA post construct method can be added, it will be automatically called once the injection is done.\n",
    "snippet": "// create injector\nvar injector = new infuse.Injector();\n// map value to the data property\ninjector.mapValue(\"data\", \"some data\");\n// create model class\nvar MyModel = function() {\n\tthis.data = null;\n}\nMyModel.prototype = {\n\tpostConstruct: function() {\n\t\t// called after injection\n\t\t// this.data is injected\n\t\talert(this.data);\n\t}\n}\ninjector.createInstance(MyModel);\n"
   }
  ]
 },
 {
  "package": "@stackstorm/browserify-postcss",
  "snippets": [
   {
    "description": "## Example\nThe build script:\n",
    "snippet": "var browserify = require('browserify')\nvar fs = require('fs')\n\nvar b = browserify(__dirname + '/src/entry.js')\nb.transform('browserify-postcss', {\n  // a list of postcss plugins\n  plugin: [\n    'postcss-import',\n    'postcss-advanced-variables',\n    ['postcss-custom-url', [\n      ['inline', { maxSize: 10 }],\n      ['copy', {\n        assetOutFolder: __dirname + '/static/assets',\n        baseUrl: 'assets',\n        name: '[name].[hash]',\n      }],\n    ]],\n  ],\n  // basedir where to search plugins\n  basedir: __dirname + '/src',\n  // insert a style element to apply the styles\n  inject: true,\n})\nb.bundle().pipe(\n  fs.createWriteStream(to)\n)\n\n"
   },
   {
    "description": "entry.js:\n",
    "snippet": "require('./entry.css')\n\nconsole.log('styles from entry.css are applied')\n\n"
   }
  ]
 },
 {
  "package": "@theia/cortex-debug",
  "snippets": []
 },
 {
  "package": "@themost/node",
  "snippets": []
 },
 {
  "package": "@twilroad/bootstrapper",
  "snippets": []
 },
 {
  "package": "@types/poly2tri",
  "snippets": []
 },
 {
  "package": "@uhhhh2/web3x",
  "snippets": []
 },
 {
  "package": "@vacom/logbook",
  "snippets": [
   {
    "description": "### How to import\nAfter installing the dependency, just import the components you need\n",
    "snippet": "import Log from \"@vacom/logbook\";\n"
   }
  ]
 },
 {
  "package": "@webpack-utilities/test",
  "snippets": []
 },
 {
  "package": "@xpertsea/vaadin-grid",
  "snippets": [
   {
    "description": "Once installed, import it in your application:\n",
    "snippet": "import '@vaadin/vaadin-grid/vaadin-grid.js';\n"
   }
  ]
 },
 {
  "package": "a2-file-drop",
  "snippets": []
 },
 {
  "package": "ac-rev-hash",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "var fs = require('fs');\nvar revHash = require('ac-rev-hash');\nvar buffer = fs.readFileSync('unicorn.png');\n\nrevHash(buffer);\n//=> 'bb9d8fe615bb9d8fe615'\n"
   }
  ]
 },
 {
  "package": "aez.wasm",
  "snippets": [
   {
    "description": "## How to use\nNode.js:\n",
    "snippet": "var aez = require('aez.wasm')\n\naez.ready(function () {\n    var plaintext            = Buffer.from('37c8f1a1c981c04263769feb059be120', 'hex');\n    var ad                   = Buffer.from('38e7de89bfabf8b4064118449633e2adb942c22b63c9c0971d19d6845dedd9a0', 'hex');\n    var nonce                = Buffer.from('54d3b0f09e55592d449c5117', 'hex');\n    var key                  = Buffer.from('ead50aed64ee3bd8925b7fbbbe619cdf803cbcf386fccce48ea6b921c36efdb821e47fe3fbdf1a0a90e36d29467797ea', 'hex');\n    var ciphertext_expansion = 16;\n    var ciphertext = aez.encrypt(plaintext, ad, nonce, key, ciphertext_expansion);\n    console.log(ciphertext);\n    var plaintext_decrypted = aez.decrypt(ciphertext, ad, nonce, key, ciphertext_expansion);\n    console.log(plaintext_decrypted);\n});\n"
   },
   {
    "description": "Browser:\n",
    "snippet": "requirejs(['aez.wasm'], function (aez) {\n    aez.ready(function () {\n        var plaintext            = Buffer.from('37c8f1a1c981c04263769feb059be120', 'hex');\n        var ad                   = Buffer.from('38e7de89bfabf8b4064118449633e2adb942c22b63c9c0971d19d6845dedd9a0', 'hex');\n        var nonce                = Buffer.from('54d3b0f09e55592d449c5117', 'hex');\n        var key                  = Buffer.from('ead50aed64ee3bd8925b7fbbbe619cdf803cbcf386fccce48ea6b921c36efdb821e47fe3fbdf1a0a90e36d29467797ea', 'hex');\n        var ciphertext_expansion = 16;\n        var ciphertext = aez.encrypt(plaintext, ad, nonce, key, ciphertext_expansion);\n        console.log(ciphertext);\n        var plaintext_decrypted = aez.decrypt(ciphertext, ad, nonce, key, ciphertext_expansion);\n        console.log(plaintext_decrypted);\n    });\n})\n"
   }
  ]
 },
 {
  "package": "aframe-super-hot-html-loader",
  "snippets": []
 },
 {
  "package": "ajonp-video-capture",
  "snippets": []
 },
 {
  "package": "alagator",
  "snippets": [
   {
    "description": "## Example\r\n\r\nA fully backwards compatible version of [@substack](https://github.com/substack)'s [mkdirp](https://github.com/substack/node-mkdirp/blob/master/index.js) but without writing the algorithm out twice:\r\n\r\n",
    "snippet": "var path = require('path')\r\nvar fs = require('fs')\r\n\r\nvar Promise = require('promise')\r\nvar alagator = require('alagator')\r\n\r\nmodule.exports = mkdirpFactory(true, Promise.denodeify(fs.mkdir), Promise.denodeify(fs.stat))\r\nmodule.exports.sync = mkdirpFactory(false, fs.mkdirSync, fs.statSync)\r\n\r\nmodule.exports.mkdirp = module.exports.mkdirP = module.exports\r\n\r\nfunction mkdirpFactory(async, mkdir, stat) {\r\n  var rec = alagator(function *(p, mode, made) {\r\n    if (mode === undefined) {\r\n      mode = 0777 & (~process.umask());\r\n    }\r\n    if (!made) made = null;\r\n\r\n    if (typeof mode === 'string') mode = parseInt(mode, 8);\r\n    p = path.resolve(p);\r\n\r\n    try {\r\n      yield mkdir(p, mode);\r\n      made = made || p;\r\n    }\r\n    catch (err0) {\r\n      switch (err0.code) {\r\n        case 'ENOENT' :\r\n          made = yield rec(path.dirname(p), mode, made);\r\n          yield rec(p, mode, made);\r\n          break;\r\n\r\n        // In the case of any other error, just see if there's a dir\r\n        // there already.  If so, then hooray!  If not, then something\r\n        // is borked.\r\n        default:\r\n          var stat;\r\n          try {\r\n              stat = yield stat(p);\r\n          }\r\n          catch (err1) {\r\n              throw err0;\r\n          }\r\n          if (!stat.isDirectory()) throw err0;\r\n          break;\r\n      }\r\n    }\r\n\r\n    return made;\r\n  }, async)\r\n  return rec\r\n}\r\n"
   },
   {
    "description": "### alagator(generatorFunction, isAsync)\r\n\r\nisAsync defaults to `true`.\r\n\r\nThe `alagator` method takes a generator function, and then either `true` (for async) or `false` (for sync).  If `false` is passed, it makes `yield` act as a pass through, so the method runs fully synchronously.  If `true` is passed, it makes `yield` await the resolution of a promise (or array of promises) so that the function becomes async (it also uses `Promise.nodeify` to support both callback and promise based use).  The above mkdirp example could be used in any of the following 3 ways:\r\n\r\n",
    "snippet": "var mkdirp = require('mkdirp')\r\n\r\nmkdirp('/foo/bar', function(err) {\r\n  if (err) throw err\r\n  console.log('/foo/bar exists')\r\n})\r\n\r\n//or\r\n\r\nmkdirp('/foo/bar')\r\n  .then(function() {\r\n    console.log('/foo/bar exists')\r\n  })\r\n  .done()\r\n\r\n//or\r\n\r\nmkdirp.sync('/foo/bar')\r\nconsole.log('/foo/bar exists')\r\n"
   },
   {
    "description": "### use with other promise libraries\r\n\r\nIf you want the promise returned from async versions of your algorithms to be of a specific type (other than [promise](https://github.com/then/promise)) we've got you covered.  Simply pass a wrap function in place of `true`:\r\n\r\n",
    "snippet": "var Q = require('q')\r\n\r\nmodule.exports = mkdirpFactory(Q, Q.denodeify(fs.mkdir), Q.denodeify(fs.stat))\r\nmodule.exports.sync = mkdirpFactory(false, fs.mkdirSync, fs.statSync)\r\n"
   }
  ]
 },
 {
  "package": "am-bucker",
  "snippets": [
   {
    "description": "What is it\n==========\nBucker is a simple logging module that has everything you need to make your logs sane, readable, and useful.\nUsage\n=====\n",
    "snippet": "var logger = require('bucker').createLogger(opts, module);\n\nlogger.info('informational message');\nlogger.debug('debug message');\nlogger.warn('warning');\nlogger.error('error');\nlogger.log('also works for informational messsages');\nlogger.module('something_else').info('and you can override the module name temporarily if you want');\nlogger.tags(['showing', 'off']).info('and we also support tags now');\n"
   },
   {
    "description": "Where opts is an optional object containing your configuration options, and the module reference is optionally used for namespacing your logs and can be omitted.\nLog levels available are, debug, info, warn, and error. When specifying a level in your initial options, items will only be logged if they are equal to or above the level chosen. For example, if options contains a level of 'info', debug messages will be ignored while info, warn, and error level messages will be logged.\nMessages are passed through [util.format](http://nodejs.org/api/util.html#util_util_format_format) so can be more than simple strings, and work very similar to console.log.\nIncluded in the logger is a middleware for connect/express that writes access logs, to use it simply add it to your middleware stack\n",
    "snippet": "app.use(logger.middleware());\n"
   },
   {
    "description": "In addition to the connect middleware, bucker also exports a Hapi plugin. To use it, simply load it into your plugins\n",
    "snippet": "pack.require('bucker', { .. opts .. }, function (err) {\n  if (err) console.error('failed loading bucker plugin');\n});\n"
   }
  ]
 },
 {
  "package": "ambsa-kit",
  "snippets": []
 },
 {
  "package": "angular-kit",
  "snippets": []
 },
 {
  "package": "angular-model-factory",
  "snippets": []
 },
 {
  "package": "angular-typed-storage",
  "snippets": []
 },
 {
  "package": "anysols-model",
  "snippets": [
   {
    "description": "## Establishing database connection\n",
    "snippet": "const {AnysolsModel} = require('anysols-model');\n\n const anysolsModel = new AnysolsModel();\n\n    const config = {\n        \"host\": \"localhost\",\n        \"port\": \"27017\",\n        \"database\": \"anysols-model\",\n        \"dialect\": \"mongodb\",\n    };\n\n    anysolsModel.connect(config).then(() => {\n        console.log('connection success');\n        anysolsModel.databaseExists().then(() => {\n            console.log('db exists');\n            cb(anysolsModel);\n        }, () => {\n            console.log(\"db does not exists\");\n        });\n    }, (err) => {\n        console.log('connection failed');\n    });\n"
   },
   {
    "description": "## Intercepting database operations\n",
    "snippet": "// after establishing connection\n\n anysolsModel.addInterceptor(\"my-intercept\", {\n    intercept: (modelName, operation, when, records) => {\n        return new Promise((resolve, reject) => {\n            if (modelName === 'student') {\n                if (operation === 'create') {\n                    if (when === \"before\") {\n                        console.log(\"Student before\");\n                        if (!Array.isArray(records)) {\n                            let record = records;\n                            record.set(\"computed\",  record.get(\"name\") + \" +++ computed\");\n                        }\n                    } else if (when === \"after\")\n                        console.log(\"Student after\");\n                }\n            }\n            resolve(records);\n        });\n    }\n});\n\nanysolsModel.defineModel({\n    name: 'student',\n    fields: [{\n        name: 'name',\n        type: 'string'\n    }, {\n        name: 'computed',\n        type: 'string'\n    }]\n});\n\nlet Student = anysolsModel.model(\"student\");\nlet s = new Student({});\ns.set(\"name\", \"John\");\ns.save().then(function () {\n    Student.find().exec().then(function (students) {\n        console.log(JSON.stringify(students, null, 4));\n    });\n});\n"
   },
   {
    "description": "## Define custom field type\n",
    "snippet": "// after establishing connection\n\n anysolsModel.registerFieldDefinition(new FieldDefinition(\"customType\", field => {\n     return true\n }, function (field, fieldDefinition) {\n     return {\n         type: MONGOOSE_TYPES.STRING\n     }\n }));\n\n anysolsModel.defineModel({\n     name: 'student',\n     fields: [{\n         name: 'name',\n         type: 'string'\n     }, {\n         name: 'dob',\n         type: 'date'\n     }, {\n         name: 'custom_field',\n         type: 'customType'\n     }]\n });\n\n let Student = anysolsModel.model(\"student\");\n let s = new Student();\n s.set(\"name\", \"John\");\n s.set(\"dob\", new Date());\n s.set(\"custom_field\", \"testing\");\n s.save().then(function () {\n     console.log(\"Student created\");\n     anysolsModel.closeConnection();\n });\n"
   }
  ]
 },
 {
  "package": "aoztest",
  "snippets": []
 },
 {
  "package": "apibee",
  "snippets": [
   {
    "description": "## Basic Usage\ncd into `your project` && `npm install apibee --save-dev`\nExample for `routes.js`\n",
    "snippet": "'use strict';\n\nvar bee = require('apibee');\n\nmodule.exports = function(router) {\n  var api = new bee(router)\n\n  api.group('Index', function(api) {\n    api.get('/read', function(req, res) {\n      //do stuff\n    });\n    api.post('/update', function(req, res) {\n      //do stuff  \n    })\n  }\n\n  api.group('User CRUD', function(api) {\n    api.get('/read', function(req, res) {\n      //do stuff\n    });\n    api.post('/update', function(req, res) {\n      //do stuff  \n    })\n  }\n};\n"
   }
  ]
 },
 {
  "package": "apollo-angular-link-network-status",
  "snippets": []
 },
 {
  "package": "apollo-resolvers",
  "snippets": [
   {
    "description": "Create a base resolver for last-resort error masking:\n",
    "snippet": "import { createResolver } from 'apollo-resolvers';\nimport { createError, isInstance } from 'apollo-errors';\n\nconst UnknownError = createError('UnknownError', {\n  message: 'An unknown error has occurred!  Please try again later'\n});\n\nexport const baseResolver = createResolver(\n   //incoming requests will pass through this resolver like a no-op\n  null,\n\n  /*\n    Only mask outgoing errors that aren't already apollo-errors,\n    such as ORM errors etc\n  */\n  (root, args, context, error) => isInstance(error) ? error : new UnknownError()\n);\n"
   },
   {
    "description": "Create a few child resolvers for access control:\n",
    "snippet": "import { createError } from 'apollo-errors';\n\nimport { baseResolver } from './baseResolver';\n\nconst ForbiddenError = createError('ForbiddenError', {\n  message: 'You are not allowed to do this'\n});\n\nconst AuthenticationRequiredError = createError('AuthenticationRequiredError', {\n  message: 'You must be logged in to do this'\n});\n\nexport const isAuthenticatedResolver = baseResolver.createResolver(\n  // Extract the user from context (undefined if non-existent)\n  (root, args, { user }, info) => {\n    if (!user) throw new AuthenticationRequiredError();\n  }\n);\n\nexport const isAdminResolver = isAuthenticatedResolver.createResolver(\n  // Extract the user and make sure they are an admin\n  (root, args, { user }, info) => {\n    /*\n      If thrown, this error will bubble up to baseResolver's\n      error callback (if present).  If unhandled, the error is returned to\n      the client within the `errors` array in the response.\n    */\n    if (!user.isAdmin) throw new ForbiddenError();\n\n    /*\n      Since we aren't returning anything from the\n      request resolver, the request will continue on\n      to the next child resolver or the response will\n      return undefined if no child exists.\n    */\n  }\n)\n"
   },
   {
    "description": "Create a profile update resolver for our user type:\n",
    "snippet": "import { isAuthenticatedResolver } from './acl';\nimport { createError } from 'apollo-errors';\n\nconst NotYourUserError = createError('NotYourUserError', {\n  message: 'You cannot update the profile for other users'\n});\n\nconst updateMyProfile = isAuthenticatedResolver.createResolver(\n  (root, { input }, { user, models: { UserModel } }, info) => {\n    /*\n      If thrown, this error will bubble up to isAuthenticatedResolver's error callback\n      (if present) and then to baseResolver's error callback.  If unhandled, the error\n      is returned to the client within the `errors` array in the response.\n    */\n    if (!user.isAdmin && input.id !== user.id) throw new NotYourUserError();\n    return UserModel.update(input);\n  }\n);\n\nexport default {\n  Mutation: {\n    updateMyProfile\n  }\n};\n"
   },
   {
    "description": "Create an admin resolver:\n",
    "snippet": "import { createError, isInstance } from 'apollo-errors';\nimport { isAuthenticatedResolver, isAdminResolver } from './acl';\n\nconst ExposedError = createError('ExposedError', {\n  message: 'An unknown error has occurred'\n});\n\nconst banUser = isAdminResolver.createResolver(\n  (root, { input }, { models: { UserModel } }, info) => UserModel.ban(input),\n  (root, args, context, error) => {\n    /*\n      For admin users, let's tell the user what actually broke\n      in the case of an unhandled exception\n    */\n\n    if (!isInstance(error)) throw new ExposedError({\n      // overload the message\n      message: error.message\n    });\n  }\n);\n\nexport default {\n  Mutation: {\n    banUser\n  }\n};\n"
   },
   {
    "description": "Combine your resolvers into a single definition ready for use by `graphql-tools`:\n",
    "snippet": "import { combineResolvers } from 'apollo-resolvers';\n\nimport User from './user';\nimport Admin from './admin';\n\n/*\n  This combines our multiple resolver definition\n  objects into a single definition object\n*/\nconst resolvers = combineResolvers([\n  User,\n  Admin\n]);\n\nexport default resolvers;\n"
   },
   {
    "description": "Conditional resolvers:\n",
    "snippet": "import { and, or } from 'apollo-resolvers';\n\nimport isFooResolver from './foo';\nimport isBarResolver from './bar';\n\nconst banResolver = (root, { input }, { models: { UserModel } }, info)=> UserModel.ban(input);\n\n// Will execute banResolver if either isFooResolver or isBarResolver successfully resolve\n// If none of the resolvers succeed, the error from the last conditional resolver will\n// be returned\nconst orBanResolver = or(isFooResolver, isBarResolver)(banResolver);\n\n// Will execute banResolver if both isFooResolver and isBarResolver successfully resolve\n// If one of the condition resolvers throws an error, it will stop the execution and\n// return the error\nconst andBanResolver = and(isFooResolver, isBarResolver)(banResolver);\n\n// In both cases, conditions are evaluated from left to right\n"
   },
   {
    "description": "## Resolver context\nResolvers are provided a mutable context object that is shared between all resolvers for a given request.  A common pattern with GraphQL is inject request-specific model instances into the resolver context for each request.  Models frequently reference one another, and unbinding circular references can be a pain.  `apollo-resolvers` provides a request context factory that allows you to bind context disposal to server responses, calling a `dispose` method on each model instance attached to the context to do any sort of required reference cleanup necessary to avoid memory leaks:\n",
    "snippet": "import express from 'express';\nimport bodyParser from 'body-parser';\nimport { GraphQLError } from 'graphql';\nimport { graphqlExpress } from 'apollo-server-express';\nimport { createExpressContext } from 'apollo-resolvers';\nimport { formatError as apolloFormatError, createError } from 'apollo-errors';\n\nimport { UserModel } from './models/user';\nimport schema from './schema';\n\nconst UnknownError = createError('UnknownError', {\n  message: 'An unknown error has occurred.  Please try again later'\n});\n\nconst formatError = error => {\n  let e = apolloFormatError(error);\n\n  if (e instanceof GraphQLError) {\n    e = apolloFormatError(new UnknownError({\n      data: {\n        originalMessage: e.message,\n        originalError: e.name\n      }\n    }));\n  }\n\n  return e;\n};\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.use((req, res, next) => {\n  req.user = null; // fetch the user making the request if desired\n  next();\n});\n\napp.post('/graphql', graphqlExpress((req, res) => {\n  const user = req.user;\n\n  const models = {\n    User: new UserModel(user)\n  };\n\n  const context = createExpressContext({\n    models,\n    user\n  }, res);\n\n  return {\n    schema,\n    formatError, // error formatting via apollo-errors\n    context // our resolver context\n  };\n}));\n\nexport default app;\n"
   }
  ]
 },
 {
  "package": "array-intersection",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "var intersection = require('array-intersection');\n\nintersection(['a', 'a', 'c'])\n//=> ['a', 'c']\n\nintersection(['a', 'b', 'c'], ['b', 'c', 'e'])\n//=> ['b', 'c']\n\nintersection(['a', 'b', 'c'], ['b', 'c', 'e'], ['b', 'c', 'e'])\n//=> ['b', 'c']\n"
   }
  ]
 },
 {
  "package": "at-commander",
  "snippets": []
 },
 {
  "package": "a_random_app",
  "snippets": []
 },
 {
  "package": "babel-plugin-object-entries-and-values-to-object-keys",
  "snippets": []
 },
 {
  "package": "babel-plugin-require-context-hook-babel7",
  "snippets": []
 },
 {
  "package": "babel-preset-goodway",
  "snippets": []
 },
 {
  "package": "babel-slot-fill",
  "snippets": []
 },
 {
  "package": "bac-lib",
  "snippets": []
 },
 {
  "package": "backbone.rel",
  "snippets": [
   {
    "description": "## Accesing nested relationships, the \"monadic\" `rel` getter.\nYou can pass as many arguments as you want to the `rel` getter in order to get nested relationships.\nAny failure on the getter chain will be properly propagated, avoiding `TypeError: Cannot call method 'foo' of null`.\n## Example\n",
    "snippet": "// models/project.js\nModels.Project.hasMany = function () {\n  return {\n    users: {collection: Collections.users, id: 'project_id'}\n  , tasks: {collection: Collection.tasks, filter: function (task) {\n      return task.rel('project') ? task.rel('project').id === this.id : null;\n    }}\n  };\n};\n\n// models/user.js\nModels.User.hasMany = function () {\n  return {\n    tasks: {collection: Collections.tasks, id: 'user_id'}\n  };\n};\n\nModels.User.belongsTo = function () {\n  return {\n    project: Collection.projects\n  };\n};\n\n// models/task.js\nModels.Task.belongsTo = function () {\n  return {\n    user: Collections.users\n  , project: function (task) {\n      return task.rel('user.project');\n    }\n  };\n};\n\nvar project = new Project({id: 1})\n  , user = new User({id: 1, project_id: 1})\n  , task1 = new Task({id: 1, user_id: 1})\n  , task2 = new Task({id: 2, user_id: 1});\n\nassert.equal(user.rel('tasks').length, 2);\nassert.equal(user.rel('project'), project);\nassert.equal(task1.rel('user'), user);\nassert.equal(task1.rel('project'), project);\n"
   }
  ]
 },
 {
  "package": "basscss-background-colors",
  "snippets": []
 },
 {
  "package": "benchmark.php",
  "snippets": []
 },
 {
  "package": "bennewton",
  "snippets": []
 },
 {
  "package": "binary-lazy-loading",
  "snippets": []
 },
 {
  "package": "bip-pod-pagerduty",
  "snippets": []
 },
 {
  "package": "bitcoin-merkle-tree",
  "snippets": [
   {
    "description": "# bitcoin-merkle-tree\n[![npm version](https://img.shields.io/npm/v/bitcoin-merkle-tree.svg)](https://www.npmjs.com/package/bitcoin-merkle-tree)\n[![Build Status](https://travis-ci.org/mappum/bitcoin-merkle-tree.svg?branch=master)](https://travis-ci.org/mappum/bitcoin-merkle-tree)\n[![Dependency Status](https://david-dm.org/mappum/bitcoin-merkle-tree.svg)](https://david-dm.org/mappum/bitcoin-merkle-tree)\n**Verify Bitcoin Merkle trees**\nBitcoin [BIP37](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki) adds support for `merkleblock` messages, which allow clients to download blocks that only include transactions relevant to them. The transactions are selected via a Bloom Filter.\nThis module verifies the Merkle proofs in a `merkleblock` message, and lists the included transactions which match the filter.\n## Usage\n",
    "snippet": "var merkleTree = require('bitcoin-merkle-tree')\n\n// build partial merkle tree object (block #681135 in testnet)\nvar partialMT = merkleTree.build({\n  hashes: [\n    new Buffer('52a893ef120d5e24aa38604ead9ada6628eea417df6d6096ef0dd7b73a89c0e9', 'hex'),\n    new Buffer('a76a1e1bffbbb254bd897e379298549eb8ff4aa57a4bb4c06637b36d76833207', 'hex'),\n    new Buffer('056b4e64697677788744a8ad23cc407cbc1c357ff889d9975edd431fb779466f', 'hex'),\n    new Buffer('3c51bfb4f9cdd2b8e3a5c47cb1b3bdbc8879a1c1b238d4123dcb572a00b2b80e', 'hex'),\n    new Buffer('d6d1f9ca0a4017050379a82ecccb050cf4218f2180087e9592110972a71e375c', 'hex')\n  ],\n  include: [\n    new Buffer('3c51bfb4f9cdd2b8e3a5c47cb1b3bdbc8879a1c1b238d4123dcb572a00b2b80e', 'hex'),\n    new Buffer('d6d1f9ca0a4017050379a82ecccb050cf4218f2180087e9592110972a71e375c', 'hex')\n  ],\n  merkleRoot: new Buffer('b9b4500294c18487dc32a929b587475fbf9652beb7d73010ea37ee0483e52e58', 'hex')\n})\n// { flags: [ 235, 1 ],\n//   hashes:\n//    [ <Buffer 19 d6 5e 9e 20 d4 55 db ae 6d 11 39 66 54 7a 1d 41 91 e3 cf eb 3c 4c 2a b9 0e d2 79 5f 39 c4 cc>,\n//      <Buffer 05 6b 4e 64 69 76 77 78 87 44 a8 ad 23 cc 40 7c bc 1c 35 7f f8 89 d9 97 5e dd 43 1f b7 79 46 6f>,\n//      <Buffer 3c 51 bf b4 f9 cd d2 b8 e3 a5 c4 7c b1 b3 bd bc 88 79 a1 c1 b2 38 d4 12 3d cb 57 2a 00 b2 b8 0e>,\n//      <Buffer d6 d1 f9 ca 0a 40 17 05 03 79 a8 2e cc cb 05 0c f4 21 8f 21 80 08 7e 95 92 11 09 72 a7 1e 37 5c> ],\n//   numTransactions: 5,\n//   merkleRoot: <Buffer b9 b4 50 02 94 c1 84 87 dc 32 a9 29 b5 87 47 5f bf 96 52 be b7 d7 30 10 ea 37 ee 04 83 e5 2e 58> }\n\n// extract included hashes from object\nvar hashes = merkleTree.extract(partialMT)\nconsole.log('Matched transactions: ', hashes.map(function(b) { return b.toString('hex') }))\n"
   }
  ]
 },
 {
  "package": "bizfly-unleash-proxy-client",
  "snippets": [
   {
    "description": "**Step 2: Initialize the SDK**\nYou need to have a Unleash-hosted instance, and the proxy need to be enabled. In addition you will need a proxy-specific `clientKey` in order to connect  to the Unleash-hosted Proxy.\n",
    "snippet": "import { UnleashClient } from 'bizfly-unleash-proxy-client';\n\nconst unleash = new UnleashClient({\n    url: 'https://hostname/hosted/api',\n    clientKey: 'your-proxy-key',\n    appName: 'my-webapp'\n});\n\n// Used to set the context fields, shared with the Unleash Proxy\nunleash.updateContext({userId: '1233'});\n\n// Start the background polling\nunleash.start();\n"
   },
   {
    "description": "**Step 3: Check if feature toggle is enabled**\n",
    "snippet": "unleash.isEnabled('proxy.demo');\n"
   },
   {
    "description": "**Step 4: Get toggle variant**\n",
    "snippet": "const variant = unleash.getVariant('proxy.demo');\nif(variant.name === 'blue') {\n // somehting with variant blue...\n}\n"
   },
   {
    "description": "**Listen for updates via the EventEmitter**\nThe client is also an event emitter. This means that your code can subscribe to updates from the client. \nThis is a neat way to update a single page app when toggle state updates. \n",
    "snippet": "unleash.on('update', () => {\n    const myToggle = unleash.isEnabled('proxy.demo');\n    //do something useful\n});\n"
   }
  ]
 },
 {
  "package": "blobby",
  "snippets": []
 },
 {
  "package": "blockcypher-unofficial",
  "snippets": [
   {
    "description": "## Usage\nsimply require the npm module at the top of the file\n",
    "snippet": "var blockcypher = require('blockcypher-unofficial');\n"
   },
   {
    "description": "##Networks\nThis adapter supports testnet, mainnet, and blockcyphers testnet. You may access each network by setting the network option to \none of these options:\ntestnet3: \"testnet\",\nBlockcypher's testnet: \"blockcypher-testnet\",\nmainnet: (anything but other two)\nyou may specify the options you wish to make a call like so:\n",
    "snippet": "var client = blockcypher({\n  network: \"testnet\"\n});\n\n//example call\nclient.Addresses.Unspents([\"address 1\", \"address 2\", ...], callback);\n"
   }
  ]
 },
 {
  "package": "bmaplib.lushu",
  "snippets": [
   {
    "description": "## Usage\n### ES Next\n",
    "snippet": "import LuShu from 'bmaplib.lushu'\n\n// You should use this lib after BaiduMap loaded. For Example:\n\nloadBaiduMap.then(() => {\n  new LuShu()\n})\n"
   }
  ]
 },
 {
  "package": "brain-f-games",
  "snippets": []
 },
 {
  "package": "brl-daily-quotation",
  "snippets": [
   {
    "description": "# About this package:\nThis package is responsible for listing the daily quotation of foreign currencies against the Brazillian Real (BRL), all based on SOAP services provided by Banco do Brasil for free, which you can see here: [SOAL Service Banco do Brasil](https://www3.bcb.gov.br/sgspub/JSP/sgsgeral/FachadaWSSGS.wsdl)\nYou can use destructor to get the requisition function and an object in the desired currency to get the daily quote.\n",
    "snippet": "const { CurrencyCode, getLastQuote } = require('./')\n\ngetLastQuote(CurrencyCode.EURO_BUY).then(console.log)\n"
   }
  ]
 },
 {
  "package": "browser-logger",
  "snippets": []
 },
 {
  "package": "browser-mjml-head-style",
  "snippets": []
 },
 {
  "package": "bt-pack",
  "snippets": []
 },
 {
  "package": "byted-vuedraggable",
  "snippets": [
   {
    "description": ".vue file:\n",
    "snippet": "  import draggable from 'vuedraggable'\n  ...\n  export default {\n        components: {\n            draggable,\n        },\n  ...\n"
   },
   {
    "description": "#### move\nType: `Function`<br>\nRequired: `false`<br>\nDefault: `null`<br>\nIf not null this function will be called in a similar way as [Sortable onMove callback](https://github.com/RubaXa/Sortable#move-event-object).\nReturning false will cancel the drag operation.\n",
    "snippet": "function onMoveCallback(evt, originalEvent){\n   ...\n    // return false; — for cancel\n}\n"
   },
   {
    "description": "javascript:\n",
    "snippet": "checkMove: function(evt){\n    return (evt.draggedContext.element.name!=='apple');\n}\n"
   }
  ]
 },
 {
  "package": "cacache",
  "snippets": [
   {
    "description": "## Table of Contents\n* [Example](#example)\n* [Features](#features)\n* [Contributing](#contributing)\n* [API](#api)\n  * [Using localized APIs](#localized-api)\n  * Reading\n    * [`ls`](#ls)\n    * [`ls.stream`](#ls-stream)\n    * [`get`](#get-data)\n    * [`get.stream`](#get-stream)\n    * [`get.info`](#get-info)\n    * [`get.hasContent`](#get-hasContent)\n  * Writing\n    * [`put`](#put-data)\n    * [`put.stream`](#put-stream)\n    * [`rm.all`](#rm-all)\n    * [`rm.entry`](#rm-entry)\n    * [`rm.content`](#rm-content)\n  * Utilities\n    * [`clearMemoized`](#clear-memoized)\n    * [`tmp.mkdir`](#tmp-mkdir)\n    * [`tmp.withTmp`](#with-tmp)\n  * Integrity\n    * [Subresource Integrity](#integrity)\n    * [`verify`](#verify)\n    * [`verify.lastRun`](#verify-last-run)\n### Example\n",
    "snippet": "const cacache = require('cacache')\nconst fs = require('fs')\n\nconst tarball = '/path/to/mytar.tgz'\nconst cachePath = '/tmp/my-toy-cache'\nconst key = 'my-unique-key-1234'\n\n// Cache it! Use `cachePath` as the root of the content cache\ncacache.put(cachePath, key, '10293801983029384').then(integrity => {\n  console.log(`Saved content to ${cachePath}.`)\n})\n\nconst destination = '/tmp/mytar.tgz'\n\n// Copy the contents out of the cache and into their destination!\n// But this time, use stream instead!\ncacache.get.stream(\n  cachePath, key\n).pipe(\n  fs.createWriteStream(destination)\n).on('finish', () => {\n  console.log('done extracting!')\n})\n\n// The same thing, but skip the key index.\ncacache.get.byDigest(cachePath, integrityHash).then(data => {\n  fs.writeFile(destination, data, err => {\n    console.log('tarball data fetched based on its sha512sum and written out!')\n  })\n})\n"
   },
   {
    "description": "#### <a name=\"ls\"></a> `> cacache.ls(cache) -> Promise<Object>`\nLists info for all entries currently in the cache as a single large object. Each\nentry in the object will be keyed by the unique index key, with corresponding\n[`get.info`](#get-info) objects as the values.\n##### Example\n",
    "snippet": "cacache.ls(cachePath).then(console.log)\n// Output\n{\n  'my-thing': {\n    key: 'my-thing',\n    integrity: 'sha512-BaSe64/EnCoDED+HAsh=='\n    path: '.testcache/content/deadbeef', // joined with `cachePath`\n    time: 12345698490,\n    size: 4023948,\n    metadata: {\n      name: 'blah',\n      version: '1.2.3',\n      description: 'this was once a package but now it is my-thing'\n    }\n  },\n  'other-thing': {\n    key: 'other-thing',\n    integrity: 'sha1-ANothER+hasH=',\n    path: '.testcache/content/bada55',\n    time: 11992309289,\n    size: 111112\n  }\n}\n"
   },
   {
    "description": "#### <a name=\"ls-stream\"></a> `> cacache.ls.stream(cache) -> Readable`\nLists info for all entries currently in the cache as a single large object.\nThis works just like [`ls`](#ls), except [`get.info`](#get-info) entries are\nreturned as `'data'` events on the returned stream.\n##### Example\n",
    "snippet": "cacache.ls.stream(cachePath).on('data', console.log)\n// Output\n{\n  key: 'my-thing',\n  integrity: 'sha512-BaSe64HaSh',\n  path: '.testcache/content/deadbeef', // joined with `cachePath`\n  time: 12345698490,\n  size: 13423,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n\n{\n  key: 'other-thing',\n  integrity: 'whirlpool-WoWSoMuchSupport',\n  path: '.testcache/content/bada55',\n  time: 11992309289,\n  size: 498023984029\n}\n\n{\n  ...\n}\n"
   },
   {
    "description": "##### Note\nThis function loads the entire cache entry into memory before returning it. If\nyou're dealing with Very Large data, consider using [`get.stream`](#get-stream)\ninstead.\n##### Example\n",
    "snippet": "// Look up by key\ncache.get(cachePath, 'my-thing').then(console.log)\n// Output:\n{\n  metadata: {\n    thingName: 'my'\n  },\n  integrity: 'sha512-BaSe64HaSh',\n  data: Buffer#<deadbeef>,\n  size: 9320\n}\n\n// Look up by digest\ncache.get.byDigest(cachePath, 'sha512-BaSe64HaSh').then(console.log)\n// Output:\nBuffer#<deadbeef>\n"
   },
   {
    "description": "#### <a name=\"get-stream\"></a> `> cacache.get.stream(cache, key, [opts]) -> Readable`\nReturns a [Readable Stream](https://nodejs.org/api/stream.html#stream_readable_streams) of the cached data identified by `key`.\nIf there is no content identified by `key`, or if the locally-stored data does\nnot pass the validity checksum, an error will be emitted.\n`metadata` and `integrity` events will be emitted before the stream closes, if\nyou need to collect that extra data about the cached entry.\nA sub-function, `get.stream.byDigest` may be used for identical behavior,\nexcept lookup will happen by integrity hash, bypassing the index entirely. This\nversion does not emit the `metadata` and `integrity` events at all.\nSee: [options](#get-options)\n##### Example\n",
    "snippet": "// Look up by key\ncache.get.stream(\n  cachePath, 'my-thing'\n).on('metadata', metadata => {\n  console.log('metadata:', metadata)\n}).on('integrity', integrity => {\n  console.log('integrity:', integrity)\n}).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n// Outputs:\nmetadata: { ... }\nintegrity: 'sha512-SoMeDIGest+64=='\n\n// Look up by digest\ncache.get.stream.byDigest(\n  cachePath, 'sha512-SoMeDIGest+64=='\n).pipe(\n  fs.createWriteStream('./x.tgz')\n)\n"
   },
   {
    "description": "##### Fields\n* `key` - Key the entry was looked up under. Matches the `key` argument.\n* `integrity` - [Subresource Integrity hash](#integrity) for the content this entry refers to.\n* `path` - Filesystem path where content is stored, joined with `cache` argument.\n* `time` - Timestamp the entry was first added on.\n* `metadata` - User-assigned metadata associated with the entry/content.\n##### Example\n",
    "snippet": "cacache.get.info(cachePath, 'my-thing').then(console.log)\n\n// Output\n{\n  key: 'my-thing',\n  integrity: 'sha256-MUSTVERIFY+ALL/THINGS=='\n  path: '.testcache/content/deadbeef',\n  time: 12345698490,\n  size: 849234,\n  metadata: {\n    name: 'blah',\n    version: '1.2.3',\n    description: 'this was once a package but now it is my-thing'\n  }\n}\n"
   },
   {
    "description": "#### <a name=\"get-hasContent\"></a> `> cacache.get.hasContent(cache, integrity) -> Promise`\nLooks up a [Subresource Integrity hash](#integrity) in the cache. If content\nexists for this `integrity`, it will return an object, with the specific single integrity hash\nthat was found in `sri` key, and the size of the found content as `size`. If no content exists for this integrity, it will return `false`.\n##### Example\n",
    "snippet": "cacache.get.hasContent(cachePath, 'sha256-MUSTVERIFY+ALL/THINGS==').then(console.log)\n\n// Output\n{\n  sri: {\n    source: 'sha256-MUSTVERIFY+ALL/THINGS==',\n    algorithm: 'sha256',\n    digest: 'MUSTVERIFY+ALL/THINGS==',\n    options: []\n  },\n  size: 9001\n}\n\ncacache.get.hasContent(cachePath, 'sha521-NOT+IN/CACHE==').then(console.log)\n\n// Output\nfalse\n"
   },
   {
    "description": "#### <a name=\"put-data\"></a> `> cacache.put(cache, key, data, [opts]) -> Promise`\nInserts data passed to it into the cache. The returned Promise resolves with a\ndigest (generated according to [`opts.algorithms`](#optsalgorithms)) after the\ncache entry has been successfully written.\nSee: [options](#put-options)\n##### Example\n",
    "snippet": "fetch(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).then(data => {\n  return cacache.put(cachePath, 'registry.npmjs.org|cacache@1.0.0', data)\n}).then(integrity => {\n  console.log('integrity hash is', integrity)\n})\n"
   },
   {
    "description": "#### <a name=\"put-stream\"></a> `> cacache.put.stream(cache, key, [opts]) -> Writable`\nReturns a [Writable\nStream](https://nodejs.org/api/stream.html#stream_writable_streams) that inserts\ndata written to it into the cache. Emits an `integrity` event with the digest of\nwritten contents when it succeeds.\nSee: [options](#put-options)\n##### Example\n",
    "snippet": "request.get(\n  'https://registry.npmjs.org/cacache/-/cacache-1.0.0.tgz'\n).pipe(\n  cacache.put.stream(\n    cachePath, 'registry.npmjs.org|cacache@1.0.0'\n  ).on('integrity', d => console.log(`integrity digest is ${d}`))\n)\n"
   },
   {
    "description": "#### <a name=\"rm-all\"></a> `> cacache.rm.all(cache) -> Promise`\nClears the entire cache. Mainly by blowing away the cache directory itself.\n##### Example\n",
    "snippet": "cacache.rm.all(cachePath).then(() => {\n  console.log('THE APOCALYPSE IS UPON US 😱')\n})\n"
   },
   {
    "description": "#### <a name=\"rm-entry\"></a> `> cacache.rm.entry(cache, key) -> Promise`\nAlias: `cacache.rm`\nRemoves the index entry for `key`. Content will still be accessible if\nrequested directly by content address ([`get.stream.byDigest`](#get-stream)).\nTo remove the content itself (which might still be used by other entries), use\n[`rm.content`](#rm-content). Or, to safely vacuum any unused content, use\n[`verify`](#verify).\n##### Example\n",
    "snippet": "cacache.rm.entry(cachePath, 'my-thing').then(() => {\n  console.log('I did not like it anyway')\n})\n"
   },
   {
    "description": "#### <a name=\"rm-content\"></a> `> cacache.rm.content(cache, integrity) -> Promise`\nRemoves the content identified by `integrity`. Any index entries referring to it\nwill not be usable again until the content is re-added to the cache with an\nidentical digest.\n##### Example\n",
    "snippet": "cacache.rm.content(cachePath, 'sha512-SoMeDIGest/IN+BaSE64==').then(() => {\n  console.log('data for my-thing is gone!')\n})\n"
   },
   {
    "description": "#### <a name=\"tmp-mkdir\"></a> `> tmp.mkdir(cache, opts) -> Promise<Path>`\nReturns a unique temporary directory inside the cache's `tmp` dir. This\ndirectory will use the same safe user assignment that all the other stuff use.\nOnce the directory is made, it's the user's responsibility that all files\nwithin are given the appropriate `gid`/`uid` ownership settings to match\nthe rest of the cache. If not, you can ask cacache to do it for you by\ncalling [`tmp.fix()`](#tmp-fix), which will fix all tmp directory\npermissions.\nIf you want automatic cleanup of this directory, use\n[`tmp.withTmp()`](#with-tpm)\nSee: [options](#tmp-options)\n##### Example\n",
    "snippet": "cacache.tmp.mkdir(cache).then(dir => {\n  fs.writeFile(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n})\n"
   },
   {
    "description": "#### <a name=\"tmp-fix\"></a> `> tmp.fix(cache) -> Promise`\nSets the `uid` and `gid` properties on all files and folders within the tmp\nfolder to match the rest of the cache.\nUse this after manually writing files into [`tmp.mkdir`](#tmp-mkdir) or\n[`tmp.withTmp`](#with-tmp).\n##### Example\n",
    "snippet": "cacache.tmp.mkdir(cache).then(dir => {\n  writeFile(path.join(dir, 'file'), someData).then(() => {\n    // make sure we didn't just put a root-owned file in the cache\n    cacache.tmp.fix().then(() => {\n      // all uids and gids match now\n    })\n  })\n})\n"
   },
   {
    "description": "#### <a name=\"with-tmp\"></a> `> tmp.withTmp(cache, opts, cb) -> Promise`\nCreates a temporary directory with [`tmp.mkdir()`](#tmp-mkdir) and calls `cb`\nwith it. The created temporary directory will be removed when the return value\nof `cb()` resolves, the tmp directory will be automatically deleted once that \npromise completes.\nThe same caveats apply when it comes to managing permissions for the tmp dir's\ncontents.\nSee: [options](#tmp-options)\n##### Example\n",
    "snippet": "cacache.tmp.withTmp(cache, dir => {\n  return fs.writeFileAsync(path.join(dir, 'blablabla'), Buffer#<1234>, ...)\n}).then(() => {\n  // `dir` no longer exists\n})\n"
   },
   {
    "description": "##### Generating Digests Yourself\nIf you have an existing content shasum, they are generally formatted as a\nhexadecimal string (that is, a sha1 would look like:\n`5f5513f8822fdbe5145af33b64d8d970dcf95c6e`). In order to be compatible with\ncacache, you'll need to convert this to an equivalent subresource integrity\nstring. For this example, the corresponding hash would be:\n`sha1-X1UT+IIv2+UUWvM7ZNjZcNz5XG4=`.\nIf you want to generate an integrity string yourself for existing data, you can\nuse something like this:\n",
    "snippet": "const crypto = require('crypto')\nconst hashAlgorithm = 'sha512'\nconst data = 'foobarbaz'\n\nconst integrity = (\n  hashAlgorithm +\n  '-' +\n  crypto.createHash(hashAlgorithm).update(data).digest('base64')\n)\n"
   },
   {
    "description": "##### Example\n",
    "snippet": "cacache.verify(cachePath).then(stats => {\n  // deadbeef collected, because of invalid checksum.\n  console.log('cache is much nicer now! stats:', stats)\n})\n"
   },
   {
    "description": "#### <a name=\"verify-last-run\"></a> `> cacache.verify.lastRun(cache) -> Promise`\nReturns a `Date` representing the last time `cacache.verify` was run on `cache`.\n##### Example\n",
    "snippet": "cacache.verify(cachePath).then(() => {\n  cacache.verify.lastRun(cachePath).then(lastTime => {\n    console.log('cacache.verify was last called on' + lastTime)\n  })\n})\n"
   }
  ]
 },
 {
  "package": "cao-design-redux",
  "snippets": []
 },
 {
  "package": "capsule9",
  "snippets": []
 },
 {
  "package": "carwash-data",
  "snippets": []
 },
 {
  "package": "cerebro-yahoo-dic",
  "snippets": []
 },
 {
  "package": "chileexpress",
  "snippets": [
   {
    "description": "##Uso\n",
    "snippet": "var chileexpress = require('chileexpress');\n\nchileexpress(['600110073533']).then(r=>{\n\tconsole.log(r);\n}).catch(e => {\n\tconsole.log(e);\n})\n"
   }
  ]
 },
 {
  "package": "chrono-node-albinodrought",
  "snippets": [
   {
    "description": "## Usage\nSimply pass a string to function `chrono.parseDate` or `chrono.parse`. \n",
    "snippet": "> var chrono = require('chrono-node')\n\n> chrono.parseDate('An appointment on Sep 12-13') \nFri Sep 12 2014 12:00:00 GMT-0500 (CDT)\n    \n> chrono.parse('An appointment on Sep 12-13');\n[ { index: 18,\n    text: 'Sep 12-13',\n    tags: { ENMonthNameMiddleEndianParser: true },\n    start: \n     { knownValues: [Object],\n       impliedValues: [Object] },\n    end: \n     { knownValues: [Object],\n       impliedValues: [Object] } } ]\n"
   },
   {
    "description": "### Reference Date\nToday's \"Friday\" is different from last month's \"Friday\". \nThe meaning of the referenced dates depends on when they are mentioned. \nChrono lets you define a reference date using `chrono.parse(text, ref)` and `chrono.parseDate(text, ref)`.    \n",
    "snippet": "\n> chrono.parseDate('Friday', new Date(2012,7,23)); \nFri Aug 24 2012 12:00:00 GMT+0700 (ICT)\n\n> chrono.parseDate('Friday', new Date(2012,7,1)); \nFri Aug 03 2012 12:00:00 GMT+0700 (ICT)\n"
   },
   {
    "description": "### Detailed Parsed Results\nThe function `chrono.parse` returns detailed parsing results as objects of class `chrono.ParsedResult`. \n",
    "snippet": "var results = chrono.parse('I have an appointment tomorrow from 10 to 11 AM')\n\nresults[0].index  // 15\nresults[0].text   // 'tomorrow from 10 to 11 AM'\nresults[0].ref    // Sat Dec 13 2014 21:50:14 GMT-0600 (CST)\n\nresults[0].start.date()  // Sun Dec 14 2014 10:00:00 GMT-0600 (CST)\nresults[0].end.date()    // Sun Dec 14 2014 11:00:00 GMT-0600 (CST)\n"
   },
   {
    "description": "#### ParsedComponents\nA group of found date and time components (year, month, hour, etc). ParsedComponents objects consist of `knownValues` and `impliedValues`.\n* `assign(component, value)`  Set known value to the component\n* `imply(component, value)`   Set implied value to the component\n* `get(component)`            Get known or implied value for the component\n* `isCertain(component)`      return true if the value of the component is known.\n* `date()`                    Create a javascript Date\n",
    "snippet": "// Remove the timezone offset of a parsed date and then create the Date object\n> var results = new chrono.parse('2016-03-08T01:16:07+02:00'); // Create new ParsedResult Object\n> results[0].start.assign('timezoneOffset', 0); // Change value in ParsedComponents Object 'start'\n> var d = results[0].start.date(); // Create a Date object\n> d.toString(); // Display resulting Date object\n'Tue Mar 08 2016 01:16:07 GMT+0000 (GMT)'\n"
   },
   {
    "description": "### Strict vs Casual \nChrono comes with `strict` mode that parse only formal date patterns. \n",
    "snippet": "// 'strict' mode\nchrono.strict.parseDate('Today');       // null\nchrono.strict.parseDate('Friday');      // null\nchrono.strict.parseDate('2016-07-01');  // Fri Jul 01 2016 12:00:00 ...\nchrono.strict.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\n\n// 'casual' mode (default) \nchrono.parseDate('Today');              // Thu Jun 30 2016 12:00:00 ...\nchrono.casual.parseDate('Friday');      // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('Jul 01 2016'); // Fri Jul 01 2016 12:00:00 ...\nchrono.casual.parseDate('Friday');      // Fri Jul 01 2016 12:00:00 ...\n"
   },
   {
    "description": "### Parser\nParser is a module for low-level pattern-based parsing. Ideally, each parser should be designed to handle a single specific date format. User can add new type of parsers for supporting new date formats or languages.\n",
    "snippet": "var christmasParser = new chrono.Parser();\n\n// Provide search pattern\nchristmasParser.pattern = function () { return /Christmas/i } \n\n// This function will be called when matched pattern is found\nchristmasParser.extract = function(text, ref, match, opt) { \n    \n    // Return a parsed result, that is 25 December\n    return new chrono.ParsedResult({\n        ref: ref,\n        text: match[0],\n        index: match.index,\n        start: {    \n            day: 25, \n            month: 12, \n        }\n    });\n}\n\n// Create a new custom Chrono. The initial pipeline 'option' can also be specified as \n// - new chrono.Chrono(exports.options.strictOption())\n// - new chrono.Chrono(exports.options.casualOption())\nvar custom = new chrono.Chrono();\ncustom.parsers.push(christmasParser);\n\ncustom.parseDate(\"I'll arrive at 2.30AM on Christmas night\") \n// Wed Dec 25 2013 02:30:00 GMT+0900 (JST)\n\n"
   },
   {
    "description": "### Refiner\nRefiner is a higher level module for improving or manipulating the results. User can add a new type of refiner to customize Chrono's results or to add some custom logic to Chrono.\n",
    "snippet": "var guessPMRefiner = new chrono.Refiner();\nguessPMRefiner.refine = function(text, results, opt) {\n    // If there is no AM/PM (meridiem) specified, \n    //  let all time between 1:00 - 4:00 be PM (13.00 - 16.00)\n    results.forEach(function (result) {\n        if (!result.start.isCertain('meridiem') \n            &&  result.start.get('hour') >= 1 && result.start.get('hour') < 4) {\n            \n            result.start.assign('meridiem', 1);\n            result.start.assign('hour', result.start.get('hour') + 12);\n        }\n    });\n    return results;\n} \n\n// Create a new custom Chrono. The initial pipeline 'option' can also be specified as \n// - new chrono.Chrono(exports.options.strictOption())\n// - new chrono.Chrono(exports.options.casualOption())\nvar custom = new chrono.Chrono();\ncustom.refiners.push(guessPMRefiner);\n\n// This will be parsed as PM.\n// > Tue Dec 16 2014 14:30:00 GMT-0600 (CST) \ncustom.parseDate(\"This is at 2.30\");\n\n// Unless the 'AM' part is specified\n// > Tue Dec 16 2014 02:30:00 GMT-0600 (CST)\ncustom.parseDate(\"This is at 2.30 AM\");\n"
   }
  ]
 },
 {
  "package": "cloud-init-server",
  "snippets": []
 },
 {
  "package": "cocos-pkgjson",
  "snippets": []
 },
 {
  "package": "codogo-marketing-scss",
  "snippets": []
 },
 {
  "package": "coffee-json-dsl-cfn-runlevel",
  "snippets": []
 },
 {
  "package": "coke-sass",
  "snippets": []
 },
 {
  "package": "cordova-plugin-notch-fix",
  "snippets": [
   {
    "description": "## Methods \r\n\r\n### has()\r\n\r\n",
    "snippet": "/** \r\n* @name has\r\n* @returns Promise<boolean>\r\n*/\r\ncutout.has();\r\n"
   }
  ]
 },
 {
  "package": "count",
  "snippets": []
 },
 {
  "package": "crosstree",
  "snippets": [
   {
    "description": "## Examples:\n- Use setValue on a tree path:\n",
    "snippet": "const treeA = new CrossTree();\ntreeA.subpath([\"alice\", \"firstName\"]).setValue(\"Alice\");\ntreeA.subpath([\"alice\", \"lastName\"]).setValue(\"Bloggs\");\nlet aliceData = treeA.toData();\n"
   },
   {
    "description": "- Merge data with another replica:\n",
    "snippet": "const treeB = new CrossTree({ _: { bob: { _: { firstName: { v: \"Bob\", t: 1571241715839 } } } } });\ntreeB.mergeData(aliceData); // receive Alice's data\ntreeB.subpath([\"alice\", \"firstName\"]).getValue(); // -> Alice\nlet bobData = treeB.toData();\n"
   },
   {
    "description": "- Send changes by observing tree:\n",
    "snippet": "\ntreeA.observeTree( (event) => {\n    const { change, before, after } = event;\n    sendToBob( change );\n    // change.data - new entry data\n    // change.path - path of changed entry\n});\n"
   }
  ]
 },
 {
  "package": "css-classes",
  "snippets": [
   {
    "description": "# css-classes\nList CSS classes in text(s).\n## Usage\n",
    "snippet": "const cssClasses = require(\"css-classes\");\n"
   },
   {
    "description": "### Unique\n",
    "snippet": "    const arr = [\".a {} .b {}\", \".a {} .c {}\"];\n    cssClasses(arr) // => [\"a\", \"b\", \"c\"]\n    cssClasses(arr, false) // => [\"a\", \"b\", \"c\"]\n    \n    const text = \".a {} .b {} .a {} .c {}\";\n    cssClasses(text) // => [\"a\", \"b\", \"c\"]\n    cssClasses(text, false) // => [\"a\", \"b\", \"c\"]\n"
   },
   {
    "description": "### Include duplicates\n",
    "snippet": "    const arr = [\".a {} .b {}\", \".a {} .c {}\"];\n    cssClasses(arr, true) // => [\"a\", \"b\", \"a\", \"c\"]\n    \n    const text = \".a {} .b {} .a {} .c {}\";\n    cssClasses(text, true) // => [\"a\", \"b\", \"a\", \"c\"]\n"
   }
  ]
 },
 {
  "package": "csv-iterator",
  "snippets": [
   {
    "description": "#csv-iterator\n[![Build Status](https://travis-ci.org/mirkokiefer/csv-iterator.png?branch=master)](https://travis-ci.org/mirkokiefer/csv-iterator)\n[![NPM](https://nodei.co/npm/csv-iterator.png)](https://nodei.co/npm/csv-iterator/)\nA ligthweight async csv-iterator for Node.js.\nExample that creates an iterator from a file to iterate over rows 10 to 20:\n",
    "snippet": "var createCSVIterator = require('csv-iterator')\n\nvar iterator = createCSVIterator({path: 'input.csv', from: 10, to: 20})\n"
   }
  ]
 },
 {
  "package": "cubx-grunt-webpackage-scaffold",
  "snippets": [
   {
    "description": "Once the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n",
    "snippet": "grunt.loadNpmTasks('cubx-grunt-webpackage-scaffold');\n"
   }
  ]
 },
 {
  "package": "custom-jszip",
  "snippets": [
   {
    "description": "JSZip [![Build Status](https://api.travis-ci.org/Stuk/jszip.svg?branch=master)](http://travis-ci.org/Stuk/jszip) [![Code Climate](https://codeclimate.com/github/Stuk/jszip/badges/gpa.svg)](https://codeclimate.com/github/Stuk/jszip)\n=====\n[![Selenium Test Status](https://saucelabs.com/browser-matrix/jszip.svg)](https://saucelabs.com/u/jszip)\nA library for creating, reading and editing .zip files with JavaScript, with a\nlovely and simple API.\nSee https://stuk.github.io/jszip for all the documentation.\n",
    "snippet": "var zip = new JSZip();\n\nzip.file(\"Hello.txt\", \"Hello World\\n\");\n\nvar img = zip.folder(\"images\");\nimg.file(\"smile.gif\", imgData, {base64: true});\n\nzip.generateAsync({type:\"blob\"}).then(function(content) {\n    // see FileSaver.js\n    saveAs(content, \"example.zip\");\n});\n\n/*\nResults in a zip containing\nHello.txt\nimages/\n    smile.gif\n*/\n"
   }
  ]
 },
 {
  "package": "cvss",
  "snippets": [
   {
    "description": "## Install\n## Usage\n",
    "snippet": "var cvss = require('cvss');\n\nvar score = cvss.getScore('CVSS:3.0/AV:P/AC:H/PR:N/UI:R/S:C/C:L/I:H/A:L');\n\nconsole.log(score) // => 6.2\n\nvar rating = cvss.getRating(score);\n\nconsole.log(rating) // => Medium\n"
   }
  ]
 },
 {
  "package": "days-calendar",
  "snippets": [
   {
    "description": "## Usage\nImport module from days-calendar, then register it to Vue:\n#### Base\n",
    "snippet": "import DaysCalendar from 'days-calendar';\n\nnew Vue({\n  el: '#your-dom-element',\n   components: {\n      Calendar: DaysCalendar\n   }\n})\n"
   },
   {
    "description": "#### renderDay (optional)\nIf you pass this props to Days Calendar, it will pass day object to the function before render the content.\nThis function should return a day object array.\n",
    "snippet": "renderDay(day){\n  console.log(day);\n  return day;\n}\n\n/* Day object:\n{ number: (Number of that day), date: (Moment Date Object), class: [] } */\n"
   },
   {
    "description": "#### renderDays (optional)\nIf you pass this props to Days Calendar, it will pass the array of day object to the function before render the content.\nThis function should return promise which resolve days array or error.\n",
    "snippet": "renderDays(year, month, days){\n  return new Promise((resolve, reject) => {\n     //Do something\n     resolve(days);\n  });\n}\n"
   },
   {
    "description": "#### onClick (optional)\nIf you pass this props to Days Calendar, it will pass the day object to the function before render the content.\nIt will allow you control the behavior after click on any day.\n",
    "snippet": "onClick(day){\n  console.log('This day is:', day);\n}\n"
   }
  ]
 },
 {
  "package": "democracyos-toggle",
  "snippets": [
   {
    "description": "## Installation\n    $ component install segmentio/toggle\n## Example\n    \n",
    "snippet": "var Toggle = require('toggle');\n\nvar toggle = new Toggle();\ndocument.body.appendChild(toggle.el);\n\ntoggle.value(); // false\n\ntoggle.value(true);\ntoggle.value(); // true\n\ntoggle.toggle();\ntoggle.value(); // false\n"
   }
  ]
 },
 {
  "package": "dn-middleware-watch",
  "snippets": []
 },
 {
  "package": "docx-pdf",
  "snippets": []
 },
 {
  "package": "dotenv-utils",
  "snippets": [
   {
    "description": "### `boolean`\nConverts a string representation (case-insensitive) of a boolean to an actual boolean.\n",
    "snippet": "const {boolean} = require(\"dotenv-utils\")\n\nboolean(\"true\") // true\nboolean(\"TRUE\") // true\nboolean(\"false\") // false\nboolean(\"foo\") // false\nboolean(\"\") // false\nboolean(undefined) // false\n"
   },
   {
    "description": "### `number`\nConverts a string representation of a number to an actual number. Basically like `Number(x)`, but will return a `0` instead of `NaN` when string cannot be converted to a number.\n",
    "snippet": "const {number} = require(\"dotenv-utils\")\n\nnumber(\"123\") // 123\nnumber(\"  123   \") // 123\nnumber(\"foo\") // 0\nnumber(undefined) // 0\n"
   },
   {
    "description": "### `string`\nTrims the supplied string. If provided a falsy value, returns `\"\"`. This is mainly useful when used in conjunction with the [`conform`](#conform) helper.\n",
    "snippet": "const {string} = require(\"dotenv-utils\")\n\nstring(\"foo\") // foo\nstring(\"  foo   \") // \"foo\"\nstring(\"\") // \"\"\nstring(undefined) // \"\"\n"
   },
   {
    "description": "### `array`\nConverts a string of comma-separated values (`\"foo, bar, baz\"`) to an array. Any extra whitespace will be trimmed and empty strings discarded.\n",
    "snippet": "const {array} = require(\"dotenv-utils\")\n\narray(\"foo, bar, baz\") // [\"foo\", \"bar\", \"baz\"]\narray(\"foo,   bar,    baz\") // [\"foo\", \"bar\", \"baz\"]\narray(\",,,\") // []\narray(\"\") // []\narray(undefined) // []\n"
   },
   {
    "description": "### `object`\nConverts a string of comma-separated tuples (`\"foo: bar, baz: quux\"`) to an object. Any extra whitespace from either key or value will be discarded, as are tuples with falsy keys.\n",
    "snippet": "const {object} = require(\"dotenv-utils\")\n\nobject(\"foo: bar, baz: quux\") // {foo: \"bar\", baz: \"quux\"}\nobject(\"foo:    bar   ,baz:quux\") // {foo: \"bar\", baz: \"quux\"}\nobject(\":,foo:\") // {foo: \"\"}\nobject(\"::,\") // {}\nobject(\"\") // {}\nobject(undefined) // {}\n"
   },
   {
    "description": "You can do this:\n",
    "snippet": "// Make sure you have loaded the env vars somehow,\n// either inline or using `dotenv`...\n\nconst {conform, boolean, array, string} = require(\"dotenv-utils\")\n\n// Specify a schema using the conversion functions\nconst schema = {\n  MINIFY: boolean,\n  DEFAULT_LOCALE: string,\n  SUPPORTED_LOCALES: array,\n}\n\n// Drop `process.env` into `conform`\nconst config = conform(process.env, schema)\n\n// `config` is now:\n// {\n//   MINIFY: false,\n//   DEFAULT_LOCALE: \"en-GB\",\n//   SUPPORTED_LOCALES: [\"en-GB\", \"cs-CZ\", \"pl-PL\"],\n// }\n\nmodule.exports = config\n"
   }
  ]
 },
 {
  "package": "edelweiss",
  "snippets": []
 },
 {
  "package": "ella-list-view",
  "snippets": []
 },
 {
  "package": "ember-cli-deploy-github-status",
  "snippets": [
   {
    "description": "- Get a github api [token](https://github.com/settings/tokens) make sure the `repo:status` scope is selected\n- Place the following configuration into `config/deploy.js`\n",
    "snippet": "ENV.github = {\n  token: '<your-github-token>',\n  userOrOrganization: '<user-name>'\n  repo: '<my-ember-app-repo>',\n  publicURL: '<url-where-assets-will-be-viewed-from>',\n  commitUser: '<who-made-the-commit',\n  commitSha: '<sha-for-specific-commit>'\n}\n"
   }
  ]
 },
 {
  "package": "ember-query-layer",
  "snippets": [
   {
    "description": "## Planned Usage\nWAIT! Using `model()` isn't really ideal, since it doesn't always get\ncalled. Was there a new hook called `data()` or something? Or could we\nreopen link-to somehow and check whether the target route has a\nquery-layer model hook?\nThis doesn't work yet! But practicing some README-driven development,\nhere's what I'm thinking:\n",
    "snippet": "import { query } from 'ember-query-layer';\nexport default Route.extend({\n  model: query`\n    query PostsRoute {\n      post {\n        comments {\n          author\n        }\n      }\n    }\n  `\n});\n"
   },
   {
    "description": "This will have a similar effect to (although without the confusing\nsemantics of reload, backgroundReload, or async relationships. A single\npromise is returned, which resolves with all the data you requested.\nNote - you don't need to specify scalar fields (only relationships), because they're already\nspecified in your DS.Model, and REST endpoints usually return the whole\nrecord anyway)\n",
    "snippet": "export default Route.extend({\n  model() {\n    return this.store.findAll('post', {\n      include: 'comments,comments.author'\n    });\n  }\n});\n"
   },
   {
    "description": "You can use \nEquivalent to `store.findRecord()`:\n",
    "snippet": "import { Route } from '@ember/routing';\nimport { query } from 'ember-query-layer';\n\nexport default Route.extend({\n  model: query`\n    query PostRoute($post_id: ID) {\n      post(id: $post_id)\n    }\n  `\n});\n"
   }
  ]
 },
 {
  "package": "emmet-css",
  "snippets": []
 },
 {
  "package": "excel-to-mongodb",
  "snippets": []
 },
 {
  "package": "execsyncs",
  "snippets": [
   {
    "description": "execsyncs\n===============\n[![Build Status](https://travis-ci.org/yosuke-furukawa/execsyncs.svg?branch=master)](https://travis-ci.org/yosuke-furukawa/execsyncs)\nexecSync for node v0.10 and v0.11.\nIf your node version is v0.11, execsyncs uses core library (child_process.execSync).\nHowever, if your node version is v0.10, execsyncs uses own native module (execsync.cc).\nHow to use\n================\n",
    "snippet": "var execsyncs = require(\"execsyncs\");\nvar ls = \"\" + execsyncs(\"ls\");\nconsole.log(ls);\n"
   }
  ]
 },
 {
  "package": "expensify",
  "snippets": [
   {
    "description": "## Example\nGenerate an Expensify SSO for user 'testuser@test.com'.\n",
    "snippet": "var Expensify = require('expensify');\n\nvar expensify = new Expensify({\n  expensifyPartnerName: <YOUR EXPENSIFY_PARTNER_NAME>,\n  expensifyPartnerPassword: <YOUR EXPENSIFY_PARTNER_PASSWORD>,\n  expensifyAesKey: <YOUR EXPENSIFY_AES_KEY>,\n  expensifyAesIv: <YOUR EXPENSIFY_AES_IV>\n});\n"
   },
   {
    "description": "Create and store a user id and secret for the the user you'd like to connect\n",
    "snippet": "expensify.authenticate({\n  userSecret: 'MyGreatSecret'\n}, function(e, sso) {\n  console.log(sso);\n});\n"
   },
   {
    "description": "Get an formatted Authorize URL\n",
    "snippet": "expensify.authorizeUrl({\n  sso: '675sd98769sd69sd',\n  userId: 'testuser@test.com',\n  exitTo: 'http://mysite.com/expensify/redirect'\n}, function(e, url) {\n  console.log(url);\n});\n"
   },
   {
    "description": "Create an expense transaction using the sso created above.\n",
    "snippet": "expensify.createDistanceTransaction({\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Transaction created');\n});\n"
   },
   {
    "description": "Create a separate distanceTransaction for that user.\n",
    "snippet": "expensify.createDistanceTransaction({\n  created: '2015-04-07',\n  distance: 2.3,\n  units: 'Mi',\n  comment: 'A trip to the store',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Distance Transaction created');\n});\n"
   },
   {
    "description": "Upload a receipt\n",
    "snippet": "expensify.uploadReceipt({\n  file: 'R0lGODlhEAAQAKUAAAAAABbkKBfhKRXlJxfiKBjgKRndKhrbKxzYKxbjKBneKhrcKhvZKxzXLB7VLRjfKRzYLB3WLBrbKh7ULR/SLh3VLR/TLSDQLiHOLyLLMCTJMB/RLiHPLyLMLyPKMCTIMSbFMifDMyXGMSjBMym/NCfCMyq9NCu7NSXGMifDMim+NCq8NSu5NSu6Nf///////////////////////////////////////////////////////////////////////yH5BAEKAD8ALAAAAAAQABAAAAZlwJ9wSCwafwDAsZgMCJJL5IBQMBwQSiMgIVAsGA1HlvkwACAR6BEgYQAmFLW2UbFcMBnNmLnhdDwfICF7REkfIgAjJIRDSSAlACYnjEgoKSMqKywslAAlJCYtm5RCSaOkhahRRkEAOw==',\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Receipt uploaded');\n});\n"
   },
   {
    "description": "Fetch a receipt from a URL\n",
    "snippet": "expensify.fetchReceipt({\n  location: 'http://we.are.expensify.com/assets/img/icon-rounded.png',\n  created: '2015-04-07',\n  merchant: 'Tire Emporium',\n  amount: 2299,\n  currency: 'USD',\n  comment: 'New tires for my car',\n  sso: sso,\n  partnerUserId: 'testuser@test.com'\n}, function(e, body) {\n  console.log('Receipt fetched');\n});\n\n"
   }
  ]
 },
 {
  "package": "express-gateway-test-tools",
  "snippets": []
 },
 {
  "package": "express-ts-decorator",
  "snippets": []
 },
 {
  "package": "fb-bs-platform",
  "snippets": []
 },
 {
  "package": "fillscreen-image",
  "snippets": []
 },
 {
  "package": "firsthandler",
  "snippets": []
 },
 {
  "package": "fis-parser-jade",
  "snippets": [
   {
    "description": "### 安装插件\r\n\r\n    $ npm install -g fis-parser-jade\r\n    $ vi path/to/project/fis-conf.js\r\n\r\n### 启用插件\r\n\r\n",
    "snippet": "//file : path/to/project/fis-conf.js\r\n\r\n//使用fis-parser-jade插件编译jade文件\r\nfis.config.set('modules.parser.jade', 'jade');\r\n//jade文件经过编译后输出为html文件\r\nfis.config.set('roadmap.ext.jade', 'html');\r\n"
   },
   {
    "description": "\r\n### 添加自定义filter与jade编译设置\r\n\r\n",
    "snippet": "var jadeConf = {\r\n\tfilters : {\r\n\t\tjadesrc : require('jade-highlighter')\r\n\t},\r\n  pretty  : true\r\n};\r\n\r\nfis.config.set('settings.parser.jade', jadeConf);\r\n"
   }
  ]
 },
 {
  "package": "fitbit-cli",
  "snippets": []
 },
 {
  "package": "fl-backbone-rest",
  "snippets": [
   {
    "description": "#### Examples (JavaScript)\n",
    "snippet": "var Backbone = require('backbone');\nvar RestController = require('backbone-rest');\nvar ensureLoggedIn = require('connect-ensure-login');\n\nvar customAuthorization = function(req, res, next) {\n  if (!req.user.canAccessTask(req)) {\n    return res.status(401).send('you cannot access this task');\n  }\n  return next();\n};\n\nnew RestController(app, {\n  auth: [ensureLoggedIn('/login'), customAuthorization],\n  model_type: Task,\n  route: '/tasks'\n});\n"
   }
  ]
 },
 {
  "package": "flux-link",
  "snippets": []
 },
 {
  "package": "gatsby-source-duodealer",
  "snippets": [
   {
    "description": "To learn more about image processing, check the documentation of\n[gatsby-plugin-sharp][gatsby-plugin-sharp].\n## Site's `gatsby-node.js` example\n",
    "snippet": "const path = require(\"path\")\n\nexports.createPages = async ({ graphql, boundActionCreators }) => {\n  const { createPage } = boundActionCreators\n\n  const pages = await graphql(`\n    {\n      allDuoDealerProduct {\n        edges {\n          node {\n            id\n            handle\n          }\n        }\n      }\n    }\n  `)\n\n  pages.data.allDuoDealerProduct.edges.forEach(edge => {\n    createPage({\n      path: `/${edge.node.handle}`,\n      component: path.resolve(\"./src/templates/product.js\"),\n      context: {\n        id: edge.node.id,\n      },\n    })\n  })\n}\n"
   }
  ]
 },
 {
  "package": "gcloud-monitor",
  "snippets": [
   {
    "description": "### Gauge\n#### Create a Gauge Metric\n",
    "snippet": "const monitor = require('gcloud-monitor')({\n  project: '<google-cloud-project-name>',\n  resource: {\n    // optional, defaults to {type: 'global'}\n    // more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/MonitoredResource\n  },\n  auth: {\n    // optional, if using on GCE\n    // more info: https://github.com/google/google-api-nodejs-client#authorizing-and-authenticating\n  },\n  // optional: default report throttle time\n  timeout: 1000\n})\n\n/**\n * create a gauge\n * more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricDescriptor\n * @param  {String} metricType\n * @param  {Object} [opts] metric params\n * @param  {Object} [opts.throttle] // report throttle time\n * @param  {Object} [opts.description]\n * @param  {Object} [opts.displayName]\n * @param  {Object} [opts.labels] label descriptors\n * @param  {Object} [opts.metricDomain] default: 'custom.googleapis.com'\n * @param  {Object} [opts.unit]\n * @param  {Object} [opts.valueType] default: 'INT64'\n * @return {Promise<Gauge,Error>} resolves gauge instance\n */\nmonitor.createGauge('connections', {\n  displayName: 'Connections',\n  description: 'Active socket connection count',\n  labels: [{\n    key: 'foo',\n    description: 'foo label description',\n    valueType: 'INT64'\n  }],\n  unit: 'connections',\n  valueType: 'INT64'\n}).then((gauge) => {\n  // use gauge...\n})\n"
   },
   {
    "description": "#### Report Gauge Metric Data\n",
    "snippet": "/**\n * report a metric value\n * @param  {*} value\n * @param  {Date} [time]\n * @param  {Object} [labels]\n * @return {Promise}\n */\ngauge.report(1, new Date(), {\n  foo: 1\n}).then((data) => {\n  console.log('Response data', data)\n})\n"
   },
   {
    "description": "#### Delete a Gauge Metric\n",
    "snippet": "/**\n * delete the cumulative metric\n * @return {Promise}\n */\ngauge.delete().then(function (data) {\n  console.log('Response data', data)\n})\n"
   },
   {
    "description": "### Cumulative\n#### Create a Cumulative Metric\n",
    "snippet": "const monitor = require('gcloud-monitor')({\n  project: '<google-cloud-project-name>',\n  auth: {/*auth-json*/} // optional, if using on GCE\n})\n\n/**\n * create a cumulative metric\n * more info: https://cloud.google.com/monitoring/api/ref_v3/rest/v3/projects.metricDescriptors#MetricDescriptor\n * @param  {String} metricType\n * @param  {Object} [opts] metric params\n * @param  {Object} [opts.description]\n * @param  {Object} [opts.displayName]\n * @param  {Object} [opts.labels] label descriptors\n * @param  {Object} [opts.metricDomain] default: 'custom.googleapis.com'\n * @param  {Object} [opts.unit]\n * @param  {Object} [opts.valueType] default: INT64\n * @return {Promise<Model,Error>} resolves Cumulative instance\n */\nmonitor.createCumulative('requestsPerSecond', {\n  displayName: 'Requests per Second',\n  description: 'Active socket connection count',\n  labels: [{\n    key: 'foo',\n    description: 'foo label description',\n    valueType: 'INT64'\n  }],\n  unit: 'req/s',\n  valueType: 'INT64'\n}).then((cumulative) => {\n  // use cumulative...\n})\n"
   },
   {
    "description": "#### Report Cumulative Metric Data\n",
    "snippet": "/**\n * report a metric value\n * @param  {*} value\n * @param  {Object|Date} [interval|endTime]\n * @param  {Object} [interval.startTime] default: last `interval.startTime` or `createCumulative` time\n * @param  {Object} [interval.endTime]\n * @param  {Object} [labels]\n * @return {Promise}\n */\ncumulative.report(1, {\n  startTime: startTime,\n  endTime: new Date()\n}, {\n  foo: 1\n}).then((data) => {\n  console.log('Response data', data)\n})\n"
   },
   {
    "description": "#### Delete a Cumulative Metric\n",
    "snippet": "/**\n * delete the cumulative metric\n * @return {Promise}\n */\ncumulative.delete().then(function (data) {\n  console.log('Response data', data)\n})\n"
   }
  ]
 },
 {
  "package": "generator-lnvbase",
  "snippets": []
 },
 {
  "package": "generator-mlewand-node",
  "snippets": []
 },
 {
  "package": "generator-moproj",
  "snippets": []
 },
 {
  "package": "generator-react-web",
  "snippets": []
 },
 {
  "package": "get-visible-rect",
  "snippets": []
 },
 {
  "package": "git-check",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "var hasGit = require('git-check');\n if (!hasGit) {\n        throw new Error('Git is not installed');\n   }\n"
   }
  ]
 },
 {
  "package": "git-subpath",
  "snippets": []
 },
 {
  "package": "glob-cp",
  "snippets": [
   {
    "description": "# use\n",
    "snippet": "\nvar cp = require('glob-cp');\n\n// async\nvar src = __dirname + '/fixtures/:module/public';\nvar dest = __dirname + '/public/:module';\nvar options = {recursive: true, force: true};\ncp(src, dest, options, function(err) {\n    if (err) console.error(err);\n});\n\n"
   },
   {
    "description": "# use\n",
    "snippet": "//or sync version\ncp.sync('fixtures/:module/public', 'public/:module');\n\n"
   },
   {
    "description": "## cp.sync(srcPattern, destPattern [,options])\nsync glob cp version.\n# options\n",
    "snippet": "// options with the following default values:\nvar options = {\n\n  // recusively copy files\n  recursive: false,\n\n  // remove destination before operation\n  force: false\n\n};\n"
   }
  ]
 },
 {
  "package": "gmaps-signature",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "// Load the module\nvar GS = require('gmaps-signature');\n\n// Add your Google Maps key\nGS.GOOGLE_API_KEY = 'MY KEY';\n// Or for Google Maps API for Work\nGS.GMAPS_CLIENT_ID = 'MY CLIENT ID';\nGS.GMAPS_PRIVATE_KEY = 'MY PRIVATE KEY';\n\n// and then you can start signing urls...\nvar url = GS.sign('https://maps.googleapis.com/maps/api/geocode/json?address=New+York');\n"
   }
  ]
 },
 {
  "package": "grateful",
  "snippets": []
 },
 {
  "package": "grunt-cdnify_v2",
  "snippets": []
 },
 {
  "package": "grunt-rm",
  "snippets": []
 },
 {
  "package": "grunt-sk-imgsize",
  "snippets": [
   {
    "description": "Once that's done, add this line to your project's Gruntfile:\n",
    "snippet": "grunt.loadNpmTasks('grunt-inline-imgsize');\n"
   },
   {
    "description": "### Overview\nIn your project's Gruntfile, add a section named `inlineImgSize` to the data object passed into `grunt.initConfig()`.\n",
    "snippet": "grunt.initConfig({\n  inlineImgSize: {\n  }\n})\n"
   },
   {
    "description": "### Usage Examples\n#### Basic Image Size Inlining\n",
    "snippet": "grunt.initConfig({\n  inlineImgSize: {\n    files: {\n      src: ['index.html', 'contact.html']\n    }\n  }\n})\n"
   },
   {
    "description": "#### Custom Options\n",
    "snippet": "grunt.initConfig({\n  inlineImgSize: {\n    options: {\n    },\n    files: [{\n      expand: true,\n      cwd: 'src',\n      src: ['*.html'],\n      dest: 'dest/'\n    }]\n  }\n})\n"
   }
  ]
 },
 {
  "package": "grunt-thrall",
  "snippets": [
   {
    "description": "Install the module:\n",
    "snippet": "// gruntfile.js\nmodule.exports = function(grunt) {\n\tvar thrall = require('grunt-thrall');\n\t\n\tthrall.init({\n\t\t/* see config */\t\n\t});\t\n};\n"
   },
   {
    "description": "### Required _string_: `dir`\n",
    "snippet": "thrall.init({dir: __dirname + 'myTasks' /* ,... */ });\n"
   },
   {
    "description": "The basic directory for custom tasks and grunt plugin configuration.\nExpects subdir `tasks/` for custom tasks and `config/` for grunt plugin configuration\nto be present.\n### Required _string_: `basePath`\n",
    "snippet": "thrall.init({basePath: __dirname /* ,... */ });\n"
   },
   {
    "description": "The projects base path.\nUsed to findup `node_modules/grunt-*/tasks/*` when auto-loading grunt plugins.\n### Required _object_: `grunt`\n",
    "snippet": "thrall.init({grunt: grunt /* ,... */ });\n"
   },
   {
    "description": "The currently running grunt instance.\n### _string_: `name`\n",
    "snippet": "thrall.init({name: 'myProject' /* ,... */ });\n"
   },
   {
    "description": "Defaults to `config.pkg.name` project name from `package.json`\nThis is also the key for custom configuration that is merged with the defaults\n",
    "snippet": "// pseudo-code\nvar config = _.merge(config.getDefaults(), grunt.config(config.name));\n"
   },
   {
    "description": "### _boolean_: `loadDevDependencies`\n",
    "snippet": "thrall.init({loadDevDependencies: false /* ,... */ });\n"
   },
   {
    "description": "Default: `true`\nWhether or not to include `devDependencies` from `package.json` when auto-loading grunt plugins.\n### _boolean_: `loadDependencies`\n",
    "snippet": "thrall.init({loadDependencies: true /* ,... */ });\n"
   },
   {
    "description": "Default: `false`\nWhether or not to include `dependencies` from `package.json` when auto-loading grunt plugins.\n### _object_: `module`\n",
    "snippet": "thrall.init({\n\tmodule: {\n\t\tmyHelper: ['factory', require('./helpers/myHelper')]\n\t}\n\t/* ,... */ \n});\n"
   },
   {
    "description": "Default: `{}`\nTask definitions, grunt plugin configurations and getDefaults are being invoked using \n[node-di](https://github.com/vojtajina/node-di) providing basic node modules.\nWhen you need a custom helper, it can be registered here.\nSee [DI](#DI) for further informations.\n### _function_: `getDefaults`\n",
    "snippet": "thrall.init({\n\tgetDefaults: function(/* di here */) {\n\t\treturn {\n\t\t\tfoo: 'bar'\n\t\t}\n\t}\n\t/* ,... */ \n});\n"
   },
   {
    "description": "every file in `config.dir`/`tasks/` is expected to export a factory function, returning \na task definition object. The name will be generated by the path relative to the tasks dir.\nFactories are being invoked using node-di, see [DI](#DI) for further informations.\n### Naming\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function(/* di here */) {\n\treturn {};\n};\n"
   },
   {
    "description": "will register task `foo:bar` that, when can be called with `grunt foo:bar` and does nothing.\n### _string/array_: `description`\n",
    "snippet": "module.exports = function() {\n\treturn {\n\t\tdescription: [\n\t\t\t'this is the bar tasks',\n\t\t\t'it will foo.'\n\t\t]\n\t\t/* ... */\n\t};\n};\n"
   },
   {
    "description": "### _array_: `run`\nSubtasks to run by this task.\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: [\n\t\t\t'jshint:src',\n\t\t\t'mochaTest'\n\t\t]\n\t};\n};\n"
   },
   {
    "description": "#### runIf blocks\nA runIf block can add tasks to the cue based on grunt configuration.\n",
    "snippet": "module.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: [\n\t\t\t'other:task',\n\t\t\t{\n\t\t\t\tif: 'coverage.enabled',\n\t\t\t\ttask: ['coverage']\n\t\t\t},\n\t\t\t{\n\t\t\t\tif: [\n\t\t\t\t\t(null != 1),\n\t\t\t\t\t'foo.bar'\n\t\t\t\t],\n\t\t\t\ttask: 'report',\n\t\t\t\telse: 'say:goodbye'\n\t\t\t}\n\t\t]\n\t};\n};\n"
   },
   {
    "description": "### _object_: `options`\nMap CLI options, environment variables and grunt modifiers to grunt config.\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\tcoverage: 'coverage.enabled'\n\t\t}\n\t};\n};\n"
   },
   {
    "description": "`grunt foo:bar --coverage` will set the `grunt.config('coverage.enabled')` to true.\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\t'demo-port': {\n\t\t\t\tenv: 'DEMO_PORT',\n\t\t\t\talias: 'port',\n\t\t\t\tkey: 'foo.demoPort'\n\t\t\t}\n\t\t}\n\t};\n};\n"
   },
   {
    "description": "either of \n - `grunt foo:bar --demo-port=7000`\n - `grunt foo:bar --demo=7000`\n - `DEMO_PORT=7000 grunt foo:bar`\nwill set the `grunt.config('foo.demoPort')` to 7000.\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\toptions: {\n\t\t\tcoverage: {\n\t\t\t\tgrunt: ':coverage',\n\t\t\t\tkey: 'coverage.enabled'\n\t\t\t}\n\t\t}\n\t};\n};\n"
   },
   {
    "description": "### _function_: `runFilter`\nFilter that may manipulate the tasks cue before execution.\n",
    "snippet": "// tasks/foo/bar.js\nmodule.exports = function() {\n\treturn {\n\t\t/* ... */\n\t\trun: ['foo', 'bar'],\n\t\trunFilter: function(tasks, args) {\n\t\t\tif (args[0] === 'baz') {\n\t\t\t\ttasks.shift();\n\t\t\t}\n\t\t\treturn tasks;\n\t\t}\n\t};\n};\n"
   },
   {
    "description": "every file in `config.dir`/`config/` is expected to export a factory function, returning \na configuration object. The name has to match the path that this configuration will \nbe placed at, in the grunt config.\nFactories are being invoked using node-di, see [DI](#DI) for further informations.\n",
    "snippet": "// config/jshint/src.js\nmodule.exports = function(/* di here */) {\n\treturn {\n\t\toptions: {\n\t\t\tignores: ['**/*.coffee'],\n\t\t\tjshintrc: true,\n\t\t},\n\t\tsrc: [\n\t\t\t'<%= my.src.files.js %>'\n\t\t]\n\t};\n};\n"
   },
   {
    "description": "This is similar to the following standard configuration, only that it's\nsplit in to a lot of small files, with is more easy to maintain for big projects. \n",
    "snippet": "grunt.initConfig({\n\tjshint: {\n\t\tsrc: {\n\t\t\toptions: {\n\t\t\t\tignores: ['**/*.coffee'],\n\t\t\t\tjshintrc: true,\n\t\t\t},\n\t\t\tsrc: [\n\t\t\t\t'<%= my.src.files.js %>'\n\t\t\t]\n\t\t}\n\t}\n});\n"
   },
   {
    "description": "[`getDefaults`](#function-getdefaults), [Task Factories](#task-factories) and \n[Configuration Factories](#task-factories) are being invoked with a \n[node-di](https://github.com/vojtajina/node-di) module, providing the following\nservices:\n - `_`: [lodash](https://github.com/lodash/lodash)\n - `cliOptions`: CLI Options using [minimist](https://github.com/substack/minimist)\n - `del`: [del](https://github.com/sindresorhus/del)\n - `findupSync`: [node-findup-sync](https://github.com/cowboy/node-findup-sync)\n - `fs`: node module\n - `getobject`: [node-getobject](https://github.com/cowboy/node-getobject)\n - `glob`: [node-glob](https://github.com/isaacs/node-glob)\n - `grunt`: currently running grunt instance\n - `mkdirp`: [node-mkdirp](https://github.com/substack/node-mkdirp) \n - `path`: node module\n - `merged`: (`getDefaults` ONLY) See [merged callback](#merged-callback)\n - `name`: (Task Factories ONLY) name of the task\n - `rootTask`: (Task Factories ONLY) the name of the task that has actually been called\n#### merged callback\n",
    "snippet": "/* ... */\ngetDefaults: function(merged) {\n\tmerged(function(mergedConfig) {\n\t\tmergedConfig.foo = 'baz';\n\t});\n\treturn {foo: 'bar'};\n}\n"
   }
  ]
 },
 {
  "package": "gspawn",
  "snippets": []
 },
 {
  "package": "gulp-es6-node-module",
  "snippets": [
   {
    "description": "Basic usage:\n",
    "snippet": "gulp.task('compileES5', function(){\n  return gulp.src('lib/**/*.js')\n    .pipe(nodePackage())\n    .pipe(getDependencies({\n      includeSeed: true\n    }))\n    .pipe(toCJS())\n    .pipe(gulp.dest('dist/es5'));\n});\n"
   }
  ]
 },
 {
  "package": "gulp-sloc2",
  "snippets": [
   {
    "description": "\r\nThen, add it to your `gulpfile.js`:\r\n\r\n",
    "snippet": "var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['scripts/*.js'])\r\n    .pipe(sloc());\r\n});\r\n"
   },
   {
    "description": "#### options.reportType\r\nType: `String`\r\nDefault: `stdout`\r\n\r\nIt will generate a JSON file with the SLOC analysis results and sends it further downstream. Use with the `reportFile` option if you want to customize the file name. You may want to pipe to the `gulp.dest()` method to write it out to specified folder. Example:\r\n\r\n",
    "snippet": "var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['lib/**/*.js'])\r\n    .pipe(sloc({\r\n      reportType: 'json'\r\n    }))\r\n    .pipe(gulp.dest('./reports/'));\r\n});\r\n"
   },
   {
    "description": "#### options.reportFile\r\nType: `String`\r\nDefault: `sloc.json`\r\n\r\n The name of the file which would contain you'd like to output the JSON file. Use with the `json` as `reportType`. Ignored if used with the `stdout` report type. Example:\r\n\r\n",
    "snippet": "var sloc = require('gulp-sloc2');\r\n\r\ngulp.task('sloc', function(){\r\n  gulp.src(['./test/**/*.js'])\r\n    .pipe(sloc({\r\n      reportType: 'json',\r\n      reportFile: 'testSloc.json'\r\n    }))\r\n    .pipe(gulp.dest('./reports/'));\r\n});\r\n"
   }
  ]
 },
 {
  "package": "h-vue-ui",
  "snippets": []
 },
 {
  "package": "habrok",
  "snippets": [
   {
    "description": "### Example\n",
    "snippet": "const Habrok = require('habrok');\n\nconst habrok = new Habrok();\n\nhabrok.request({\n  method: 'GET',\n  uri: 'https://api.github.com/repositories'\n})\n.then(console.log);\n"
   },
   {
    "description": "### `Habrok` (Constructor)\n#### Definition\n",
    "snippet": "Habrok([configuration])\n"
   },
   {
    "description": "#### Examples\nConstruct a default client:\n",
    "snippet": "const Habrok = require('habrok');\n\nconst habrok = new Habrok();\n"
   },
   {
    "description": "Construct a client with a minimum retry delay of 250 milliseconds:\n",
    "snippet": "const Habrok = require('habrok');\n\nconst habrok = new Habrok({ retryMinDelay: 250 });\n"
   },
   {
    "description": "Construct a client that does not send Habrok-generated headers:\n",
    "snippet": "const Habrok = require('habrok');\n\nconst habrok = new Habrok({ disableCustomHeaders: true });\n"
   },
   {
    "description": "### `Habrok#request`\n#### Definition\n",
    "snippet": "habrok.request(req[, options])\n"
   },
   {
    "description": "#### Examples\nSend a `GET` request:\n",
    "snippet": "habrok.request({\n  method: 'GET',\n  uri: 'https://api.viki.ng/longships'\n})\n"
   },
   {
    "description": "Send a `POST` request:\n",
    "snippet": "habrok.request({\n  method: 'POST',\n  uri: 'https://api.viki.ng/longships',\n  json: {\n    name: 'Oseberg'\n  }\n})\n"
   }
  ]
 },
 {
  "package": "head-require",
  "snippets": [
   {
    "description": "\"scripts/main.js\" like this : \n",
    "snippet": "head.require(\n\t\"the/path/to/foojs\",\n\t\"the/path/to/bar.js\",\n\t\"the/path/to/baz.js\"\n\t\"the/path/to/initialize.js\"\n);\n"
   },
   {
    "description": "### Grunt Task to Compile\nExample :\n",
    "snippet": "grunt.initConfig({\n\theadRequire : {\n\t\tdist : {\n\t\t\toptions : {},\n\t\t\tfiles : { \"the/path/to/dest.js\" : \"the/path/to/main.js\" }\n\t\t}\n\t}\n});\n"
   }
  ]
 },
 {
  "package": "hello-sugarlabs-module-v0.0.3",
  "snippets": []
 },
 {
  "package": "homebridge-pirf",
  "snippets": []
 },
 {
  "package": "html-inline-assets-loader",
  "snippets": [
   {
    "description": "# html-inline-assets-loader\n自动处理 html 文件中的相对引用 css/js/html 资源 文件，直接内联到 html 文件中，或者自动编译并拷贝到 dist 目录\n# useage\n",
    "snippet": "const configureHtmlLoader = () => {\n  return {\n    test: /\\.(html|njk|nunjucks)$/,\n    use: [\n      resolve('html-loader'),\n      // 自动处理html中的相对路径引用 css/js/html文件\n      resolve('html-inline-assets-loader'),\n      {\n        loader: resolve('nunjucks-html-loader'),\n        options: {\n          // Other super important. This will be the base\n          // directory in which webpack is going to find\n          // the layout and any other file index.njk is calling.\n          searchPaths: ['./src'],\n        },\n      },\n    ],\n  };\n};\n"
   }
  ]
 },
 {
  "package": "http-live-simulator",
  "snippets": []
 },
 {
  "package": "hyperdoc",
  "snippets": []
 },
 {
  "package": "ia-web-components",
  "snippets": []
 },
 {
  "package": "iagent",
  "snippets": []
 },
 {
  "package": "id-pool",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "const pool = new IdPool()\npool.on('release', id => {\n  console.log('release', id)\n})\n\nconst first = pool.reserve()\nconst second = pool.reserve()\n\nsetImmediate(function () {\n  pool.release(first)\n  pool.release(second)\n})\n"
   }
  ]
 },
 {
  "package": "initialize",
  "snippets": []
 },
 {
  "package": "instagrammer",
  "snippets": []
 },
 {
  "package": "iobroker.onkyo-vis",
  "snippets": []
 },
 {
  "package": "ip-slider",
  "snippets": [
   {
    "description": "This **event** is a **CustomEvent**:\n",
    "snippet": "function yourFunction(event) {\n  console.log(event.detail.value);\n}\n"
   },
   {
    "description": "To get the real event from input, get `srcEvent`:\n",
    "snippet": "function yourFunction(event) {\n  console.log(event.detail.srcEvent);\n}\n"
   },
   {
    "description": "Another option to get data:\n",
    "snippet": "const ipSlider = document.querySelector('ip-slider');\n\nconsole.log(ipSlider.value);\nconsole.log(ipSlider.min);\nconsole.log(ipSlider.max);\nconsole.log(ipSlider.step);\nconsole.log(ipSlider.disabled);\n"
   }
  ]
 },
 {
  "package": "irc-bot-maker",
  "snippets": [
   {
    "description": "## Usage\r\nTo create a simple bot that uses the \"examplePlugin\" plugin:\r\n",
    "snippet": "var IRCBot = require(\"irc-bot-maker\");\r\nvar myBot = new IRCBot(\"myBot\");\r\n\r\nvar examplePlugin = require(\"./examplePlugin\");\r\nmyBot.use(examplePlugin());\r\n\r\nmyBot.connect(\"myServer.com\", {\r\n\tchannels: [\"#myChannel1\", \"#myChannel2\"]\r\n});\r\n"
   },
   {
    "description": "You can .use() new plugins even after connecting so order doesn't matter.  \r\n\r\nHere is the \"examplePlugin\" that has defines a \"ping\" and an \"echo\" command:\r\n",
    "snippet": "module.exports = function() {\r\n\treturn {\r\n\t\t_plugin: \"examplePlugin\",\r\n\t\tping: {\r\n\t\t\tmodifier: \"!\",\r\n\t\t\tignorePm: false,\r\n\t\t\tcallback: function(bot, args) {\r\n\t\t\t\tbot.send(\"pong\");\r\n\t\t\t}\r\n\t\t},\r\n\t\techo: {\r\n\t\t\tmodifier: \"!\",\r\n\t\t\tignorePm: true,\r\n\t\t\tcallback: function(bot, args) {\r\n\t\t\t\tbot.send(args.join(\" \"));\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n};\r\n"
   },
   {
    "description": "### IRCBot(nick)\r\nThe bot constructor takes the bot's nickname (required). To create a new instance simply:\r\n",
    "snippet": "var IRCBot = require(\"irc-bot-maker\");\r\nvar myBot = new IRCBot(\"myBot\");\r\n"
   },
   {
    "description": "### .use(plugin)\r\nTell the bot to use a plugin. The plugin param is the returned object from a plugin containing its commands. If you want to use a plugin with a file name of \"examplePlugin.js\":\r\n",
    "snippet": "var examplePlugin = require(\"./examplePlugin\");\r\nmyBot.use(examplePlugin());\r\n"
   },
   {
    "description": "### .unuse(plugin)\r\nTell bot to stop using a plugin. The string param is the name of the plugin that is defined by its _plugin property.\r\n",
    "snippet": "myBot.unuse(\"examplePlugin\");\r\n"
   },
   {
    "description": "### .connect(server, options)\r\nConnect to a server. [The possible options that can be passed into the options object can be found here.](https://node-irc.readthedocs.org/en/latest/API.html#client)\r\nIf you wanted to connect to the server myServer.com to channels myChannel1 and myChannel2:\r\n",
    "snippet": "myBot.connect(\"myServer.com\", {\r\n\tchannels: [\"#myChannel1\", \"#myChannel2\"]\r\n});\r\n"
   },
   {
    "description": "### .send(message[, ignorePm[, to]])\r\nSends a message to the current channel. The current channel would be the one the last message came from. Optionally you can only send it when it isn't a private message.\r\n",
    "snippet": "myBot.send(\"This is a message.\", true);\r\n"
   },
   {
    "description": "This will not send the message if the last message was a PM to the bot.  \r\nThe third param is an array that manually defines the message recipients. Channel names start with a # and are otherwise considered users.\r\n",
    "snippet": "myBot.send(\"This is a message.\", false, [\"user1\", \"#channel1\", \"user2\", \"#channel2\"]);\r\n"
   }
  ]
 },
 {
  "package": "is-json-object",
  "snippets": [
   {
    "description": "This is a small package with a minimal footprint that tries to detect if an\nobject is a JSON-like value in the most generic way possible, using the\nfollowing rules for edge cases\n - Though not specified in the standard, root objects may be other values than plain objects\n - `NaN` and `Infinitiy` are not acceptable JSON values, as per the standard\n - Objects constructed with `Object.create(null)` will be accepted\n - Array-like objects with a `length` property will get accepted\nThese rules should cover most common use cases, while users requiring more\nfine-grained contol can take a look at the source (it isn't that much).\n## Usage\n",
    "snippet": "const isJSON = require('is-json-object')\n\nclass Foo {  }\n\nisJSON({ a: 1, b: 2 }) // true\nisJSON(new Foo) // false\nisJSON('test test test') // true\n"
   }
  ]
 },
 {
  "package": "is-kotlin-keyword",
  "snippets": [
   {
    "description": "## Install\n[![https://nodei.co/npm/is-kotlin-keyword.png](https://nodei.co/npm/is-kotlin-keyword.png)](https://www.npmjs.com/package/is-kotlin-keyword)\n## Use\n",
    "snippet": "// load the module\nvar isKotlinKeyword = require('index.js');\n\n// check a keyword\nisKotlinKeyword(\"while\"); // true\n"
   }
  ]
 },
 {
  "package": "iterm_quotes",
  "snippets": []
 },
 {
  "package": "iwe7-compiler",
  "snippets": []
 },
 {
  "package": "izy-server",
  "snippets": []
 },
 {
  "package": "jackeytest",
  "snippets": [
   {
    "description": "## Getting Started\nPlease follow the [installation](#installation) instruction and execute the following JS code:\n",
    "snippet": "var Jackeytest = require('jackeytest');\n\nvar api = new Jackeytest.JackeytestApi()\n\nvar callback = function(error, data, response) {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log('API called successfully. Returned data: ' + data);\n  }\n};\napi.getHaha(callback);\n\n"
   }
  ]
 },
 {
  "package": "JamSwitch",
  "snippets": []
 },
 {
  "package": "javascript-logger",
  "snippets": []
 },
 {
  "package": "jest-reporters",
  "snippets": []
 },
 {
  "package": "jquery-custom-inview",
  "snippets": []
 },
 {
  "package": "jquery-scrollappear",
  "snippets": []
 },
 {
  "package": "jrm",
  "snippets": []
 },
 {
  "package": "js-avl-tree",
  "snippets": [
   {
    "description": "## 案例\n请查看[**`example`**](https://github.com/wanls4583/js-avl-tree/tree/master/src/example)\n[**`online demo`**](https://blog.lisong.hn.cn/code/example/js-avl-tree/src/example/index.html)\n## AVLTree\n",
    "snippet": "/**\n * 二叉平衡树\n * @param {Function} compartor 关键字的比较器\n * @param {Boolean}  ifMerge   是否将插入的数据合并到节点\n */\nfunction AVLTree(compartor, ifMerge)\n"
   },
   {
    "description": "## AVLNode\n",
    "snippet": "/**\n * 插入节点\n * @param  {[type]} key  节点的key\n * @param  {[type]} data 节点的数据\n * @return {Boolean}     是否将插入的数据合并到节点\n */\nfunction AVLNode(key, data, ifMerge)\n"
   },
   {
    "description": "## insert\n",
    "snippet": "/**\n * 插入节点\n * @param  {[type]} key  节点的key\n * @param  {[type]} data 节点的数据\n * @return {Boolean}     插入是否成功\n */\n_proto.insert = function(key, data)\n"
   },
   {
    "description": "## delete\n",
    "snippet": "/**\n * 删除节点\n * @param  {[type]}   key     需要删除的节点的key\n * @param  {Boolean}  ifAll   是否删除所有符合的结点（默认只删除第一个查找到的结果）\n * @return {Array|AVLNode}    被删除后的点\n */\n_proto.delete = function(key, ifAll) \n"
   },
   {
    "description": "## search\n",
    "snippet": "/**\n * 查找节点\n * @param  {[type]}   key     需要查找的节点的key\n * @param  {Boolean}  ifAll   是否返回所有结果（默认只返回第一个查找到的结果）\n * @return {Array|AVLNode}    查找结果\n */\n_proto.search = function(key, ifAll)\n"
   }
  ]
 },
 {
  "package": "js-pkg",
  "snippets": []
 },
 {
  "package": "jsbean",
  "snippets": [
   {
    "description": "## Basic Usage\n`Bean.roast` returns a function that is used as a factory of Javascript objects.\nIt takes as first parameter an optinal constructor and a series of object that will be composed into the final prototype and descriptors.\n",
    "snippet": "    const Bean = require('bean')\n    \n    const Character = Object.create({\n      whoami() {\n        return `a bat called ${this.name || '...'}`\n      },\n    })\n\n    const FlyingThing = Object.create({\n      canFly: true,\n      fly() {\n        return 'flap, flap ...'\n      }\n    })\n\n    const Duck = Bean.roast(\n      function Duck(name) {\n        this.name = name\n        this.specie = 'bird'\n      },\n      Character,\n      FlyingThing\n    )\n\n    const Bat = Bean.roast(\n      function Bat(name) {\n        this.name = name\n        this.specie = 'mammal'\n      },\n      Character,\n      FlyingThing\n    )\n\n    const Dog = Bean.roast(\n      function Dog(name) {\n        this.name = name\n        this.specie = 'mammal'\n      },\n      Character\n    )\n\n    const daffyDuck = Duck('Daffy Duck')\n"
   }
  ]
 },
 {
  "package": "k-logs",
  "snippets": []
 },
 {
  "package": "keeps-on-ticking",
  "snippets": []
 },
 {
  "package": "kimberly",
  "snippets": []
 },
 {
  "package": "kissfs",
  "snippets": []
 },
 {
  "package": "knexentity",
  "snippets": []
 },
 {
  "package": "koco-toastr",
  "snippets": []
 },
 {
  "package": "koot-redux",
  "snippets": [
   {
    "description": "## 快速使用\n> 利用koot-cli 创建的模板项目，可按照如下修改使用。\n修改 File: /src/store/index.js\n",
    "snippet": "    import { createReduxModuleStore, applyMiddleware } from 'koot-redux'\n    import { reduxForCreateStore } from 'koot'\n    import rootModule from './root'\n\n    const middlewares = [\n        ...reduxForCreateStore.middlewares\n    ]\n\n    export default () => {\n\n        const {\n            initialState\n        } = reduxForCreateStore\n\n\n        if (__CLIENT__ && __DEV__) {\n            return createReduxModuleStore(\n                rootModule,\n                initialState,\n                require('redux-devtools-extension').composeWithDevTools(applyMiddleware(...middlewares))\n            )\n        }\n\n        return createReduxModuleStore(\n            rootModule,\n            initialState\n        )\n\n    }\n"
   },
   {
    "description": "添加 File: /src/store/root.js \n",
    "snippet": "    import { reduxForCreateStore } from 'koot'\n\n    export default {\n        state: {\n\n            ...reduxForCreateStore.reducers\n        },\n        reducers: {\n            ['SOME_REDUCER_FUNCTION']() {\n\n            }\n        },\n        actions: {\n            ['SOME_ACTION_FUNCTION']() {\n\n            }\n        },\n        modules: {\n            // 此处可扩展子集的 module 模块\n        }\n    }\n"
   },
   {
    "description": "## Module\n在 koot-redux 中，\n* 一个完整的 store 树就是以个层层嵌套的 module 树，\n* 每个 module 管理自己的 state, action, reducer\n* reducer 必须是同步的\n* action 是必须存在的逻辑，你必须 dipatch 一个 action, 且在 action 内 commit 一个 reducer\nmodule.js\n",
    "snippet": "    const module = {\n        state: {\n            // 在此处定义默认的state\n            // 程序将在创建时将此处定义好的值初始化为默认值\n            userinfo: {\n                username: 'liudehua',\n                password: '123456'\n            }\n        },\n        reducers: {\n            // reducer 为一个 funciton\n            // reducer的调用名称 = funciton的名称\n            ['SOME_REDUCER_FUNCTION'](state, payload){\n\n            }\n        },\n        actions: {\n            // action 为一个 funciton\n            // action的调用名称 = funciton的名称\n            ['SOME_ACTION_FUNCTION']({\n                commit,\n                state,\n                rootState,\n                dispatch\n            }, payload){\n                // commit 用来提交 reducer\n                // eg: commit('SOME_REDUCER_FUNCTION', payload)\n\n                // state 用来获取当前模块的局部 state\n                // eg: state.userinfo.username\n\n                // rootState 整个状态树的根层，你可以再此拿到整个状态树\n                // eg: rootState.App.test\n\n                // dispatch 可以继续派发其他的 action 操作\n                // eg: dispatch('OTHER_ACTION_FUNCTION')\n            }\n        },\n        modules: {\n            // 此处可扩展子集的 module 模块\n            // 子级可以同样扩展自己的子级\n            App: {\n                state: {\n                    test: 1\n                },\n                reducers: {},\n                actions: {},\n                modules: {}\n            }\n        }\n    }\n"
   },
   {
    "description": "## Action\n这里我们将 action 实体化一个 “必须存在” 的逻辑层。\n在开发中我们发现，无论是大量的异步请求，或是存储数据之前的复杂逻辑，我们都需要一个支持异步且实际存在的 action function 存在，即使是同步的需求，action 也可以通常用来处理数据存储之前的逻辑，可使得 reducer 的功能更纯净，且给未来的开发带来了足够的扩展性。\n所以当你执行派发操作时，你必须在先执行一个 action\n然后在 action 中，提交你要执行的 reducer 操作\n### 派发 action\n",
    "snippet": "    // 派发 action\n    this.props.dispatch('SOME_ACTION_NAME')\n    \n    // or\n    this.props.dispatch('SOME_ACTION_NAME', payload)\n"
   },
   {
    "description": "### action函数及参数\n",
    "snippet": "    // commit 用来提交 reducer\n    // eg: commit('SOME_REDUCER_FUNCTION', payload)\n\n    // state 用来获取当前模块的局部 state\n    // eg: state.userinfo.username\n\n    // rootState 整个状态树的根层，你可以再此拿到整个状态树\n    // eg: rootState.App.test\n\n    // dispatch 可以继续派发其他的 action 操作\n    // eg: dispatch('OTHER_ACTION_FUNCTION')\n\n    ['SOME_ACTION_NAME']({commit, state, rootState, dispatch}, payload){\n        commit('SOME_REDUCER_NAME', payload)\n    }\n"
   }
  ]
 },
 {
  "package": "ksys-express-http-proxy",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "proxy(host, options);\n"
   },
   {
    "description": "To proxy URLS starting with '/proxy' to the host 'www.google.com':\n",
    "snippet": "var proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com'));\n"
   },
   {
    "description": "#### forwardPath\nThe ```forwardPath``` option allows you to modify the path prior to proxying the request.\n",
    "snippet": "var proxy = require('express-http-proxy');\n\nvar app = require('express')();\n\napp.use('/proxy', proxy('www.google.com', {\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n"
   },
   {
    "description": "#### forwardPathAsync\nThe ```forwardPathAsync``` options allows you to modify the path asyncronously prior to proxying the request, using Promises.\n",
    "snippet": "app.use(proxy('httpbin.org', {\n  forwardPathAsync: function() {\n    return new Promise(function(resolve, reject) {\n      // ...\n      // eventually\n      resolve( /* your resolved forwardPath as string */ )\n    });\n  }\n}));\n"
   },
   {
    "description": "#### filter\nThe ```filter``` option can be used to limit what requests are proxied. For example, if you only want to proxy get request\n",
    "snippet": "app.use('/proxy', proxy('www.google.com', {\n  filter: function(req, res) {\n     return req.method == 'GET';\n  },\n  forwardPath: function(req, res) {\n    return require('url').parse(req.url).path;\n  }\n}));\n"
   },
   {
    "description": "#### intercept\nYou can intercept the response before sending it back to the client.\n",
    "snippet": "app.use('/proxy', proxy('www.google.com', {\n  intercept: function(rsp, data, req, res, callback) {\n    // rsp - original response from the target\n    data = JSON.parse(data.toString('utf8'));\n    callback(null, JSON.stringify(data));\n  }\n}));\n"
   },
   {
    "description": "#### decorateRequest\nYou can change the request options before it is sent to the target.\n",
    "snippet": "app.use('/proxy', proxy('www.google.com', {\n  decorateRequest: function(proxyReq, originalReq) {\n    // you can update headers\n    proxyReq.headers['Content-Type'] = 'text/html';\n    // you can change the method\n    proxyReq.method = 'GET';\n    // you can munge the bodyContent.\n    proxyReq.bodyContent = proxyReq.bodyContent.replace(/losing/, 'winning!');\n    return proxyReq;\n  }\n}));\n\n"
   },
   {
    "description": "#### reqAsBuffer\nNote: this is an experimental feature.  ymmv\nThe ```reqAsBuffer``` option allows you to ensure the req body is encoded as a Node\n```Buffer``` when sending a proxied request.   Any value for this is truthy.\nThis defaults to to false in order to preserve legacy behavior. Note that\nthe value of ```reqBodyEnconding``` is used as the encoding when coercing strings\n(and stringified JSON) to Buffer.\n",
    "snippet": "app.use('/proxy', proxy('www.google.com', {\n  reqAsBuffer: true\n}));\n"
   },
   {
    "description": "#### timeout\nBy default, node does not express a timeout on connections.   Use timeout option to impose a specific timeout.    Timed-out requests will respond with 504 status code and a X-Timeout-Reason header.\n",
    "snippet": "app.use('/', proxy('httpbin.org', {\n  timeout: 2000  // in milliseconds, two seconds\n}));\n"
   },
   {
    "description": "### Q: Can it support https proxy?\nThe library will use https if the provided path has 'https://' or ':443'.   You can use decorateRequest to ammend any auth or challenge headers required to succeed https.\nHere is an older answer about using the https-proxy-agent package.   It may be useful if the included functionality in ```http-express-proxy``` does not solve your use case.\nA:  Yes, you can use the 'https-proxy-agent' package. Something like this:\n",
    "snippet": "var corporateProxyServer = process.env.HTTP_PROXY || process.env.http_proxy || process.env.HTTPS_PROXY || process.env.https_proxy;\n\nif (corporateProxyServer) {\n  corporateProxyAgent = new HttpsProxyAgent(corporateProxyServer);\n}\n"
   },
   {
    "description": "Then inside the decorateRequest method, add the agent to the request:\n",
    "snippet": "  req.agent = corporateProxyAgent;\n"
   }
  ]
 },
 {
  "package": "lazy-bones",
  "snippets": []
 },
 {
  "package": "lille-ui",
  "snippets": []
 },
 {
  "package": "list-runner",
  "snippets": [
   {
    "description": "## Install, Import & Instantiate\r\n\r\n**Install**\r\n\r\n\r\n**Import**\r\n\r\n_importing the commonly needed classes_\r\n",
    "snippet": "import { CellSingly, CellDoubly, StemSingly, StemDoubly } from 'list-runner';\r\n"
   },
   {
    "description": "\r\n_importing the constants_\r\n",
    "snippet": "import { SENTINEL, CELL, SINGLY, DOUBLY } from 'list-runner';\r\n"
   },
   {
    "description": "\r\n_importing the sidekick functions_\r\n",
    "snippet": "import { initializeStem, findForward, findBackward, runForward, runBackward, countForward, countBackward } from 'list-runner';\r\n"
   },
   {
    "description": "\r\n_importing less commonly needed classes_\r\n",
    "snippet": "import { SentinelSingly, SentinelDoubly } from 'list-runner';\r\n"
   },
   {
    "description": "\r\n**Instantiate**\r\n\r\n_solo instantiation_\r\n\r\n",
    "snippet": "const cell = new CellDoubly();    \r\nconst stem = new StemDoubly(cell);\r\n"
   },
   {
    "description": "\r\n_connective instantiation_\r\n\r\n",
    "snippet": "const cell1 = new CellDoubly();    \r\nconst cell2 = new CellDoubly();    \r\nconst cell3 = new CellDoubly();    \r\nconst stemCells = [cell1, cell2, cell3];    \r\nconst structureType = DOUBLY; // imported constant    \r\nconst stem = initializeStem(stemCells, structureType);\r\n"
   },
   {
    "description": "\r\n_code examples: stem and cell classes_\r\n\r\n",
    "snippet": "// assume the following are not strings\r\nconst baseline = 'some arbitrary cell on the stem'; // substitute a cell on the stem\r\nconst cell = 'some new cell'; // substitute a newly instantiated cell\r\nconst cells = 'an array of cells'; // substitute an array of unlinked cells\r\n\r\n/* CELL OPERATIONS */\r\nconst nextCell = cell.getNext();\r\nconst prevCell = cell.getPrev(); // only DOUBLY data-structure\r\n\r\n/* STEM OPERATIONS */\r\nconst head = stem.getHead();\r\nconst tail = stem.getTail(); // only DOUBLY data-structure\r\ninsert(cell, baseline); // returns true || false based on success\r\nextract(baseline); // returns extracted cell || false based on success\r\nunshift(cell); // returns true || false based on success\r\nshift(); // returns extracted cell || false based on success\r\npush(cell); // only DOUBLY data-structure / returns true || false based on success\r\npop(); // only DOUBLY data-structure / returns extracted cell || false based on success\r\nreplace(cell, baseline); // returns true || false based on success\r\ndelete(baseline); // returns true || false based on success\r\n"
   },
   {
    "description": "\r\n_code examples: sidekick functions_\r\n\r\n",
    "snippet": "// assume the following are not strings\r\nconst comparator = 'a callback function that returns true when the right cell is found'; // receives each cell\r\nconst callBackParams = 'any kind of parameters that you want to pass to the callBack function';\r\nconst callBack = 'a custom callback function that will receive each cell from a loop and also callBackParams'; // receives each cell and callBackParams\r\n\r\n/* SIDEKICK FUNCTIONS */\r\ninterlink(cells);\r\nconst foundCell1 = findForward(baseline, comparator);\r\nconst foundCell2 = findBackward(baseline, comparator);\r\n// lastCellInLoop1 will be cell.type === SENTINEL if it loops to the edge of the stem (by not triggering a custom short-circuit condition)\r\nconst lastCellInLoop1 = runForward(baseline, callBack, callBackParams);\r\nconst lastCellInLoop2 = runBackward(baseline, callBack, callBackParams);\r\nconst totalCount1 = countForward(baseline);\r\nconst totalCount2 = countBackward(baseline);\r\n\r\n/* findForward / findBackward comparator callback examples */\r\n\r\n// standard\r\nexport const findComparator1 = (cell) => {\r\n  return cell.id === 'KD6-3.7';\r\n};\r\n\r\n// curried\r\nexport const findComparator2 = (id) => {\r\n    return (cell) => {\r\n        return cell.id === id;\r\n    };\r\n};\r\n\r\nconst myComparator = findComparator2('KD6-3.7');\r\nconst foundCell3 = findForward(baseline, myComparator);\r\n\r\n/* runForward / runBackward callback examples */\r\n\r\n// standard\r\nexport const runCallBack1 = (cell, callBackParams) => {\r\n    // do stuff\r\n    const continueLoop = cell.id !== id;\r\n    return continueLoop;\r\n};\r\n\r\n// curried\r\nexport const runCallBack2 = (id) => {\r\n    return (cell, callBackParams) => {\r\n      // do stuff\r\n      const continueLoop = cell.id !== id;\r\n      return continueLoop;\r\n    };\r\n};\r\n\r\nconst myCallBack = runCallBack2('KD6-3.7', 'any other arbitrary parameters');\r\n// lastCellInLoop3 will be cell.type === SENTINEL if it loops to the edge of the stem (by not triggering a custom short-circuit condition)\r\nconst lastCellInLoop3 = runForward(baseline, myCallBack, callBackParams);\r\n"
   }
  ]
 },
 {
  "package": "lodash-template-source-loader",
  "snippets": []
 },
 {
  "package": "logger-lib-1401",
  "snippets": []
 },
 {
  "package": "loopback-connector-rethinkdbdash",
  "snippets": []
 },
 {
  "package": "mad-science-modules",
  "snippets": []
 },
 {
  "package": "magmo-wallet-client",
  "snippets": []
 },
 {
  "package": "mala",
  "snippets": []
 },
 {
  "package": "map-pickas",
  "snippets": [
   {
    "description": "# map-pickas\r\n\r\n> NOTE: [map-pickas](https://www.npmjs.com/package/map-pickas) was renamed to [@extra-map/pick-as](https://www.npmjs.com/package/@extra-map/pick-as).\r\n[![NPM](https://nodei.co/npm/map-pickas.png)](https://nodei.co/npm/map-pickas/)\r\n\r\nFilter [map] with specified key(s), like [_.pick()].\r\n\r\n",
    "snippet": "const pickAs = require('map-pickas');\r\n// pickAs(<map>, <key(s)>, [begin=0], [end], [target=new Map()])\r\n// -> <value> (for single key) | <target> (for multiple keys)\r\n\r\nvar m = new Map([['i', 9], ['n', 14], ['c', 3]]);\r\npickAs(m, 'n');\r\n// 14\r\npickAs(m, ['n', 'i']);\r\n// Map {'n'=>14, 'i'=>9}\r\npickAs(m, ['n', 'i', 'c'], 1);\r\n// Map {'i'=>9, 'c'=>3}\r\npickAs(m, ['n', 'i', 'c'], 1, 2);\r\n// Map {'i'=>9}\r\npickAs(m, ['n', 'i', 'c'], 1, 2, new Map([['e', 5]]));\r\n// Map {'e'=>5, 'i'=>9}\r\n"
   }
  ]
 },
 {
  "package": "mathio",
  "snippets": []
 },
 {
  "package": "megadoc-plugin-reference-graph",
  "snippets": []
 },
 {
  "package": "memory-scheduler",
  "snippets": [
   {
    "description": "## Guide\nTo learn with this algorithm, two arguments have to be fed to it:\n- intervals([int]): intervals between each study session.\n- scroreToProgressChange([int]): how to update the progress based on the score the user gives when reviewing items\nFor one item we want to learn, store two data:\n- dueDate(int): the next day scheduled to review this item.\n- progress(int): How many times continuously the user has correctly answered this item.\nWhen reviewing an item, send these data to the calculate function and get the updated record of that item:\n- score(int): how confident the user is with this item.\n- prevRecord(object): the previous record of this item\n- now(int): the date of today\nThe answer is deemed as correct only when the score is equal to the length of scroreToProgressChange, and in this circumstance the nextDute is intervals[progress] days after today.\nOtherwise, the answer is deemed as incorrect and the next review is scheduled at tomorrow.\nIn both cases, progress should be updated in this way: progress+=scroreToProgressChange[score].\n## Example\n",
    "snippet": "import  MS from 'memory-scheduler';\n\nconst DAY_IN_MINISECONDS = 24 * 60 * 60 * 1000;\n\nconst today = Math.round(new Date().getTime() / DAY_IN_MINISECONDS);\n\nconst yesterday = today-1;\n\nconst ms = new MS([1, 2, 3, 8, 17], [-3, -1, 1]);\n\nconst record = ms.getInitialRecord(yesterday);\nconst updatedRecord = ms.calculate(1, record, today);\n\n"
   }
  ]
 },
 {
  "package": "meshblu-connector-netscaler",
  "snippets": []
 },
 {
  "package": "metalsmith-filetree",
  "snippets": []
 },
 {
  "package": "mini-vue-sugar",
  "snippets": []
 },
 {
  "package": "mkd-search",
  "snippets": []
 },
 {
  "package": "mochito",
  "snippets": [
   {
    "description": "## Usage\nUsing _mochito_ is simple, for example:\n",
    "snippet": "var mochito = require('mochito');\n\ndescribe('mochito', function() {\n  it('allows mocking to be performed with no set-up required', function() {\n    var mock = mochito.mock({\n      doSomething: function() {}\n    });\n\n    mock.doSomething('x', 'y');\n    mock.doSomething('z', 'y');\n\n    mochito.verify(mock, mochito.once()).doSomething('x', 'y');\n    mochito.verify(mock, mochito.once()).doSomething('z', 'y');\n    mochito.verify(mock, mochito.times(2)).doSomething(mochito.anything(), 'y');\n  });\n});\n"
   },
   {
    "description": "## Global Functions\nIf you really want the JsHamcrest & JsMockito functions to be available\nglobally, you can simply write:\n",
    "snippet": "mochito.installTo(global);\n"
   }
  ]
 },
 {
  "package": "mongo-edu",
  "snippets": []
 },
 {
  "package": "mongo-live",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "var MongoLive = require('mongo-live');\nvar live = new MongoLive({\n  host: '127.0.0.1',\n  port: 27017,\n  database: 'blog'\n});\n\nvar posts = live\n.query('posts')\n.select('title body comments')\n.exec(function (error, stream) {\n\n  stream.on('data', function (data) {\n\n    if (error) {\n      // handle error\n      return;\n    }\n      \n    if ('insert' === data.operation) {\n      console.log('inserted', data);\n    }\n\n    if ('update' === data.operation) {\n      console.log('updated', data);\n    }\n\n    if ('remove' === data.operation) {\n      console.log('removed', data);\n    }\n\n    console.log('======== result ======>', data);\n\n  });\n\n});\n\n"
   },
   {
    "description": "You can also listen to events like this:\n",
    "snippet": "var posts = live\n.query('posts')\n.select('title body')\n.exec();\n\nposts.on('insert', function(data){\n  console.log('inserted', data);\n});\n\nposts.on('update', function(data){\n  console.log('updated', data);\n});\n\nposts.on('remove', function(data){\n  console.log('removed', data);\n});\n\nposts.on('data', function(data){\n  if ('insert' === data.operation) {\n    console.log('inserted', data);\n  }\n\n  if ('update' === data.operation) {\n    console.log('updated', data);\n  }\n\n  if ('remove' === data.operation) {\n    console.log('removed', data);\n  }\n});\n"
   },
   {
    "description": "Then later any `find` query will be cached for 60 seconds.\nYou can also enable caching programatically by using the `cache` method directly from the query instance:\n",
    "snippet": "var Person = mongoose.model('Person');\n\nPerson.find({ active: true })\n.cache(50000) // cache for 50 seconds\n.exec(function (err, docs) { /* ... */\n  \n  if (err) throw error;\n\n  console.log(docs.ttl) // time left for expiration in ms\n  console.log(docs.stored); // timestamp this query was cached\n  console.log(docs);\n\n});\n\n"
   }
  ]
 },
 {
  "package": "mongodb-js-repo-list",
  "snippets": [
   {
    "description": "# mongodb-js-repo-list [![travis][travis_img]][travis_url] [![npm][npm_img]][npm_url]\n> List repositories in a specified GitHub Organization\nThis module hits the Github API and returns a list of repositories in a specified organization. At the command line, it must be called with a Github oauth access token (following -t). Options include :\n- `format` (json, yaml, table)\n- `grep` (a word to filter the search on)\n- `out` (output to file)\n- `keys` (choose data about each repository to see)\n- `forked` (include forked repositories)\n## Usage\n",
    "snippet": "mongodb-js-repo-list <organization> -t <oauth token> [options]\n"
   },
   {
    "description": "## Example\n",
    "snippet": "mongodb-js-repo-list mongodb-js -t <oauth token> --format table --grep mongo\n"
   }
  ]
 },
 {
  "package": "mrg",
  "snippets": []
 },
 {
  "package": "multiplexing-log4js",
  "snippets": [
   {
    "description": "# multiplexing-log4js\r\n\r\nA multiplexing log4js logger component\r\n\r\nYou can send logs over socket, and controll the appender's state, and event trigger listeners.\r\n\r\nExample:\r\n\r\nserver side:\r\n\r\n",
    "snippet": "log4js.configure({\r\n    appenders: {\r\n        file: MultiplexingFileAppender.createConfig(filename, pattern, listener),\r\n        server: MultiplexingSocketServerAppender.createConfig(port)\r\n    },\r\n    categories: {\r\n        default: { appenders: [\"file\"], level: \"all\" }\r\n    }\r\n})\r\n"
   },
   {
    "description": "\r\nclient side:\r\n\r\n",
    "snippet": "log4js.configure({\r\n    appenders: {\r\n        socket: MultiplexingSocketAppender.createConfig(\"127.0.0.1\", 1234),\r\n    },\r\n    categories: {\r\n        default: { appenders: [\"socket\"], level: \"all\" }\r\n    }\r\n})\r\nconst logger = log4js.getLogger(\"test\")\r\nlogger.info(\"test info\") // normal logging, will be writed to file as server side\r\nlogger.log(\"CMD\", \"hold\") // set MultiplexingFileAppender state to \"hold\", and it won't roll new file.\r\nlogger.log(\"CMD\", \"release\") // relase hold\r\nlogger.log(\"EVENT\", \"something\") // fire the listener at server side\r\n"
   }
  ]
 },
 {
  "package": "mustring",
  "snippets": []
 },
 {
  "package": "myratinglib",
  "snippets": []
 },
 {
  "package": "nanocyte-component-function",
  "snippets": []
 },
 {
  "package": "nativescript-rotate-3d",
  "snippets": []
 },
 {
  "package": "nes-core",
  "snippets": []
 },
 {
  "package": "new-rutracker-api",
  "snippets": [
   {
    "description": "## Использование\nВ первую очередь необходимо скопировать папку с New Rutracker API в ваш проект. Далее, подключите модуль в нужном вам JS-файле:\n",
    "snippet": "var RutrackerApi = require('new-rutracker-api');\n"
   },
   {
    "description": "Следующий этап — авторизация приложения. Сделать это можно непосредственно при вызове конструктора, либо позже — с помощью метода объекта ```login```.\n",
    "snippet": "var username = 'username',\n    password = 'password';\n\n// Вариант №1: при вызове конструктора\nvar rutracker = new RutrackerApi({\n    username: username,\n    password: password\n});\n\n// Вариант №2: с помощью метода 'login'\nvar rutracker = new RutrackerApi();\nrutracker.login(username, password);\n"
   },
   {
    "description": "Помните, что для синхронизации вы можете использовать событие ```login```. После того, как приложение получило токен, мы можем начать искать раздачи. Поиск осуществляется через метод ```search```:\n",
    "snippet": "var query = \"YOUR QUERY HERE\",\n    callback = console.log.bind(console);\n\nrutracker.search(query, callback);\n"
   },
   {
    "description": "Дополнительно можно задать параметры поиска в объекте ```options```:\n",
    "snippet": "var query = \"YOUR QUERY HERE\",\n    options = {\n      forums: [1000, 1001], // массив id форумов\n      sortBy: 'seeds', // см. ниже\n      sortOrder: 'desc' // или 'asc'\n    },\n    callback = console.log.bind(console);\n\nrutracker.search(query, options, callback);\n"
   }
  ]
 },
 {
  "package": "ng2-countries-trivia",
  "snippets": []
 },
 {
  "package": "ngx-clarity-datetime",
  "snippets": [
   {
    "description": " 4. If you are using __systemjs__ package loader add the following ng-pick-datetime properties to the __System.config__:\r\n",
    "snippet": "  (function (global) {\r\n      System.config({\r\n          paths: {\r\n              'npm:': 'node_modules/'\r\n          },\r\n          map: {\r\n              // Other components are here...\r\n\r\n              'ng-pick-datetime': 'npm:ng-pick-datetime',\r\n          },\r\n          packages: {\r\n              // Other components are here...\r\n\r\n            // the picker\r\n              'ng-pick-datetime': {\r\n                  main: 'picker.bundle.js',\r\n                  defaultExtension: 'js'\r\n              },\r\n          }\r\n      });\r\n  })(this);\r\n"
   },
   {
    "description": "This picker uses angular animations to improve the user experience, \r\nstarting with Angular 4 animations have their own module so you need to import BrowserAnimationsModule to your application. \r\nIf you prefer to disable animation effect, use NoopAnimationsModule instead.\r\n\r\n\r\n",
    "snippet": "    import {BrowserModule} from '@angular/platform-browser';\r\n    import {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\n    \r\n    @NgModule({\r\n        imports: [\r\n            BrowserModule,\r\n            BrowserAnimationsModule,\r\n            //...\r\n        ],\r\n        //...\r\n    })\r\n    export class YourAppModule { }\r\n"
   },
   {
    "description": "Localization for different languages and formats is defined by binding the locale settings object to the locale property. Following is the default values for English.\r\n\r\n",
    "snippet": "export class MyModel {\r\n    \r\n    en: any;\r\n    \r\n    ngOnInit() {\r\n        this.en = {\r\n            firstDayOfWeek: 0,\r\n            dayNames: [\"Sunday\", \"Monday\", \"Tuesday\",\"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"],\r\n            dayNamesShort: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\r\n            monthNames: [ \"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\" ],\r\n            monthNamesShort: [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ]\r\n        };\r\n    }\r\n}\r\n"
   },
   {
    "description": "\r\nIf you want the formatted date time to be localized as well, you need to npm install [date-fns](https://date-fns.org/).\r\n\r\n\r\n",
    "snippet": "export class MyModel {\r\n    \r\n    es: any;\r\n    esLocale = require('date-fns/locale/es')\r\n    \r\n    ngOnInit() {\r\n        this.es = {\r\n\t\t\t firstDayOfWeek: 1,\r\n\t\t     dayNames:[\"domingo\",\"lunes\",\"martes\",\"miércoles\",\"jueves\",\"viernes\",\"sábado\" ],\r\n\t\t     dayNamesShort: [ \"dom\",\"lun\",\"mar\",\"mié\",\"jue\",\"vie\",\"sáb\" ],\r\n\t\t     monthNames: [ \"enero\",\"febrero\",\"marzo\",\"abril\",\"mayo\",\"junio\",\"julio\",\"agosto\",\"septiembre\",\"octubre\",\"noviembre\",\"diciembre\" ],\r\n\t\t     monthNamesShort: [ \"ene\",\"feb\",\"mar\",\"abr\",\"may\",\"jun\",\"jul\",\"ago\",\"sep\",\"oct\",\"nov\",\"dic\" ],\r\n\t\t     dateFns: esLocale\r\n        };\r\n    }\r\n}\r\n"
   }
  ]
 },
 {
  "package": "node-bc",
  "snippets": []
 },
 {
  "package": "node-blte",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "// Import module, naturally...\nconst BLTEReader = require('node-blte');\n\n// Register encryption keys (for encrypted blocks).\nBLTEReader.registerDecryptionKeys({\n    '213D67C1543A63A9': '1F8D467F5D6D411F8A548B6329A5087E',\n    '2BB68ACDC6254F79': '76583BDACD5257A3F73D1598A2CA2D99'\n});\n\nlet key = 'a19e2d57adf9830d989e3dad7dd56cec';\nlet buffer = obtainBufferSomehow();\n\n// Create a new BLTEReader from an existing buffer (or Bufo instance).\nlet reader = new BLTEReader(buffer, key);\n\n// `reader` can now be used just like a normal Bufo instance, and will automatically\n// decompress and decrypt blocks (using given keys) as needed.\n\n// If you need all blocks to be pre-processed (buffer transfer, etc), call `readAllBlocks()` first.\n"
   }
  ]
 },
 {
  "package": "node-csolanobix",
  "snippets": []
 },
 {
  "package": "node-woff2",
  "snippets": []
 },
 {
  "package": "nodeplugs",
  "snippets": []
 },
 {
  "package": "npm4",
  "snippets": []
 },
 {
  "package": "o2o_layout",
  "snippets": []
 },
 {
  "package": "object-tagger-util",
  "snippets": []
 },
 {
  "package": "omega-models",
  "snippets": []
 },
 {
  "package": "opent2t-cloud",
  "snippets": []
 },
 {
  "package": "osirisguitar",
  "snippets": []
 },
 {
  "package": "panda-portfolio",
  "snippets": [
   {
    "description": "<p align=\"center\"><img src=\"https://raw.githubusercontent.com/YashMeh/panda-portfolio/master/images/logoPanda.png\" alt=\"Panda-portfolio logo\"></p>\n<h1 align=\"center\">Panda Portfolio</h1>\n<p align=\"center\">No more worries while making single page github portfolio websites.</p>\n<p align=\"center\"><a href=\"https://www.npmjs.com/package/panda-portfolio\"><img src=\"https://img.shields.io/badge/npm-6.8.0-brightgreen.svg\" alt=\"npm\"></a> <img src=\"https://img.shields.io/badge/node-11.8.0-brightgreen.svg\" alt=\"node\"> <img src=\"https://img.shields.io/npm/dw/panda-portfolio.svg\" alt=\"downloads\"> <img src=\"https://img.shields.io/github/license/YashMeh/panda-portfolio.svg\" alt=\"LICENSE\"></p>\n## Installation\n",
    "snippet": "// For npm<5.2.0\nsudo npm install -g panda-portfolio\n\n// For npm>=5.2.0\nnpx panda-portfolio <command>\n"
   },
   {
    "description": "## Creating the config file\nplease make sure that you have the profile photo as well as resume file in the same directory\n",
    "snippet": "panda init\n"
   },
   {
    "description": "## Creating the index page\n",
    "snippet": "panda config.json\n"
   }
  ]
 },
 {
  "package": "parse-processes",
  "snippets": [
   {
    "description": "## Example\n",
    "snippet": "var processes = require('parse-processes');\n\nprocesses(function(err, result){\n  result.forEach(function(p){\n    console.log(p.id, p.tty, p.time, p.cmd);\n  });\n});\n"
   }
  ]
 },
 {
  "package": "parse-tx-xdr-to-json-response",
  "snippets": [
   {
    "description": "### Example\n",
    "snippet": "const { parseOperations } = require('parse-tx-xdr-to-json-response');\n const envelope_xdr = \"AAAAAEEPRPOcFZIwowt0GootrwjGX+aNqP5zG+kbuu4YXVLYAAAnEAAAAEUAAAACAAAAAAAAAAAAAAABAAAAAQAAAAB6LHmPFqLd3d8SbTZuAJD6B83V4P4Uw9gRyDwpdgjsEwAAAAYAAAABVVNEAAAAAABBD0TznBWSMKMLdBqKLa8Ixl/mjaj+cxvpG7ruGF1S2H//////////AAAAAAAAAAIYXVLYAAAAQKzoZwsMKh/yh5eLQD+xu4VzwgAZrg/ynqUGAJcb1oSNEVe1RI9r+k7H+O/SJvamFXx0yvEx2ohSuTRKxU7usQR2COwTAAAAQHklUcmcSvJxX13PddLcedVMPcxSeLpUddoBzJInZ2XKz2dbPe+Oz18PZ1Pbgoy75IBvHnRUX5NK+bpw5OYLUQY=\";\nlet oprations = parseOperations({\n    txEnvelopeXdr: envelope_xdr\n});\nconsole.log(oprations);\n"
   }
  ]
 },
 {
  "package": "parsec-utils",
  "snippets": []
 },
 {
  "package": "pathfind",
  "snippets": [
   {
    "description": "### `pathfind(<string[]> paths, <string> target) => Promise`\nAsynchronously find a `target` path in a list of `paths`.\n",
    "snippet": "pathfind(['a', 'b', 'c'], 'sub_b');\n// => 'a/sub_b'\n"
   }
  ]
 },
 {
  "package": "permutations",
  "snippets": []
 },
 {
  "package": "pg-tsquery",
  "snippets": [
   {
    "description": "### Why?\nUsing pg's `to_tsquery` directly with user input can throw errors. `plainto_tsquery` sanitizes the user input, but it's very limited (it just puts an and between words), `websearch_to_tsquery` extends this behavior a little further only between double-quotes, with followedBy operator and negations.\nThis module allows customizable text-search operators: and, or, followedBy, not, prefix, parentheses, quoted text (same behavior than `websearch_to_tsquery`).\nSee the [options defaults values](index.js#L52-L61)\n### Usage\n",
    "snippet": "const tsquery = require('pg-tsquery')(/* options can be passed to override the defaults */);\n\npool.query('SELECT * FROM tabby WHERE to_tsvector(col) @@ to_tsquery($1)', [tsquery(str)])\n"
   }
  ]
 },
 {
  "package": "phpcbf-cli",
  "snippets": []
 },
 {
  "package": "piece-table",
  "snippets": [
   {
    "description": "    \n## Usage\n",
    "snippet": "const PieceTable = require(\"piece-table\");\n\nconst document = new PieceTable(\"This is a document with some text.\");\n\ndocument.insert(\"This is some more text to insert at offset 33.\", 33);\n\n// Delete the previously inserted sentence\ndocument.delete(79, 46);\n\nvar sequence = document.getSequence();\n// sequence == \"This is a document with some text.\"\n\nvar subString = document.stringAt(9, 8);\n// subString == \"document\"\n\n// PieceTable is an iterable:\nfor (let character of document) {\n    console.log(character);\n    // 'T', 'h', 'i', 's', ...\n}\n"
   }
  ]
 },
 {
  "package": "plainify-loader",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import json from \"json!plainify!./file.json\";\n// => returns file.json content as JSON parsed and plainified object\n"
   },
   {
    "description": "or you can use it with `yaml-loader`\n",
    "snippet": "import json from \"json!plainify!yaml!./file.yml\";\n// => returns file.yml content as YAML parsed and plainified object\n"
   }
  ]
 },
 {
  "package": "plugin-container",
  "snippets": [
   {
    "description": "# Usage\n",
    "snippet": "import { PluginContainer } from 'plugin-container';\nconst plugins = new PluginContainer();\nplugins.install({\n  name: 'secondPlugin',\n  priority: 2,\n  execute(input) {\n    return `avacadabra${input}flumflumblablasrpic`;\n  },\n});\nplugins.install({\n  name: 'first plugin',\n  priority: 1,\n  execute(input) {\n    return input.replace(/blabla/gi, 'loremipsum');\n  },\n});\n\nconst output = plugins.executeAll('hello world blabla world');\nconsole.log(output)\n// the output is the transformation, in other, of all the plugins, in this case:\n// 'avacadabrahello world loremipsum worldflumflumloremipsumsrpic'\n"
   }
  ]
 },
 {
  "package": "prometheus-log-client",
  "snippets": [
   {
    "description": "## How to use\nInstall from npm:\n",
    "snippet": "const PromLog = require('prometheus-log-client')\nconst promLog = new PromLog(6754)\n\npromLog.listen()\n\npromLog.createCounter(\n    /^(WARN|ERROR)/, // regex to match again\n    matches => { // how to process the matches\n        return {\n            name: 'fail_log_lines',\n            help: 'Count of total error and warn log lines',\n            labels: {\n                level: matches[1].toLowerCase()\n            }\n        }\n    }\n)\n\npromLog.watch('./test.log', '\\n', (err) => {\n    console.warn(err)\n})\n"
   }
  ]
 },
 {
  "package": "promise-battlenet-api",
  "snippets": []
 },
 {
  "package": "pssgo-reset.css",
  "snippets": []
 },
 {
  "package": "pundle-transformer-postcss",
  "snippets": []
 },
 {
  "package": "qb-react-growl",
  "snippets": []
 },
 {
  "package": "rccc",
  "snippets": []
 },
 {
  "package": "react-best-input",
  "snippets": []
 },
 {
  "package": "react-connex",
  "snippets": [
   {
    "description": "## Basic Usage\nAdd the `ConnexProvider to your root React Component;\n",
    "snippet": "import ConnexProvider from 'react-connex';\n\n<ConnexProvider\n  loading=\"Loading...\"\n  error={err => `Connection error: ${err}`}>\n  <App />\n</ConnexProvider>\n"
   },
   {
    "description": "Then in the component where you want to use Connex:\n",
    "snippet": "import { withConnex } from 'react-connex';\n\nclass MyComponent {\n  render() {\n    const { connex } = this.props;\n    const status = connex.thor.status;\n\n    return status.progress;\n  }\n}\n\nexport default withConnex(MyComponent);\n"
   },
   {
    "description": "You can use the injected `getNetwork` property to get network details:\n",
    "snippet": "import { withConnex } from 'react-connex';\n\nclass MyComponent {\n  render() {\n    const { getNetwork } = this.props;\n    getNetwork().then(network => {\n      return `${network.id} and ${network.name}`\n    });\n  }\n}\n\nexport default withConnex(MyComponent);\n"
   }
  ]
 },
 {
  "package": "react-google-map-image",
  "snippets": [
   {
    "description": "## Usage\nThis component is super easy to you\n",
    "snippet": "// Using ES5\nvar ReactGoogleMapImage = require('react-google-map-image'); \n\n// Using ES6\nimport ReactGoogleMapImage from 'react-google-map-image';\n\n// Example Usage\nconst googleMapApiConfig = { \n\tcenter: '32 wulemotu ajoke street akoka', \n\tsize: '500x240', \n\tzoom: '15',\n\tkey: {{ google-api-key }}, \n\tmaptype: 'roadmap'\n}\n<ReactGoogleMapImage \n    config={googleMapApiConfig}\n    wrapperStyle={{ width: '100%' }}\n    style={{ width: '100px', height: 'auto', border: '1px solid #ccc'}}\n/>\n"
   }
  ]
 },
 {
  "package": "react-native-document-scanner",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import React,{ Component } from 'react';\nimport { View, Image } from 'react-native';\n\nimport DocumentScanner from 'react-native-document-scanner';\n\nclass YourComponent extends Component {\n  render() {\n    return (\n      <View>\n        <DocumentScanner\n          useBase64\n          onPictureTaken={data => this.setState({\n            image: data.croppedImage,\n            initialImage: data.initialImage,\n            rectangleCoordinates: data.rectangleCoordinates,\n          })}\n          overlayColor=\"rgba(255,130,0, 0.7)\"\n          enableTorch={false}\n          brightness={0.3}\n          saturation={1}\n          contrast={1.1}\n          quality={0.5}\n          onRectangleDetect={({ stableCounter, lastDetectionType }) => this.setState({ stableCounter, lastDetectionType })}\n          detectionCountBeforeCapture={5}\n          detectionRefreshRateInMS={50}\n        />\n        <Image source={{ uri: `data:image/jpeg;base64,${this.state.image}`}} resizeMode=\"contain\" />\n      </View>\n    );\n  }\n}\n\n"
   },
   {
    "description": "## Manual capture\n- First get component ref\n",
    "snippet": "<DocumentScanner ref={(ref) => this.scanner = ref} />\n"
   },
   {
    "description": "- Then call :\n",
    "snippet": "this.scanner.capture();\n"
   }
  ]
 },
 {
  "package": "react-native-security-keyboard",
  "snippets": [
   {
    "description": "## Usage\nImport ``react-native-security-keyboard`` and wrap your content inside\nit:\n",
    "snippet": "import SecurityKeyboard from 'react-native-security-keyboard'\n"
   }
  ]
 },
 {
  "package": "react-native-sms-x",
  "snippets": [
   {
    "description": "## react-native-sms-x\n***\n**SendSMS**\n> ##### A react-native api to send SMS messages. It works only for android. This component used android native api to send sms and response a callback to react-native. This react-native component doesn't link to the mobile default messenger view. It will programmatically send the message to a phone number which is provided as a parameter and will response a callback with a string indicating message was sent or failure or no service.\n*usage*\n",
    "snippet": "import SendSMS from 'react-native-sms-x';\n// you can put any number as Id to identify which message being process\nSendSMS.send(123, \"+959254687254\", \"Hey.., this is me!\\nGood to see you. Have a nice day.\", (msg)=>{ alert(msg) });\n"
   },
   {
    "description": "**Example**\n",
    "snippet": "import React, { Component } from 'react';\nimport {\n  AppRegistry,\n  StyleSheet,\n  Text,\n  View,\n  TouchableOpacity,\n  ToastAndroid\n} from 'react-native';\nimport SendSMS from 'react-native-sms-x';\n\nexport default class RNSMS extends Component {\n  sendSMSFunction() {\n    SendSMS.send(123, \"+95912345678\", \"Hey.., this is me!\\nGood to see you. Have a nice day.\",\n      (msg)=>{\n        ToastAndroid.show(msg, ToastAndroid.SHORT);\n      }\n    );\n  }\n  render() {\n    return (\n      <View style={styles.container}>        \n        <TouchableOpacity style={styles.button} onPress={this.sendSMSFunction.bind(this)}>\n          <Text>Send SMS</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#F5FCFF',\n  },  \n  button: {\n    padding: 10,\n    borderWidth: .5,\n    borderColor: '#bbb',\n    margin: 10,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nAppRegistry.registerComponent('RNSMS', () => RNSMS);\n"
   }
  ]
 },
 {
  "package": "react-native-update-avocados",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import RNUpdateAvocados from 'react-native-update-avocados';\n\n// \nRNUpdateAvocados;\n"
   }
  ]
 },
 {
  "package": "react-native-viewport",
  "snippets": []
 },
 {
  "package": "react-sceneview",
  "snippets": []
 },
 {
  "package": "react-slick-cong",
  "snippets": [
   {
    "description": "### Starter Kit\nCheckout [yeoman generator](https://github.com/akiran/generator-react-slick) to quickly\nget started with react-slick.\n### Example\n",
    "snippet": "var React = require('react');\nvar Slider = require('react-slick');\n\nclass SimpleSlider extends React.Component {\n  render: function () {\n    var settings = {\n      dots: true,\n      infinite: true,\n      speed: 500,\n      slidesToShow: 1,\n      slidesToScroll: 1\n    };\n    return (\n      <Slider {...settings}>\n        <div><h3>1</h3></div>\n        <div><h3>2</h3></div>\n        <div><h3>3</h3></div>\n        <div><h3>4</h3></div>\n        <div><h3>5</h3></div>\n        <div><h3>6</h3></div>\n      </Slider>\n    );\n  }\n}\n"
   },
   {
    "description": "### Custom next/prev arrows\nTo customize the next/prev arrow elements, simply create new React components and set them\nas the values of nextArrow and prevArrow.\n",
    "snippet": "class LeftNavButton extends React.Component {\n  render() {\n    return <button {...this.props}>Next</button>\n  }\n}\n"
   },
   {
    "description": "To fix this issue add below snippet in test-setup.js\n",
    "snippet": "window.matchMedia = window.matchMedia || function() {\n    return {\n        matches : false,\n        addListener : function() {},\n        removeListener: function() {}\n    };\n};\n\n"
   }
  ]
 },
 {
  "package": "react-tab-factory",
  "snippets": []
 },
 {
  "package": "react-touch-zoom-pan-canvas",
  "snippets": []
 },
 {
  "package": "rebas",
  "snippets": [
   {
    "description": "## How\nRebas 使首屏渲染由服务器端完成，极大地降低了 SPA 首屏的白屏时间并解决了 SEO 问题。借助于 node ，服务器端的渲染逻辑不用额外开发，只需要对现有的 Saber 应用进行小幅修改就能让已有的逻辑同时运行在客户端与服务器端。\nSaber 所有的基础组件都进行了同构升级，确保能同时运行在客户端与服务器端。对于业务开发只需聚焦业务逻辑，不用特别关注运行平台，剩下的一切就交给 Saber 与 Rebas 吧～\n## Usage\n",
    "snippet": "/**\n * @file app.js 应用启动脚本\n */\nvar app = require('rebas');\n\n// 加载路由配置\napp.load(require('./lib/config'));\n\n// 启动服务\napp.start();\n"
   },
   {
    "description": "#### get(name)\n获取存储在 `配置文件夹` 下的 `JSON` 配置信息，`配置文件夹` 的默认路径为 `config`\n* **name** `{string}` 配置文件名称，不包含 `.json` 后缀名\n* _return_ `{*}` 配置信息\n例如需要获取 `config/app.json` 文件中的配置信息可以通过如下方式获得：\n",
    "snippet": "var app = require('rebas');\n\n// 获取 `config/app.json` 中的配置信息\napp.get('app');\n"
   }
  ]
 },
 {
  "package": "regexp-clone",
  "snippets": [
   {
    "description": "#regexp-clone\n==============\nClones RegExps with flag and `lastIndex` preservation.\n",
    "snippet": "const regexpClone = require('regexp-clone');\n\nconst a = /somethin/misguy;\nconsole.log(a.global); // true\nconsole.log(a.ignoreCase); // true\nconsole.log(a.multiline); // true\nconsole.log(a.dotAll); // true\nconsole.log(a.unicode); // true\nconsole.log(a.sticky); // true\n\nconst b = regexpClone(a);\nconsole.log(b.global); // true\nconsole.log(b.ignoreCase); // true\nconsole.log(b.multiline); // true\nconsole.log(b.dotAll); // true\nconsole.log(b.unicode); // true\nconsole.log(b.sticky); // true\n\nconst c = /hi/g;\nc.test('this string hi there');\nassert.strictEqual(c.lastIndex, 3);\n\nconst d = regexpClone(c);\nassert.strictEqual(d.lastIndex, 3);\nd.test('this string hi there');\nassert.strictEqual(d.lastIndex, 14);\nassert.strictEqual(c.lastIndex, 3);\n"
   }
  ]
 },
 {
  "package": "reiconify-cli",
  "snippets": [
   {
    "description": "## Configuration File\nAdd `reiconify.config.js`(optional) to your project:\n",
    "snippet": "module.exports = {\n  template: Function,\n  baseTemplate: Function,\n  filenameTemplate: Function,\n  defaultProps: {},\n  baseClassName: 'Icon',\n  baseDefaultProps: {\n    viewBox: '0 0 24 24',\n  },\n  svgoPlugins: [\n    {\n      removeAttrs: {attrs: ['fill', 'svg:(viewBox)']},\n    },\n  ],\n}\n"
   },
   {
    "description": "Import icons:\n",
    "snippet": "import * as Icons from 'my-icons'\n\n<Icons.Check />\n<Icons.ThumbUp size={20} fill={'#rgb'} />\n"
   },
   {
    "description": "## API Usage\n",
    "snippet": "import {transform} from 'reiconify'\n\nconst code = transform(svg)\n"
   }
  ]
 },
 {
  "package": "replace-constructor",
  "snippets": [
   {
    "description": "# replace-constructor\r\n\r\n**Replace/wrap a class constructor, while keeping the prototype, name and properties of the original class. Like extending a class, but suitable for use in decorators and such. Babel compatible. Adapted from [autocreate](https://github.com/pjeby/autocreate) - all credits to [@pjeby](https://github.com/pjeby).**\r\n\r\n[![npm status](http://img.shields.io/npm/v/replace-constructor.svg?style=flat-square)](https://www.npmjs.org/package/replace-constructor) [![Dependency status](https://img.shields.io/david/vweevers/replace-constructor.svg?style=flat-square)](https://david-dm.org/vweevers/replace-constructor)\r\n\r\n## example\r\n\r\n\r\n",
    "snippet": "const replace = require('replace-constructor')\r\n\r\nclass Original {\r\n  constructor(x, y) {\r\n    // ..\r\n  }\r\n}\r\n\r\nconst Wrapped = replace(Original, function(x, y){\r\n  Original.call(this, x, y)\r\n})\r\n"
   }
  ]
 },
 {
  "package": "replace-in",
  "snippets": [
   {
    "description": "\r\n",
    "snippet": "const replace = require('replace-in')\r\n\r\n// let's create some phrases to replace it in our file.\r\nconst phrase1 = {\r\n  // regex\r\n  regex:/old/ig,\r\n  // replace\r\n  replace:'new'\r\n}\r\n\r\n// and we have to replace more.\r\nconst phrase1 = {\r\n  // regex\r\n  regex:'second',\r\n  // replace\r\n  replace:'third'\r\n}\r\n\r\nreplace('/path1/path2/fileName', [phrase1, phrase1], (err, report) => {\r\n  //\r\n  [\r\n    {\r\n      isChanged: true,\r\n      regex:/old/ig,\r\n      replace:'new'\r\n    },\r\n    {\r\n      isChanged: false, // not found so it wasn't changed\r\n      regex:'second',\r\n      replace:'third'\r\n    },\r\n   ]\r\n  //\r\n});\r\n"
   },
   {
    "description": "Or you can check specific phrase result.\r\n\r\n",
    "snippet": "replace('/path1/path2/fileName', [ph0, ph1, p2, ph3], (err, report) => {\r\n  if(report[2].isChanged){\r\n    console.log('p2 was found and changed');\r\n  } else {\r\n    console.log('not found');\r\n  }\r\n});\r\n"
   }
  ]
 },
 {
  "package": "resolve-bin",
  "snippets": [
   {
    "description": "# resolve-bin [![build status](https://secure.travis-ci.org/thlorenz/resolve-bin.png)](http://travis-ci.org/thlorenz/resolve-bin)\nResolves the full path to the bin file of a given package by inspecting the `\"bin\"` field in its package.json.\n",
    "snippet": "var resolveBin = require('resolve-bin');\n\n// package.json: \"bin\": \"bin/tap.js\"\nresolveBin('tap', function (err, bin) {\n  if (err) return console.error(err);\n  console.log(bin);  \n});\n\n// => [..]/resolve-bin/node_modules/tap/bin/tap.js\n"
   }
  ]
 },
 {
  "package": "resolve-subscribe-mqtt",
  "snippets": [
   {
    "description": "# **resolve-subscribe-mqtt**\n[![npm version](https://badge.fury.io/js/resolve-subscribe-mqtt.svg)](https://badge.fury.io/js/resolve-subscribe-mqtt)\nThis package is a `resolve-redux` adapter used to subscribe to events via an [MQTT](https://github.com/mqttjs/MQTT.js) protocol.\n#### Client Side\n",
    "snippet": "import createClientAdapter from 'resolve-subscribe-mqtt';\n\n(async () => {\n  const adapter = createClientAdapter({ origin, rootPath, url, appId, onEvent })\n  \n  await adapter.init()\n})() \n"
   },
   {
    "description": "#### Server Side\n",
    "snippet": "import createServerAdapter from 'resolve-subscribe-mqtt';\n\n(async () => {\n  const adapter = createServerAdapter({ server, getRootBasedUrl, pubsubManager, appId })\n  \n  await adapter.init()\n})() \n"
   }
  ]
 },
 {
  "package": "rocketz-cdn-wantu",
  "snippets": []
 },
 {
  "package": "rs.js",
  "snippets": []
 },
 {
  "package": "rtpengine-client",
  "snippets": [
   {
    "description": "# rtpengine-client [![Build Status](https://travis-ci.org/davehorton/rtpengine-client.svg?branch=master)](http://travis-ci.org/davehorton/rtpengine-client) [![NPM version](https://badge.fury.io/js/rtpengine-client.svg)](http://badge.fury.io/js/rtpengine-client) [![Coverage Status](https://coveralls.io/repos/github/davehorton/rtpengine-client/badge.svg?branch=master)](https://coveralls.io/github/davehorton/rtpengine-client?branch=master)\nA Promises-based nodejs client for accessing rtpengine via ng protocol\n## Usage\n",
    "snippet": "const Client = require('rtpengine-client').Client ;\nconst client = new Client() ;\n\nclient.ping(22222, '39.194.250.246')\n  .then((res) => {\n    console.log(`received ${JSON.stringify(res)}`); // {result: 'pong'}\n  })\n  .catch((err) => {\n    console.log(`Error: ${err}`);\n  }\n}\n"
   },
   {
    "description": "## Constructing a client \n",
    "snippet": "client = new Client() ;  // listen on any port and default address\n// or..\nclient = new Client(9055);    // listen on a specific port\n// or..\nclient = new Client(9055, '192.168.1.10'); // listen on a specific port and address\n// or..\nclient = new Client({port: 9055, host: '192.168.1.10'}); // listen on a specific port and address\n// or..\nclient = new Client({timeout: 1500}); // wait a max of 1500 ms for each command reply, throw error on timeout\n// or..\nclient = new Client({rejectOnFailure: true}); \n// reject promise on any command if response from rtpengine has error \n// default behavior is to resolve with any response from rtpengine, even errors\n"
   }
  ]
 },
 {
  "package": "rx.observable.combine-template",
  "snippets": [
   {
    "description": "### Basics\n",
    "snippet": "import combineTemplate from 'rx.observable.combine-template';\nimport * as Rx from 'rx';\n\nlet subject1 = new Rx.Subject();\nlet subject2 = new Rx.Subject();\n\ncombineTemplate({\n  foo : 'bar',\n  baz : {\n    foo : ['bar', subject1 'qux']\n  },\n  qux : {\n    foo : {\n     foo : 'bar'\n     baz : subject2\n    }\n  }\n}).subscribe((value)=> {\n  console.log(value);\n  /* === output ===\n  {\n    foo : 'bar',\n    baz : {\n      foo : ['bar', 'BAZ' 'qux']\n    },\n    qux : {\n      foo : {\n       foo : 'bar'\n       baz : 'QUX'\n      }\n    }\n  }\n  */\n});\n\nsubject1.onNext('BAZ');\nsubject2.onNext('QUX');\n"
   },
   {
    "description": "### with React\nState is updated automatically receives a value from the observables.\n",
    "snippet": "componentWillMount() {\n  combineTemplate({\n    items : store.itemsObservable$,\n    count : store.itemsObservable$.map((items) => items.length)\n  }).subscribe(this.setState.bind(this));\n}\n"
   }
  ]
 },
 {
  "package": "rx-lite",
  "snippets": []
 },
 {
  "package": "savey-wavey",
  "snippets": []
 },
 {
  "package": "scaffold-static",
  "snippets": []
 },
 {
  "package": "scalajs-cli-test4",
  "snippets": []
 },
 {
  "package": "scq-input",
  "snippets": []
 },
 {
  "package": "search_by_tags",
  "snippets": [
   {
    "description": "# Search by tag/s (search_by_tags)\n## How to use\n",
    "snippet": "const { searchByTags } = require('search_by_tags');\n// Parse your query url to this => ['eq:a|b', 'eq:c', 'not:d']\n// Meaning:\n// - tag must contain `c`\n// - tag must contains `a` or `b`\n// - tag must NOT contains `d`\nconst res = searchByTags(['eq:a|b', 'eq:c', 'not:d']);\n// req.eqAnd = ['c']\n// req.eqOr = ['a', 'b']\n// req.notEqAnd = ['d']\n"
   }
  ]
 },
 {
  "package": "seneca-perm",
  "snippets": []
 },
 {
  "package": "session-rememberme",
  "snippets": []
 },
 {
  "package": "shift-refactor",
  "snippets": [
   {
    "description": "## Usage\nStart by instantiating a RefactorSession with a Shift-format JavaScript AST.\n",
    "snippet": "const { RefactorSession } = require('shift-refactor');\nconst { parseScript } = require('shift-parser');\n\nconst ast = parseScript(javaScriptSource);\n\nconst refactor = new RefactorSession(ast);\n"
   },
   {
    "description": "By default the RefactorSession cleans up after all major tree-modifying actions. This can be a serious\nperformance drain when you are running lots of small changes on a big tree.\nYou can pass `{ autoCleanup: false }` to the constructor to turn this off and then manually call `.cleanup()` at a time you choose.\n",
    "snippet": "const refactor = new RefactorSession(ast, { autoCleanup: false });\n\n// lots of work\n\nrefactor.cleanup();\n"
   },
   {
    "description": "### .rename(query | nodes, newName)\nRenames nodes to `newName`\n",
    "snippet": "refactor.rename(`IdentifierExpression[name=\"oldName\"]`, 'newName');\n"
   },
   {
    "description": "From\n",
    "snippet": "function oldName(){}\noldName();\n"
   },
   {
    "description": "To \n",
    "snippet": "function newName(){}\nnewName();\n"
   },
   {
    "description": "### delete\nDeletes nodes\n",
    "snippet": "refactor.delete(`FunctionDeclaration[name.name=\"newName\"]`);\n"
   },
   {
    "description": "From\n",
    "snippet": "function newName(){}\nnewName();\n"
   },
   {
    "description": "To \n",
    "snippet": "// To\nnewName();\n"
   },
   {
    "description": "### .replace(query | nodes, source | nodes | callback(node))\nReplaces nodes with the passed program or nodes. If this is passed a callback then the callback will be \nexecuted with the node passed as a parameter and the return value being the replacement value.\n",
    "snippet": "refactor.replace(`IdentifierExpression[name.name=\"someVar\"]`, `console.log(\"Hi\")`);\n"
   },
   {
    "description": "From\n",
    "snippet": "someVar;\n"
   },
   {
    "description": "To \n",
    "snippet": "console.log(\"Hi\");\n"
   },
   {
    "description": "### .replaceRecursive(query, source | nodes | callback(node))\nSame as .replace() except will be continually called until `query` returns no more nodes. Useful for sweeping refactors of a consistent format.\n",
    "snippet": "this.replaceRecursive(\n  `ComputedMemberExpression[expression.type=\"LiteralStringExpression\"]`, \n  node => {\n      return new Shift.StaticMemberExpression({\n        object: node.object,\n        property: node.expression.value\n      });\n    }\n);\n"
   },
   {
    "description": "From\n",
    "snippet": "object[\"property1\"][\"property2\"];\n"
   },
   {
    "description": "To \n",
    "snippet": "object.property1.property2;\n"
   },
   {
    "description": "### .insertBefore(query | nodes, source | callback(node))\nInserts statements before target statement. Callback can return source or Shift nodes.\n",
    "snippet": "refactor.insertBefore(\n  `ExpressionStatement[expression.type=\"CallExpression\"]`, \n  node => `console.log(\"Calling ${node.expression.callee.name}()\")`\n);\n"
   },
   {
    "description": "From\n",
    "snippet": "function someFunc(){}\nsomeFunc();\notherFunc();\n"
   },
   {
    "description": "To \n",
    "snippet": "function someFunc(){}\nconsole.log(\"Calling someFunc()\");\nsomeFunc();\nconsole.log(\"Calling otherFunc()\");\notherFunc();\n"
   },
   {
    "description": "### .insertAfter(query | nodes, source | callback(node))\nSame as insertBefore except it inserts after the target statements.\n",
    "snippet": "refactor.insertAfter(\n  `ExpressionStatement[expression.type=\"CallExpression\"]`, \n  node => `console.log(\"Called ${node.expression.callee.name}()\")`\n);\n"
   },
   {
    "description": "From\n",
    "snippet": "function someFunc(){}\nsomeFunc();\notherFunc();\n"
   },
   {
    "description": "To \n",
    "snippet": "function someFunc(){}\nsomeFunc();\nconsole.log(\"Called someFunc()\");\notherFunc();\nconsole.log(\"Called otherFunc()\");\n"
   },
   {
    "description": "### .convertComputedToStatic()\nTransforms computed properties and the like to static properties. Meant to be used near the end of a refactor session to clean up the resulting code\nFrom\n",
    "snippet": "const loc = window[\"document\"][\"location\"];\n"
   },
   {
    "description": "To \n",
    "snippet": "const loc = window.document.location;\n"
   },
   {
    "description": "### .expandBoolean()\nTurns !0 and !1 into their respective boolean values;\nFrom\n",
    "snippet": "if (!0 || !1) {}\n"
   },
   {
    "description": "To \n",
    "snippet": "if (true || false) {}\n"
   },
   {
    "description": "### .normalizeIdentifiers() \nTurns every identifier into a simple identifier unique for the entire program. This greatly simplifies query-ability and \nalso normalizes code that dynamically updates variable names over time.\nFrom\n",
    "snippet": "const arst=1, aryl=2; \nvar aiai; \nfunction foie() {\n  const arst=2;\n  arst++;\n}\nfoie();\n"
   },
   {
    "description": "To \n",
    "snippet": "const c=1, d=2; \nvar a; \nfunction b() {\n  const e=2;\n  e++\n}\nb();\n"
   },
   {
    "description": "## Example\nAssuming an input file named `obfuscated.js` containing this:\n",
    "snippet": "var a=['\\x74\\x61\\x72\\x67\\x65\\x74','\\x73\\x65\\x74\\x54\\x61\\x72\\x67\\x65\\x74','\\x77\\x6f\\x72\\x6c\\x64','\\x67\\x72\\x65\\x65\\x74','\\x72\\x65\\x61\\x64\\x65\\x72'];var b=function(c,d){c=c-0x0;var e=a[c];return e;};(function(){class c{constructor(d){this[b('0x0')]=d;}['\\x67\\x72\\x65\\x65\\x74'](){console['\\x6c\\x6f\\x67']('\\x48\\x65\\x6c\\x6c\\x6f\\x20'+this[b('0x0')]);}[b('0x1')](e){this['\\x74\\x61\\x72\\x67\\x65\\x74']=e;}}const f=new c(b('0x2'));f[b('0x3')]();f[b('0x1')](b('0x4'));f[b('0x3')]();}());\n"
   },
   {
    "description": "You can use the following program to deobfuscate it:\n",
    "snippet": "const { RefactorSession } = require('shift-refactor');\nconst { parseScript } = require('shift-parser');\nconst Shift = require('shift-ast');\n\nconst fileContents = require('fs').readFileSync('./original-obfuscated.js', 'utf8');\n\nconst tree = parseScript(fileContents);\n\nconst refactor = new RefactorSession(tree);\n\nconst strings = refactor.query(`Script > :first-child ArrayExpression > .elements`);\n\nconst destringifyDeclarator = refactor.query(`VariableDeclarator[binding.name=\"b\"][init.params.items.length=2]`);\n\nrefactor.rename(destringifyDeclarator, 'destringify');\n\nconst destringifyOffset = refactor.queryFrom(destringifyDeclarator, `BinaryExpression > LiteralNumericExpression`);\n\nconst findIndex = (c, d) => c - destringifyOffset[0].value;\n\nrefactor.replace(\n  `CallExpression[callee.name=\"destringify\"]`, \n  node => new Shift.LiteralStringExpression({value: strings[findIndex(node.arguments[0].value)].value})\n)\n\nrefactor.delete(`[binding.name=\"a\"]`)\nrefactor.delete(`[binding.name=\"destringify\"]`)\n\nrefactor.convertComputedToStatic();\n\nconsole.log(refactor.print());\n"
   },
   {
    "description": "resulting in:\n",
    "snippet": "(function () {\n  class c {\n    constructor(d) {\n      this.target = d;\n    }\n    greet() {\n      console.log(\"Hello \" + this.target);\n    }\n    setTarget(e) {\n      this.target = e;\n    }\n  }\n  const f = new c(\"world\");\n  f.greet();\n  f.setTarget(\"reader\");\n  f.greet();\n}());\n"
   }
  ]
 },
 {
  "package": "shim-require",
  "snippets": [
   {
    "description": "# shim-require\nPre-process javascript files as they get `require`d\n",
    "snippet": "const shimRequire = require('shim-require');\nshimRequire((content, filename) => {\n  // return modified content\n  return `console.log(\"loading ${filename}\");\\n${content}`;\n});\n\nrequire('foo'); // `loading /path/to/foo`\n"
   },
   {
    "description": "Can also modify json files\n",
    "snippet": "shimRequire(content => content.replace(/foo/g, 'bar'), 'json');\nrequire('foo.json'); // { \"a\": \"bar\" }\n"
   }
  ]
 },
 {
  "package": "shitpost-generator",
  "snippets": [
   {
    "description": "# Points\n* The image need points in which it will follow to draw on top of the background\n* Each Box object have a `points` parameter which is an Array of arrays\n![points](https://i.imgur.com/m4ruZah.png)\nFor example, yellow, you need to provide X and Y of it:\n",
    "snippet": "new Box([\n    [yellow.x, yellow.y], [red.x, red.y], // here you provide the rest of the points\n    [blue.x, blue.y], [green.x, green.y]              // for each point of the box\n])\n"
   }
  ]
 },
 {
  "package": "show-me-the-weather",
  "snippets": []
 },
 {
  "package": "showdown-target-blank",
  "snippets": [
   {
    "description": "### Enabling the extension\nAfter including the extension in your application, you just need to enable it in showdown.\n    var converter = new showdown.Converter({extensions: ['targetblank']});\n## Example\n",
    "snippet": "var converter = new Showdown.converter({extensions: ['targetblank']}),\n    input = 'This is a [link](http://www.example.com)',\n    html = converter.makeHtml(input);\n    console.log(html);\n"
   }
  ]
 },
 {
  "package": "simple-mailer",
  "snippets": []
 },
 {
  "package": "simple-os-platform",
  "snippets": [
   {
    "description": "## Usage\r\n\r\nHere's an example of a component that renders a shortcut phrase based off the user's operating system:\r\n\r\n",
    "snippet": "// ES6/ES7/ESNext\r\nimport { getOS, isMac, isNotMac } from 'simple-os-platform'\r\n\r\ngetOS(); // returns your Operating System Eg. Mac, Windows etc (see list below)\r\nisMac(); // returns true if your operating system is a Mac\r\nisNotMac(); // returns false if your operating system is a Mac\r\n\r\n// CommonJS\r\nvar simpleOSPlatform = require('simple-os-platform');\r\n\r\nsimpleOSPlatform.getOS(); // returns your Operating System Eg. Mac, Windows etc (see list below)\r\nsimpleOSPlatform.isMac(); // returns true if your operating system is a Mac\r\nsimpleOSPlatform.isNotMac(); // returns false if your operating system is a Mac\r\n"
   }
  ]
 },
 {
  "package": "simple-toaster",
  "snippets": [
   {
    "description": "SimpleToaster is primarily ES6 module. See it in action:\n",
    "snippet": "import SimpleToaster from \"simple-toaster\"\n\nSimpleToaster('success', 'Hello Toaster!')\n"
   },
   {
    "description": "Parameters:\n",
    "snippet": "window.toaster = SimpleToaster\n\nwindow.toaster(\n  'error',    // Toaster style type. Pre-defined: error, warning or success\n  'message',  // Message\n  false       // Timeout in ms (default: 5000)\n)\n\n"
   },
   {
    "description": "Import the style\n",
    "snippet": "@import ~simple-toaster/src/simple-toaster // or 'simple-toaster/dist/simple-toaster.min.css'\n"
   }
  ]
 },
 {
  "package": "sinantica-app",
  "snippets": []
 },
 {
  "package": "sj-react-component-module",
  "snippets": []
 },
 {
  "package": "slush-prototyper",
  "snippets": []
 },
 {
  "package": "smaas-swagger-spec",
  "snippets": []
 },
 {
  "package": "smart-ads-kiosk",
  "snippets": []
 },
 {
  "package": "soc-core",
  "snippets": [
   {
    "description": "##### Add some javascript\nUse the features of webpack to start quickly with your file. The idea is that you import the soc-core javascript files which were also bundled in advance. This is quite simple and only requires the following line\n",
    "snippet": "import soc from 'soc-core';\n"
   },
   {
    "description": "##### Setup webpack\nCreate a webpack.config.js file in the root of your project and paste in the following contents\n",
    "snippet": "var extractText = require('extract-text-webpack-plugin');\n\nmodule.exports = {\n    entry: {\n        app: './src/javascripts/test',\n        css: './src/stylesheets/test.scss'\n    },\n\n    output: {\n        filename: './dist/[name].bundle.js'\n    },\n    devtool: 'source-map',\n    module: {\n        loaders: [{\n            test: /\\.scss$/,\n            loader: extractText.extract('css-loader!sass-loader?sourceMap')\n        }]\n    },\n\n    plugins: [\n        new extractText({\n            filename: 'dist/test.css',\n            disable: false,\n            allChunks: true\n        }),\n    ]\n};\n"
   }
  ]
 },
 {
  "package": "socketclient-vue",
  "snippets": []
 },
 {
  "package": "soft-angular-mask",
  "snippets": []
 },
 {
  "package": "spencer-ui",
  "snippets": []
 },
 {
  "package": "speriment",
  "snippets": []
 },
 {
  "package": "split-if-boxed-bug-x",
  "snippets": [
   {
    "description": "### `module.exports(value)` ⇒ <code>\\*</code> ⏏\nThis method tests if a value is a string with the boxed bug; splits to an\narray for iteration; otherwise returns the original value.\n**Kind**: Exported function  \n**Returns**: <code>\\*</code> - An array or characters if value was a string with the boxed bug;\notherwise the value.\n| Param | Type            | Description             |\n| ----- | --------------- | ----------------------- |\n| value | <code>\\*</code> | The value to be tested. |\n**Example**\n",
    "snippet": "import splitIfBoxedBug from 'split-if-boxed-bug-x';\n\n// No boxed bug\nconsole.log(splitIfBoxedBug('abc')); // 'abc'\n\n// Boxed bug\nconsole.log(splitIfBoxedBug('abc')); // ['a', 'b', 'c']\n"
   }
  ]
 },
 {
  "package": "stats-filelist",
  "snippets": [
   {
    "description": "# statsFilelist\n[![npm](https://img.shields.io/npm/v/stats-filelist.svg)](https://www.npmjs.com/package/stats-filelist) [![GitHub issues](https://img.shields.io/github/issues/anseki/stats-filelist.svg)](https://github.com/anseki/stats-filelist/issues) [![dependencies](https://img.shields.io/badge/dependencies-No%20dependency-brightgreen.svg)](package.json) [![license](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE-MIT)\nGet a list of files and directories with `Stats` of each item. And filter the list with evaluating path, path pattern, type, size, modified time, and more.\nBy default, statsFilelist gets all files and directories under specific directories recursively, and it returns an Array that includes the expanded [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) objects of each item.  \nThat expanded `fs.Stats` object has additional properties such as `fullPath`, `extension`, etc.. (See [`Stats` object](#stats-object).)  \nThe got `Stats` objects will be useful more than the path list because you are supposed to do something with those files or directories after getting those.\nIt returns the filtered list if you want. That filter evaluates that `Stats` object by using flexible ways such as RegExp, callback, etc..  \nAnd also, the filter can control the behavior of statsFilelist. For example, it make statsFilelist stop getting files any more when the file you want was found out.\n",
    "snippet": "var filelist = require('stats-filelist');\n\n// Asynchronous method:\nfilelist.get(['dir-1', 'dir-2'], function(list) {\n  console.log(list);\n}, /\\.js$/i); // Get JavaScript files.\n// `extension` property also can be used.\n\n// Synchronous method:\nvar list = filelist.getSync(['dir-1', 'dir-2'],\n  function(stats) { return stats.size > 1024; }); // Get 1KB+ files.\nconsole.log(list);\n"
   },
   {
    "description": "## Methods\n### `get`, `getSync`\n",
    "snippet": "filelist.get(path, callback[, options])\n"
   },
   {
    "description": "## Methods\n### `get`, `getSync`\n",
    "snippet": "filelist.get(path, callback[, filter[, recursive]])\n"
   },
   {
    "description": "## Methods\n### `get`, `getSync`\n",
    "snippet": "list = filelist.getSync(path[, options])\n"
   },
   {
    "description": "## Methods\n### `get`, `getSync`\n",
    "snippet": "list = filelist.getSync(path[, filter[, recursive]])\n"
   },
   {
    "description": "`get` is asynchronous method, and `getSync` is synchronous method.\n`path` argument is a string as the path of target directory, or an Array that includes those of multiple target directories. The default value of `path` argument is `.` (i.e. current working directory).\n`callback` argument that is specified to `get` method is a function that is called with `list` Array when processing finished. That is same as `list` Array that is returned by `getSync` method.\nBy default, the `list` Array includes [`Stats` object](#stats-object)s. Also, what it includes can be specified via [`listOf`](#listof) option.\nFor example:\n",
    "snippet": "console.log('File name: ' + list[3].name + ' Updated: ' + list[3].mtime);\n"
   },
   {
    "description": "`options` argument is an Object that has `filter` property, and more. (See [Options](#options).)  \n`filter` and `recursive` arguments are same as [`filter`](#filter) and [`recursive`](#options-recursive) option.  \nFor example, the following 2 codes work same:\n",
    "snippet": "filelist.get(path, callback, wanted);\n"
   },
   {
    "description": "`options` argument is an Object that has `filter` property, and more. (See [Options](#options).)  \n`filter` and `recursive` arguments are same as [`filter`](#filter) and [`recursive`](#options-recursive) option.  \nFor example, the following 2 codes work same:\n",
    "snippet": "filelist.get(path, callback, { filter: wanted });\n"
   },
   {
    "description": "#### RegExp\nIf the full path of the current item matches this RegExp, that item is included to the list.\nFor example, the PNG files are listed ([`extension`](#extension) property of [`Stats` object](#stats-object) also can be used.):\n",
    "snippet": "list = filelist.getSync('./media', /\\.png$/i);\n"
   },
   {
    "description": "For example, the files and directories except `debug.log` and `package.json` are listed:\n",
    "snippet": "list = filelist.getSync('./repo',\n  /^(?!.*[\\/\\\\](?:debug\\.log|package\\.json)$).+$/);\n"
   },
   {
    "description": "For example, the files and directories except files starting with a dot are listed:\n",
    "snippet": "list = filelist.getSync('./project', /^(?!.*[\\/\\\\]\\.[^\\/\\\\]*$).+$/);\n"
   },
   {
    "description": "For example, the files and directories under `css` directories are listed:\n",
    "snippet": "list = filelist.getSync('./websites', /[\\/\\\\]css[\\/\\\\]/i);\n"
   },
   {
    "description": "#### string\nIf the full path of the current item includes this string, that item is included to the list.  \n`/` and `\\` are replaced to the platform-specific file separator before this is used. In Windows, the string comparisons are case-insensitive (e.g. it  considers that `file.txt` is included in `FooFile.TXT`).\nFor example, the files and directories under `node_modules` directories are listed:\n",
    "snippet": "list = filelist.getSync('./dev', '/node_modules/');\n"
   },
   {
    "description": "For example, the files and directories starting with a dot are listed:\n",
    "snippet": "list = filelist.getSync('./project', '/.');\n"
   },
   {
    "description": "#### function\nThis function decides whether the current item is included to the list, and also, it can control the behavior of statsFilelist.  \nIt is called with the [`Stats` object](#stats-object) of the current item.\n##### When it returns a boolean\n",
    "snippet": "include = filter(stats)\n"
   },
   {
    "description": "If this function returns a `true`, the current item is included to the list. If it returns a `false`, the current item is not included to the list.\nFor example, the directories are listed:\n",
    "snippet": "list = filelist.getSync(null, function(stats) {\n  return stats.isDirectory(); // Use `stats.isFile()` if you want files.\n});\n"
   },
   {
    "description": "For example, the files and directories that were modified recently are listed:\n",
    "snippet": "list = filelist.getSync('./docs', function(stats) {\n  return stats.mtime > yesterday;\n});\n"
   },
   {
    "description": "For example, the `index.html` files are listed:\n",
    "snippet": "list = filelist.getSync('./public_html', function(stats) {\n  return stats.name === 'index.html';\n});\n"
   },
   {
    "description": "##### When it returns an Object\n",
    "snippet": "object = filter(stats)\n"
   },
   {
    "description": "###### `include`\nIf `true` is specified to this property, the current item is included to the list. If `false` is specified to it, the current item is not included to the list.\nFor example, the files are listed:\n",
    "snippet": "list = filelist.getSync(null, function(stats) {\n  return {\n    include: stats.isFile()\n  };\n});\n"
   },
   {
    "description": "###### `exit`\nIf `true` is specified to this property, statsFilelist exits from current directory after processing of current item, and the remaining items in current directory are not processed.  \n*Note that the \"current directory\" means the parent directory of current item, it is not the directory current item points.*  \nThis is used to finish the method fast.\nFor example, it does not have to look for the file any more in that directory if it found out `public_html`, because any more `public_html` are clearly not existing under that directory tree:\n",
    "snippet": "list = filelist.getSync('./websites', function(stats) {\n  return stats.name === 'public_html' ? {\n      include: true,\n      exit: true\n    } : false; // Others are not listed.\n});\n"
   },
   {
    "description": "###### `stop`\nIf `true` is specified to this property, statsFilelist stops getting the items after processing of current item, and it returns the list that includes the items that were added until now, and the all remaining items are not processed.  \nThis is used to finish the method fast when you want to find out an only one file in the target path.\nFor example, it does not have to look for the file any more if it found out `foo.py`, because any more `foo.py` are clearly not existing under that project directory tree:\n",
    "snippet": "list = filelist.getSync('./project', function(stats) {\n  return stats.name === 'foo.py' ? {\n      include: true,\n      stop: true\n    } : false; // Others are not listed.\n});\n"
   },
   {
    "description": "###### <a name=\"filter-recursive\"></a>`recursive`\n*This is not [`recursive`](#options-recursive) option.*\nThis property overrides [`recursive`](#options-recursive) option temporarily.  \nWhen the current item is directory, if `true` is specified to this property, statsFilelist gets the items in that directory even if `false` is specified to `recursive` option. If `false` is specified to it, statsFilelist does not get the items in that directory even if `true` is specified to `recursive` option.  \nThis is used to finish the method fast.\nFor example, it does not have to list the files and directories in `node_modules` directory:\n",
    "snippet": "list = filelist.getSync('./websites', function(stats) {\n  return stats.name === 'node_modules' ? {\n      include: false,\n      recursive: false\n    } : true; // Others are listed.\n});\n"
   },
   {
    "description": "### `listOf`\n*Type:* string  \n*Default:* `undefined`\nBy default, statsFilelist returns the list of [`Stats` object](#stats-object)s. If the name of property or method of `Stats` object is specified to this option, it returns the list of those values. That is value that was returned by specific method if the name of method is specified.\nFor example, the list of full paths of each file and directory is returned:\n",
    "snippet": "list = filelist.getSync(null, { listOf: 'fullPath' });\n"
   },
   {
    "description": "For example, the list of names of each file and directory is returned:\n",
    "snippet": "list = filelist.getSync(null, { listOf: 'name' });\n"
   },
   {
    "description": "For example, the list of booleans to indicate whether it is file (return value of `isFile` method) of each item is returned:\n",
    "snippet": "list = filelist.getSync(null, { listOf: 'isFile' });\n"
   }
  ]
 },
 {
  "package": "string-length-cli",
  "snippets": []
 },
 {
  "package": "stuwebfk",
  "snippets": []
 },
 {
  "package": "swordjs",
  "snippets": []
 },
 {
  "package": "tamvan-meter",
  "snippets": []
 },
 {
  "package": "tcomb-react-bootstrap",
  "snippets": [
   {
    "description": "# Constraint examples\nSome constraints among others enforced by this library:\n- `Alert`: `onDismiss` and `dismissAfter` must either or neither passed\n- `ButtonGroup`: can have only `Button` children\n- `Col`: props must be integers between 1 and 12\n- `Glyphicon`: can't have children\n- `Nav`: bsStyle must be one of `pills`, `tabs`\nFor now the constraints are quite relaxed in order to allow an easier demo, however they can be tighten up to the point of accepting \nonly whitelisted props.\n# Usage\n",
    "snippet": "/** @jsx React.DOM */\n// development\nvar Alert = require('tcomb-react-bootstrap/Alert');\n// production\n// var Alert = require('react-bootstrap/Alert');\n\nvar good = (\n  <Alert bsStyle=\"warning\">\n    <strong>Holy guacamole!</strong>\n  </Alert>\n); // => ok!\n\nvar bad = (\n  <Alert bsStyle=\"warn\"> // <-- should be \"warning\"\n    <strong>Holy guacamole!</strong>\n  </Alert>\n); // => fail! debugger kicks in\n"
   }
  ]
 },
 {
  "package": "test_cc11",
  "snippets": []
 },
 {
  "package": "tfh-api",
  "snippets": []
 },
 {
  "package": "timagic",
  "snippets": []
 },
 {
  "package": "timeandreturn",
  "snippets": [
   {
    "description": "# Usage\nSay you have a section of code\n",
    "snippet": "// ...\nlet a = foo();\nlet b = bar();\nreturn foobar(a, b);\n"
   },
   {
    "description": "You want to know how long these three lines of code take to run. You can wrap this block of code with `timeAndReturn`.\n",
    "snippet": "const timeAndReturn = require('timeandreturn').timeAndReturn;\n\n// ...\nreturn timeAndReturn((elapsedTime) => {\n    // Do something with elapsedTime\n}, () => {\n    let a = foo();\n    let b = bar();\n    return foobar(a, b);\n});\n"
   },
   {
    "description": "The return value of `foobar` is returned by `timeAndReturn`, so the logic of the program is unchanged, but `elapsedTime` is captured.\nIf you only want to log `elapsedTime`, a `logTimeAndReturn` variant is provided.\n",
    "snippet": "const logTimeAndReturn = require('timeandreturn').logTimeAndReturn;\n\n// ...\n// Prints: \"() => { let a = foo(); let b = bar(); return f ...\" ran for 0.00014059999999881256 seconds\nreturn logTimeAndReturn(() => {\n    let a = foo();\n    let b = bar();\n    return foobar(a, b);\n});\n"
   },
   {
    "description": "## Async\nIf `block` returns a `Promise`, `callback` is called when that `Promise` resolves.\n",
    "snippet": "const logTimeAndReturn = require('timeandreturn').logTimeAndReturn;\n\n// ...\n// Prints: \"async () => { let a = foo(); let b = bar(); aw ...\" ran for 1.000469800000079 seconds\nreturn logTimeAndReturn(async () => {\n    let a = foo();\n    let b = bar();\n    await waitFor1Second();\n    return foobar(a, b);\n});\n"
   }
  ]
 },
 {
  "package": "tinydoc-theme-gitbooks",
  "snippets": [
   {
    "description": "And in your `tinydoc.conf.js`:\n",
    "snippet": "exports.plugins = [\n  require('tinydoc-theme-gitbooks')()\n];\n\n// you should probably turn on the collapsible sidebar setting:\nexports.collapsibleSidebar = true;\n\n// and restrict the sidebar resizing:\nexports.resizableSidebar = false;\n"
   }
  ]
 },
 {
  "package": "tlsa",
  "snippets": []
 },
 {
  "package": "tonyharkimage",
  "snippets": []
 },
 {
  "package": "tre-videos",
  "snippets": []
 },
 {
  "package": "twitch-webhooks",
  "snippets": []
 },
 {
  "package": "typeface-baloo-tamma",
  "snippets": [
   {
    "description": "## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n",
    "snippet": "// Load Baloo Tamma typeface\nrequire('typeface-baloo-tamma')\n"
   }
  ]
 },
 {
  "package": "typeface-diplomata",
  "snippets": [
   {
    "description": "## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n",
    "snippet": "// Load Diplomata typeface\nrequire('typeface-diplomata')\n"
   }
  ]
 },
 {
  "package": "typeface-love-ya-like-a-sister",
  "snippets": [
   {
    "description": "## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n",
    "snippet": "// Load Love Ya Like A Sister typeface\nrequire('typeface-love-ya-like-a-sister')\n"
   }
  ]
 },
 {
  "package": "typeface-meddon",
  "snippets": [
   {
    "description": "## Use\nTypefaces assume you’re using webpack to process CSS and files. Each typeface\npackage includes all necessary font files (woff2, woff) and a CSS file with\nfont-face declarations pointing at these files.\nYou will need to have webpack setup to load css and font files. Many tools built\nwith Webpack will work out of the box with Typefaces such as [Gatsby](https://github.com/gatsbyjs/gatsby)\nand [Create React App](https://github.com/facebookincubator/create-react-app).\nTo use, simply require the package in your project’s entry file e.g.\n",
    "snippet": "// Load Meddon typeface\nrequire('typeface-meddon')\n"
   }
  ]
 },
 {
  "package": "v-namespace",
  "snippets": []
 },
 {
  "package": "virtual-webtorrent",
  "snippets": [
   {
    "description": "# virtual-webtorrent [![stability][0]][1]\n[![npm version][2]][3] [![build status][4]][5] [![test coverage][6]][7]\n[![downloads][8]][9] [![js-standard-style][10]][11]\nWebtorrent video element for virtual-dom.\n## Usage\n",
    "snippet": "const hyperx = require('hyperx')\nconst vdom = require('virtual-dom')\nconst hx = hyperx(vdom.h)\nconst createWebTorrent = require('virtual-webtorrent')\n\nconst tree = hx`\n  <section>\n    ${createWebTorrent({ torrent: torrent })}\n  </section>\n`\ndocument.body.appendChild(vdom.create(tree))\n"
   }
  ]
 },
 {
  "package": "vndb",
  "snippets": [
   {
    "description": "## Usage\n`VNDB` exposes an object that contains only a single function `.start([host], [port])`. This is an asynchronous function that tries to connect to VNDB API.\n",
    "snippet": "const VNDB = require('vndb');\n\n(async () => {\n  try {\n    const vndb = await VNDB.start();\n    console.log('Connected!');\n  } catch (e) {\n    console.log('Something happened when connecting to VNDB API');\n  }\n})();\n"
   },
   {
    "description": "You can pass in host/port optionally. This is not required 99% of the times, unless VNDB changes host/port.\n",
    "snippet": "const vndb = await VNDB.start('myvndb.com', 1234);\n"
   },
   {
    "description": "The start function itself returns an object that contains the socket and 2 convenient methods to interact with it.\n* `vndb.write(message)`\nWrite a raw message to VNDB API. Specification should follow [https://vndb.org/d11]([https://vndb.org/d11]). This function will add terminator and queue the message accordingly, as one socket can only send/receive one message at a time.\n",
    "snippet": "const vndb = await VNDB.start();\nconst res0 = await vndb.write('login {\"protocol\":1,\"client\":\"VNDB-Reborn-Tester\",\"clientver\":\"0.0.1\"}');\nconst res1 = await vndb.write('dbstats');\nconst res2 = await vndb.write('get vn basic,anime (id = 17)');\n"
   },
   {
    "description": "* `vndb.end()`\nEnd the socket connection. Can be await-ed if you want to make sure that it really ends.\n",
    "snippet": "const vndb = await VNDB.start();\nconst res0 = await vndb.write('login {\"protocol\":1,\"client\":\"VNDB-Reborn-Tester\",\"clientver\":\"0.0.1\"}');\nawait vndb.end();\n"
   }
  ]
 },
 {
  "package": "vue-analytics-fb",
  "snippets": [
   {
    "description": "## Usage\n### Preparations\n",
    "snippet": "import Vue from 'Vue'\nimport VueFacebookPixel from 'vue-analytics-fb'\n\nVue.use(VueFacebookPixel)\n"
   },
   {
    "description": "### Calling API\nTo start using this script you will have to call `init(...)` first.\n",
    "snippet": "/**\n * Init facebook tracking pixel\n * @param  {String} appId\n * @param  {object} [data={}]\n */\nVue.analytics.fbq.init('YOUR_FACEBOOK_CODE', {\n  em: 'user@mail.com'\n})\n"
   },
   {
    "description": "Make sure `init(...)` is called only once.\nThen you will have full access to the `event(...)` method.\n",
    "snippet": "/**\n * Event tracking\n * @param  {String} name\n * @param  {object} [data={}]\n */\nVue.analytics.fbq.event('ViewContent', {\n  content_name: 'Really Fast Running Shoes'\n})\n"
   }
  ]
 },
 {
  "package": "vue-for-echarts",
  "snippets": []
 },
 {
  "package": "vue-hash-router",
  "snippets": []
 },
 {
  "package": "vue-headroom",
  "snippets": []
 },
 {
  "package": "vue-huonu-plugin",
  "snippets": []
 },
 {
  "package": "vue-network-status",
  "snippets": [
   {
    "description": "## Usage\nImport the desired components\n",
    "snippet": "import {NetworkInfo, OnlineStatus} from 'vue-network-status';\n"
   },
   {
    "description": "Register them in your component\n",
    "snippet": "export default {\n  name: 'app',\n  components: {\n    NetworkInfo,\n    OnlineStatus,\n    HelloWorld,\n  },\n};\n"
   }
  ]
 },
 {
  "package": "vue-phone-number-input-countrylist",
  "snippets": [
   {
    "description": "## Usage\n### ES6 Modules / CommonJS\n",
    "snippet": "import VuePhoneNumberInput from 'vue-phone-number-input';\nimport 'vue-phone-number-input/dist/vue-phone-number-input.css';\n\nVue.component('vue-phone-number-input', VuePhoneNumberInput);\n"
   }
  ]
 },
 {
  "package": "vue-photo-carousel-preview",
  "snippets": [
   {
    "description": "\r\n### Install plugin\r\n\r\n",
    "snippet": "import vuePhotoCarouselPreview from 'vue-photo-carousel-preview'\r\nVue.use(vuePhotoCarouselPreview)\r\n"
   }
  ]
 },
 {
  "package": "vue-simple-uploader",
  "snippets": [
   {
    "description": "## Usage\n### init\n",
    "snippet": "import Vue from 'vue'\nimport uploader from 'vue-simple-uploader'\nimport App from './App.vue'\n\nVue.use(uploader)\n\n/* eslint-disable no-new */\nnew Vue({\n  render(createElement) {\n    return createElement(App)\n  }\n}).$mount('#app')\n"
   },
   {
    "description": "#### Get `Uploader` instance\nYou can get it like this:\n",
    "snippet": "const uploaderInstance = this.$refs.uploader.uploader\n// now you can call all uploader methods\n// https://github.com/simple-uploader/Uploader#methods\nuploaderInstance.cancel()\n"
   }
  ]
 },
 {
  "package": "vuexp-fonticon",
  "snippets": []
 },
 {
  "package": "watchpush",
  "snippets": []
 },
 {
  "package": "wd-check",
  "snippets": []
 },
 {
  "package": "wdjf-file-loader",
  "snippets": [
   {
    "description": "<h2 align=\"center\"><a href=\"https://webpack.js.org/concepts/loaders\">Usage</a></h2>\nBy default the filename of the resulting file is the MD5 hash of the file's contents with the original extension of the required resource.\n",
    "snippet": "import img from './file.png'\n"
   },
   {
    "description": "**webpack.config.js**\n",
    "snippet": "module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(png|jpg|gif)$/,\n        use: [\n          {\n            loader: 'file-loader',\n            options: {}  \n          }\n        ]\n      }\n    ]\n  }\n}\n"
   },
   {
    "description": "### `regExp`\nDefines a `regExp` to match some parts of the file path. These capture groups can be reused in the `name` property using `[N]` placeholder. Note that `[0]` will be replaced by the entire tested string, whereas `[1]` will contain the first capturing parenthesis of your regex and so on...\n",
    "snippet": "import img from './customer01/file.png'\n"
   },
   {
    "description": "### `emitFile`\nBy default a file is emitted, however this can be disabled if required (e.g. for server side packages).\n",
    "snippet": "import img from './file.png'\n"
   },
   {
    "description": "<h2 align=\"center\">Examples</h2>\n",
    "snippet": "import png from 'image.png'\n"
   },
   {
    "description": "**webpack.config.js**\n",
    "snippet": "import png from 'path/to/file.png'\n"
   }
  ]
 },
 {
  "package": "weaver-queue",
  "snippets": []
 },
 {
  "package": "webp-middleware",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "var http = require('http');\nvar express = require('express');\nvar webp = require('webp-middleware');\n\nvar app = express();\n\napp.use(webp(__dirname + '/public', { ... }));\napp.use(express.static(__dirname + '/public'));\n"
   }
  ]
 },
 {
  "package": "webui-cli",
  "snippets": []
 },
 {
  "package": "wechat-corp-service-callback",
  "snippets": [
   {
    "description": "### 用法\n其中的token，encodingAESKey，suite_id可以在套件的信息配置界面获取。\n",
    "snippet": "var wechat_cs = require('wechat-corp-service-callback');\n\nvar app_suite = function(req, res, next) {\n    var _config = {\n        token: sc.token,\n        encodingAESKey: sc.encodingAESKey,\n        suiteid: sc.suite_id,\n    };\n    var _route = function(message, req, res, next) {\n        \n        if (message.InfoType == 'suite_ticket') { //微信服务器发过来的票，每10分钟发一次\n            //更新到数据库\n            var suite_ticket = message.SuiteTicket;\n            var suite_ticket_tm = new Date(parseInt(message.TimeStamp) * 1000);\n            //将最新的ticket放到数据库中, 调用用户自己定义的 save_ticket(callback) 方法。\n             save_ticket(function(err, ret) {\n                res.reply('success');\n            });\n        } else if (message.InfoType == 'change_auth') { //变更授权的通知\n            //更新到数据库\n            res.reply('success');\n\n        } else if (message.InfoType == 'cancel_auth') { //取消授权的通知\n            //更新到数据库\n            res.reply('success');\n        } else {\n            res.reply('success');\n        };\n    }\n    if (req.method == 'POST') {\n        wechat_cs(_config, _route)(req, res, next);\n    } else if (req.method == 'GET') {\n        res.send('这个接口不适合GET');\n    };\n}\n\napp.get(__base_path + '/app_suite_callback', app_suite);\napp.post(__base_path + '/app_suite_callback', app_suite);\n"
   }
  ]
 },
 {
  "package": "whats-goin-on",
  "snippets": []
 },
 {
  "package": "widgets-for-react-web",
  "snippets": []
 },
 {
  "package": "wiki-plugin-force",
  "snippets": []
 },
 {
  "package": "winderbaum-okcupidjs",
  "snippets": []
 },
 {
  "package": "windows-1256",
  "snippets": [
   {
    "description": "In [Node.js](https://nodejs.org/), [io.js](https://iojs.org/), [Narwhal](http://narwhaljs.org/), and [RingoJS](http://ringojs.org/):\n",
    "snippet": "var windows1256 = require('windows-1256');\n"
   },
   {
    "description": "In [Rhino](https://www.mozilla.org/rhino/):\n",
    "snippet": "load('windows1256.js');\n"
   },
   {
    "description": "Using an AMD loader like [RequireJS](http://requirejs.org/):\n",
    "snippet": "require(\n  {\n    'paths': {\n      'windows-1256': 'path/to/windows-1256'\n    }\n  },\n  ['windows-1256'],\n  function(windows1256) {\n    console.log(windows1256);\n  }\n);\n"
   },
   {
    "description": "### `windows1256.encode(input, options)`\nThis function takes a plain text string (the `input` parameter) and encodes it according to windows-1256. The return value is a ‘byte string’, i.e. a string of which each item represents an octet as per windows-1256.\n",
    "snippet": "const encodedData = windows1256.encode(text);\n"
   },
   {
    "description": "The optional `options` object and its `mode` property can be used to set the [error mode](https://encoding.spec.whatwg.org/#error-mode). For encoding, the error mode can be `'fatal'` (the default) or `'html'`.\n",
    "snippet": "const encodedData = windows1256.encode(text, {\n  'mode': 'html'\n});\n// If `text` contains a symbol that cannot be represented in windows-1256,\n// instead of throwing an error, it will return an HTML entity for the symbol.\n"
   },
   {
    "description": "### `windows1256.decode(input, options)`\nThis function takes a byte string (the `input` parameter) and decodes it according to windows-1256.\n",
    "snippet": "const text = windows1256.decode(encodedData);\n"
   },
   {
    "description": "The optional `options` object and its `mode` property can be used to set the [error mode](https://encoding.spec.whatwg.org/#error-mode). For decoding, the error mode can be `'replacement'` (the default) or `'fatal'`.\n",
    "snippet": "const text = windows1256.decode(encodedData, {\n  'mode': 'fatal'\n});\n// If `encodedData` contains an invalid byte for the windows-1256 encoding,\n// instead of replacing it with U+FFFD in the output, an error is thrown.\n"
   }
  ]
 },
 {
  "package": "with-http-reducer",
  "snippets": []
 },
 {
  "package": "wqProj-cli",
  "snippets": []
 },
 {
  "package": "ws-engine-request",
  "snippets": [
   {
    "description": "## Examples\n### Single Task Server Example\n",
    "snippet": "#!/usr/bin/env node\n\n'use strict';\n\nvar wer = require('ws-engine-request');\n\nwer.server({\n    port: 5000\n}, (messageData, callback) => {\n    let error = null;\n    let data = {\n        id: 1,\n        title: 'A Random Title'\n    };\n    let message = null;\n    callback(error, data, message);\n});\n"
   },
   {
    "description": "### Restify Example\n",
    "snippet": "#!/usr/bin/env node\n\n'use strict';\n\nvar restify = require('restify');\nvar wer = require('ws-engine-request');\n\nlet server = restify.createServer({name: 'Restify Example - WebSocket Engine Connection'});\n\nserver.use(restify.acceptParser(server.acceptable));\nserver.use(restify.queryParser());\nserver.use(restify.bodyParser());\n\nserver.get('/engine', wer.request('ws://localhost:5000', null, null), wer.format);\n\nserver.listen(8080, () => {\n    console.log('%s listening at %s', server.name, server.url);\n});\n"
   }
  ]
 },
 {
  "package": "wywordcloud",
  "snippets": [
   {
    "description": "## Usage\n",
    "snippet": "import wywordcloud from 'wywordcloud';\nvar wc = new wywordcloud(document.getElementById('container'))\nwc.setOption({\n    tooltip: {\n        show: true\n    },\n    list: [['谈笑风生', 80], ['谈笑风生', 80], ['谈笑风生', 70], ['谈笑风生', 70], ['谈笑风生', 60], ['谈笑风生', 60]],\n    color: '#15a4fa'\n})\n"
   }
  ]
 },
 {
  "package": "y-intercept",
  "snippets": []
 },
 {
  "package": "y-prompt",
  "snippets": [
   {
    "description": "\r\n<br/>\r\n\r\nAsk your questions and process the result:\r\n\r\n",
    "snippet": "\tconst Prompt=require('y-prompt');\r\n\t// use predefined types\r\n\tPrompt.baseTypes();\r\n\t// --- prompt your questions\r\n\tPrompt.prompter()\r\n\t// prepare your questions\r\n\t.log(datas=>'\\n--------- Start prompt ---------\\n')\r\n\t.ask('yn','response','do you say yes or no ?',{defaultValue:'n'})\r\n\t.log(datas=>'\\n--------- End prompt ('+datas.response+') ---------\\n')\r\n\t// launch the prompt\r\n\t.start()\r\n\t.then(function(datas){\r\n\t\t// process the result\r\n\t\tvar answer=['Yes','No'][datas.response?1:0];\r\n\t\tconsole.log('\\n- anwser='+answer+'\\n- data='+data);\r\n\r\n\t\t// **** if y displays :\r\n\t\t//- anwser=Yes\r\n\t\t//- data={response:true}\r\n\r\n\t\t// **** if n displays :\r\n\t\t//- anwser=No\r\n\t\t//- data={response:false}\r\n\r\n\t\tprocess.exit();\r\n\t});\r\n"
   },
   {
    "description": "### <a name=\"tg_basetypes\"></a> Base types.\r\n\r\nOn your first uses, you may want to use 'y-prompt' [base types](YPrompt.baseTypes.js) instead before defining your owns (in this case go directly to [Make a prompter](#tg_prompt)), or you may simply use them whith yours.<br/>\r\n\r\n",
    "snippet": "\t// ...\r\n\t// use predefined types\r\n\tPrompt.baseTypes();\r\n"
   },
   {
    "description": "### <a name=\"tg_deftypes\"></a> Define types.\r\n\r\ndefine a new type with **Prompt.addType**:\r\n\r\n",
    "snippet": "\t/**\r\n\tAdd a new question type.\r\n\t@param {string} name : the type name.\r\n\t@param {function(inpt,onError,params)} check : return true if input is valid, else call onError.<br/>\r\n\t- {string} input : the current entry value<br/>\r\n\t- {function(message)} onError : Call to send an error message when the input is invalid.<br/>\r\n\t- {object} params : The parameters you may add to a quetion.<br/>\r\n\t@param {function(input,params)} transform : return the data corresponding to 'input'.\r\n\t- {string} input : the current entry value<br/>\r\n\t- {object} params : The parameters you may add to a quetion.<br/>\r\n\t@param {string} [parentType] : inherits its behaviour from a parent type if 'parentType' is defined. The parent will check and transform the data before passing it to the child method\r\n\t@param {any} [defaultValue] : defines a default value. Its use is deprecated since it remove the possibility to make the answer mandatory.\r\n\t*/\r\n\tPrompt.addType(name,check,transform,parentType,defaultValue);\r\n"
   },
   {
    "description": "\r\n<br/>\r\n\r\nExemple from **[base types](YPrompt.baseTypes.js)** :\r\n\r\n",
    "snippet": "\t// ...\r\n\t/**\r\n\tgets a 'y' (for Yes) or 'n' (for No) answer as a boolean\r\n\t*/\r\n\tPrompt.addType('yn',\r\n\t\tfunction(inpt,onerr,params){//check\r\n\t\t\tif(['n','y'].indexOf(inpt.toLowerCase())>-1){\r\n\t\t\t\treturn 1;\r\n\t\t\t}else{\r\n\t\t\t\tonerr(`'${inpt}' is not a valid answer, accepted are 'y' for yes or 'n' for no.`);\r\n\t\t\t}\r\n\r\n\t\t},\r\n\t\tfunction(inpt){return !!(['n','y'].indexOf(inpt.toLowerCase()));}//transform gets boolean\r\n\t);\r\n"
   },
   {
    "description": "## <a name=\"tg_config\"></a>Configuration.\r\n\r\nYou can change the appearance of the prompt by changing the configuration styles for \t\t\t**varName,type,value,defaultValue,error**.\r\n\r\n",
    "snippet": "\t// ...\r\n\tPrompt.config.style.varName='green';\r\n"
   },
   {
    "description": "## <a name=\"tg_prompt\"></a>Make a prompter.\r\n\r\nThe first step is to create a new prompter.\r\n\r\n",
    "snippet": "\t// ... dont forget to init types before\r\n\t// ...\r\n\tvar prompter=Prompt.prompter();\r\n\r\n"
   },
   {
    "description": "#### <a name=\"tg_log\"></a> prompter.log\r\n\r\nLog a message between quesions.\r\n\r\n",
    "snippet": "\t/**\r\n\tLog a message between quesions.\r\n\t@param {string} message : will be logged to the console in time.\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.log(message);\r\n"
   },
   {
    "description": "#### <a name=\"tg_ask\"></a> prompter.ask\r\n\r\nAsk a question.\r\n\r\n",
    "snippet": "\t/**\r\n\tAsk a question.\r\n\t@param {string} type : the name of the type used for the question.\r\n\t@param {string} varName : the name of the data property to witch the result will be assigned.\r\n\t@param {string} message : the question you want to ask.\r\n\t@param {object} [params] : specific questions parameters.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.ask(type,varName,message,params);\r\n"
   },
   {
    "description": "#### <a name=\"tg_askIf\"></a> prompter.askIf\r\n\r\nadds a conditionnal prompter.\r\n\r\n",
    "snippet": "\t/**\r\n\tadds a conditionnal prompter.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askIf(varName,condition,collector);\r\n"
   },
   {
    "description": "#### <a name=\"tg_elseIf\"></a> prompter.elseIf\r\n\r\nadds a conditionnal prompter if preceeding conditions are not ok.\r\n\r\n",
    "snippet": "\t/**\r\n\tadds a conditionnal prompter if preceeding conditions are not ok.<br/>\r\n\tcan be only called after askIf or elseIf.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.elseIf(varName,condition,collector);\r\n"
   },
   {
    "description": "#### <a name=\"tg_else\"></a> prompter.else\r\n\r\nadds a prompter if preceeding conditions are not ok.\r\n\r\n",
    "snippet": "\t/**\r\n\tadds a prompter if preceeding conditions are not ok.<br/>\r\n\tcan be only called after askIf or elseIf.\r\n\t@param {string} varName : data property to witch the  the resulting object will be assigned.<br/>\r\n\tIf not a string, resulting object properties are directky applied to the parent object.\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector if condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.else(varName,collector);\r\n"
   },
   {
    "description": "#### <a name=\"tg_askWhile\"></a> prompter.askWhile\r\n\r\nCalls for prompters while condition is ok.\r\n\r\n",
    "snippet": "\t/**\r\n\tCalls for collector while condition is ok. Creates an array of objects.<br/>\r\n\t@param {string} varName : data property to witch the  the resulting array will be assigned.<br/>\r\n\t@param {function(datas,localDatas)} condition : return true when condition ok.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The current prompter datas.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector eatch time condition ok.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askWhile(varName,condition,collector);\r\n"
   },
   {
    "description": "#### <a name=\"tg_askLoop\"></a> prompter.askLoop\r\n\r\nCalls for prompters a number of times.\r\n\r\n",
    "snippet": "/**\r\n\tCalls for collector 'nbLoop' times. Creates an array of objects.<br/>\r\n\t@param {string} varName : data property to witch the  the resulting array will be assigned.<br/>\r\n\t@param {number>0|function} nbLoop : is or returns the size of the resulting array.<br/>\r\n\t@param {function(prompter,datas,localDatas)} collector : calls for a new collector 'nbLoop' times.<br/>\r\n\t- {Prompter} prompter : the prompter used to collect new questions.<br/>\r\n\t- {object} datas : The current global datas.<br/>\r\n\t- {object} localDatas : The local prompter datas.<br/>\r\n\t@return {Prompter} the current prompter.\r\n\t*/\r\n\tprompter.askLoop(varName,nbLoop,collector);\r\n"
   },
   {
    "description": "### <a name=\"tg_result\"></a>Get the result.\r\n\r\n<hr/>\r\n\r\n#### <a name=\"tg_start\"></a> prompter.start\r\n\r\n",
    "snippet": "\t/**\r\n\tStarts the prompt session.<br/>\r\n\tDoes not return a prompter. 'start' is the final action, call it only when all questions are prepared.\r\n\t@return {Promise} a promise flushed with the resulting datas when all questions are answered.\r\n\t*/\r\n\tprompter.start().then(datas=>{/* proceed result */})\r\n"
   }
  ]
 },
 {
  "package": "yamoo9-unique-id",
  "snippets": [
   {
    "description": "# UniqueID 모듈\n### 사용법\n",
    "snippet": "var uniqueID = require('yamoo9-unique-id');\n\nuniqueID(); // 함수 호출하면 고유 ID 코드가 출력\n"
   }
  ]
 },
 {
  "package": "ybm",
  "snippets": []
 },
 {
  "package": "yoko-cli",
  "snippets": []
 },
 {
  "package": "yrdLmz",
  "snippets": []
 },
 {
  "package": "ysb-grunt-protractor-runner",
  "snippets": []
 },
 {
  "package": "yuanian-common-echartable",
  "snippets": [
   {
    "description": "\r\n然后，在代码中调用：\r\n\r\n",
    "snippet": "import ReactComponent from 'react_component';\r\n"
   }
  ]
 },
 {
  "package": "zprint-clj",
  "snippets": [
   {
    "description": "### API\n",
    "snippet": "const printFile = require('zprint-clj');\nconst outputText = format(inputText, inputFilePath, opts);\n"
   }
  ]
 }
]